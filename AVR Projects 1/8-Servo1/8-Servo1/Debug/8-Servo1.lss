
8-Servo1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000011c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000097  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  0000087f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  0000089f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000195  00000000  00000000  000008ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000104  00000000  00000000  00000a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001eb  00000000  00000000  00000b53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000d40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000fc  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000038  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main()
{
	//PD5 --> Data for Servo
	DDRD  |= 0xff; // set all D Pins for output
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	81 bb       	out	0x11, r24	; 17
	
	TCCR1A |= 1 << WGM11 | 1 << COM1A1 | 1 << COM1A0;
  72:	8f b5       	in	r24, 0x2f	; 47
  74:	82 6c       	ori	r24, 0xC2	; 194
  76:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1 << WGM12 | 1 << WGM13 | 1 << CS10;
  78:	8e b5       	in	r24, 0x2e	; 46
  7a:	89 61       	ori	r24, 0x19	; 25
  7c:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 19999;
  7e:	8f e1       	ldi	r24, 0x1F	; 31
  80:	9e e4       	ldi	r25, 0x4E	; 78
  82:	97 bd       	out	0x27, r25	; 39
  84:	86 bd       	out	0x26, r24	; 38
	//OCR1A = ICR1 - 2000 ; // 17999 --> ~18000
	//OCR1A = ICR1 - 900; // .9 miliseconds 
	
	while(1)
	{
		OCR1A = ICR1 - 800;
  86:	86 b5       	in	r24, 0x26	; 38
  88:	97 b5       	in	r25, 0x27	; 39
  8a:	80 52       	subi	r24, 0x20	; 32
  8c:	93 40       	sbci	r25, 0x03	; 3
  8e:	9b bd       	out	0x2b, r25	; 43
  90:	8a bd       	out	0x2a, r24	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	8f e3       	ldi	r24, 0x3F	; 63
  94:	9d e0       	ldi	r25, 0x0D	; 13
  96:	a3 e0       	ldi	r26, 0x03	; 3
  98:	81 50       	subi	r24, 0x01	; 1
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	a0 40       	sbci	r26, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x2c>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x36>
  a2:	00 00       	nop
		_delay_ms(1000);
		OCR1A = ICR1 - 2200;
  a4:	86 b5       	in	r24, 0x26	; 38
  a6:	97 b5       	in	r25, 0x27	; 39
  a8:	88 59       	subi	r24, 0x98	; 152
  aa:	98 40       	sbci	r25, 0x08	; 8
  ac:	9b bd       	out	0x2b, r25	; 43
  ae:	8a bd       	out	0x2a, r24	; 42
  b0:	8f e3       	ldi	r24, 0x3F	; 63
  b2:	9d e0       	ldi	r25, 0x0D	; 13
  b4:	a3 e0       	ldi	r26, 0x03	; 3
  b6:	81 50       	subi	r24, 0x01	; 1
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	a0 40       	sbci	r26, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x4a>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x54>
  c0:	00 00       	nop
  c2:	e1 cf       	rjmp	.-62     	; 0x86 <main+0x1a>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
