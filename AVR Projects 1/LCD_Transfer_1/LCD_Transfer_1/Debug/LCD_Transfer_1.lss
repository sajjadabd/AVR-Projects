
LCD_Transfer_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000694  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000694  00000728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  0080007c  0080007c  00000744  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000744  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001dd  00000000  00000000  00000ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000962  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002da  00000000  00000000  00001a06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000828  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000140  00000000  00000000  00002508  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000027c  00000000  00000000  00002648  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001f9  00000000  00000000  000028c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  00002abd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000038  00000000  00000000  00002af5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e9       	ldi	r30, 0x94	; 148
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 39       	cpi	r26, 0x94	; 148
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <main>
  8a:	0c 94 48 03 	jmp	0x690	; 0x690 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <plusAddress>:
}


void plusAddress()
{
	address_1 = address_1 + 0x01;
  92:	80 91 90 00 	lds	r24, 0x0090
  96:	90 91 91 00 	lds	r25, 0x0091
  9a:	01 96       	adiw	r24, 0x01	; 1
  9c:	90 93 91 00 	sts	0x0091, r25
  a0:	80 93 90 00 	sts	0x0090, r24
}
  a4:	08 95       	ret

000000a6 <plusData>:

void plusData()
{
	data_1 = data_1 + 0x01;
  a6:	80 91 92 00 	lds	r24, 0x0092
  aa:	90 91 93 00 	lds	r25, 0x0093
  ae:	01 96       	adiw	r24, 0x01	; 1
  b0:	90 93 93 00 	sts	0x0093, r25
  b4:	80 93 92 00 	sts	0x0092, r24
}
  b8:	08 95       	ret

000000ba <ScanButton4>:
}



void ScanButton4()
{
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
	
	if(bit_is_clear(PINA, 4))
  be:	cc 99       	sbic	0x19, 4	; 25
  c0:	14 c0       	rjmp	.+40     	; 0xea <ScanButton4+0x30>
	{
		if(pressed4 >= 1000)
  c2:	80 91 82 00 	lds	r24, 0x0082
  c6:	90 91 83 00 	lds	r25, 0x0083
  ca:	23 e0       	ldi	r18, 0x03	; 3
  cc:	88 3e       	cpi	r24, 0xE8	; 232
  ce:	92 07       	cpc	r25, r18
  d0:	3c f0       	brlt	.+14     	; 0xe0 <ScanButton4+0x26>
		{
			pressed4 = 500;
  d2:	84 ef       	ldi	r24, 0xF4	; 244
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	90 93 83 00 	sts	0x0083, r25
  da:	80 93 82 00 	sts	0x0082, r24
  de:	0d c0       	rjmp	.+26     	; 0xfa <ScanButton4+0x40>
		}
		else
		{
			pressed4++;
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	90 93 83 00 	sts	0x0083, r25
  e6:	80 93 82 00 	sts	0x0082, r24
			on4 = 0;
		}
	}		
	*/
		
	if(pressed4 >= 400)
  ea:	80 91 82 00 	lds	r24, 0x0082
  ee:	90 91 83 00 	lds	r25, 0x0083
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	80 39       	cpi	r24, 0x90	; 144
  f6:	92 07       	cpc	r25, r18
  f8:	ac f1       	brlt	.+106    	; 0x164 <ScanButton4+0xaa>
	{
		if(bit_is_clear(PINA,4))
  fa:	cc 99       	sbic	0x19, 4	; 25
  fc:	1a c0       	rjmp	.+52     	; 0x132 <ScanButton4+0x78>
		{
			//Do Nothing
			if( on4 == 0 || on4 == 1 )
  fe:	80 91 8c 00 	lds	r24, 0x008C
 102:	90 91 8d 00 	lds	r25, 0x008D
 106:	82 30       	cpi	r24, 0x02	; 2
 108:	91 05       	cpc	r25, r1
 10a:	60 f5       	brcc	.+88     	; 0x164 <ScanButton4+0xaa>
 10c:	c0 e0       	ldi	r28, 0x00	; 0
 10e:	d0 e0       	ldi	r29, 0x00	; 0
			{
				for(int k=0;k<10;k++)
					Send_Packet(RADDR, LEDON4);
 110:	84 e4       	ldi	r24, 0x44	; 68
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	67 e7       	ldi	r22, 0x77	; 119
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	0e 94 c9 01 	call	0x392	; 0x392 <Send_Packet>
		if(bit_is_clear(PINA,4))
		{
			//Do Nothing
			if( on4 == 0 || on4 == 1 )
			{
				for(int k=0;k<10;k++)
 11c:	21 96       	adiw	r28, 0x01	; 1
 11e:	ca 30       	cpi	r28, 0x0A	; 10
 120:	d1 05       	cpc	r29, r1
 122:	b1 f7       	brne	.-20     	; 0x110 <ScanButton4+0x56>
					Send_Packet(RADDR, LEDON4);
				on4 = 1;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 8d 00 	sts	0x008D, r25
 12c:	80 93 8c 00 	sts	0x008C, r24
 130:	19 c0       	rjmp	.+50     	; 0x164 <ScanButton4+0xaa>
		}
		else
		{
			//PORTB ^= 1 << PINB0;
			
			if( on4 == 1 )
 132:	80 91 8c 00 	lds	r24, 0x008C
 136:	90 91 8d 00 	lds	r25, 0x008D
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	91 05       	cpc	r25, r1
 13e:	71 f4       	brne	.+28     	; 0x15c <ScanButton4+0xa2>
 140:	ca e0       	ldi	r28, 0x0A	; 10
 142:	d0 e0       	ldi	r29, 0x00	; 0
			{
				for(int k=0;k<10;k++)
					Send_Packet(RADDR, LEDOFF4);
 144:	84 e4       	ldi	r24, 0x44	; 68
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	69 e9       	ldi	r22, 0x99	; 153
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	0e 94 c9 01 	call	0x392	; 0x392 <Send_Packet>
 150:	21 97       	sbiw	r28, 0x01	; 1
		{
			//PORTB ^= 1 << PINB0;
			
			if( on4 == 1 )
			{
				for(int k=0;k<10;k++)
 152:	c1 f7       	brne	.-16     	; 0x144 <ScanButton4+0x8a>
					Send_Packet(RADDR, LEDOFF4);
				on4 = 0;
 154:	10 92 8d 00 	sts	0x008D, r1
 158:	10 92 8c 00 	sts	0x008C, r1
			}
			
			
			pressed4 = 0;					
 15c:	10 92 83 00 	sts	0x0083, r1
 160:	10 92 82 00 	sts	0x0082, r1
		}
	}
	
	
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <ScanButton3>:


void ScanButton3()
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
	if(bit_is_clear(PINA, 3))
 16e:	cb 99       	sbic	0x19, 3	; 25
 170:	14 c0       	rjmp	.+40     	; 0x19a <ScanButton3+0x30>
	{
		if(pressed3 >= 1000)
 172:	80 91 80 00 	lds	r24, 0x0080
 176:	90 91 81 00 	lds	r25, 0x0081
 17a:	23 e0       	ldi	r18, 0x03	; 3
 17c:	88 3e       	cpi	r24, 0xE8	; 232
 17e:	92 07       	cpc	r25, r18
 180:	3c f0       	brlt	.+14     	; 0x190 <ScanButton3+0x26>
		{
			pressed3 = 500;
 182:	84 ef       	ldi	r24, 0xF4	; 244
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	90 93 81 00 	sts	0x0081, r25
 18a:	80 93 80 00 	sts	0x0080, r24
 18e:	0d c0       	rjmp	.+26     	; 0x1aa <ScanButton3+0x40>
		}
		else
		{
			pressed3++;
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	90 93 81 00 	sts	0x0081, r25
 196:	80 93 80 00 	sts	0x0080, r24
			on3 = 0;
		}
	}	
	*/
		
	if(pressed3 >= 400)
 19a:	80 91 80 00 	lds	r24, 0x0080
 19e:	90 91 81 00 	lds	r25, 0x0081
 1a2:	21 e0       	ldi	r18, 0x01	; 1
 1a4:	80 39       	cpi	r24, 0x90	; 144
 1a6:	92 07       	cpc	r25, r18
 1a8:	ac f1       	brlt	.+106    	; 0x214 <ScanButton3+0xaa>
	{
		if(bit_is_clear(PINA,3))
 1aa:	cb 99       	sbic	0x19, 3	; 25
 1ac:	1a c0       	rjmp	.+52     	; 0x1e2 <ScanButton3+0x78>
		{
			//Do Nothing
			if( on3 == 0 || on3 == 1 )
 1ae:	80 91 8a 00 	lds	r24, 0x008A
 1b2:	90 91 8b 00 	lds	r25, 0x008B
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	91 05       	cpc	r25, r1
 1ba:	60 f5       	brcc	.+88     	; 0x214 <ScanButton3+0xaa>
 1bc:	c0 e0       	ldi	r28, 0x00	; 0
 1be:	d0 e0       	ldi	r29, 0x00	; 0
			{
				for(int k=0;k<10;k++)
					Send_Packet(RADDR, LEDON3);
 1c0:	84 e4       	ldi	r24, 0x44	; 68
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	66 e6       	ldi	r22, 0x66	; 102
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	0e 94 c9 01 	call	0x392	; 0x392 <Send_Packet>
		if(bit_is_clear(PINA,3))
		{
			//Do Nothing
			if( on3 == 0 || on3 == 1 )
			{
				for(int k=0;k<10;k++)
 1cc:	21 96       	adiw	r28, 0x01	; 1
 1ce:	ca 30       	cpi	r28, 0x0A	; 10
 1d0:	d1 05       	cpc	r29, r1
 1d2:	b1 f7       	brne	.-20     	; 0x1c0 <ScanButton3+0x56>
					Send_Packet(RADDR, LEDON3);
				on3 = 1;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	90 93 8b 00 	sts	0x008B, r25
 1dc:	80 93 8a 00 	sts	0x008A, r24
 1e0:	19 c0       	rjmp	.+50     	; 0x214 <ScanButton3+0xaa>
		}
		else
		{
			//PORTB ^= 1 << PINB0;
			
			if( on3 == 1 )
 1e2:	80 91 8a 00 	lds	r24, 0x008A
 1e6:	90 91 8b 00 	lds	r25, 0x008B
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	91 05       	cpc	r25, r1
 1ee:	71 f4       	brne	.+28     	; 0x20c <ScanButton3+0xa2>
 1f0:	ca e0       	ldi	r28, 0x0A	; 10
 1f2:	d0 e0       	ldi	r29, 0x00	; 0
			{
				for(int k=0;k<10;k++)
					Send_Packet(RADDR, LEDOFF3);
 1f4:	84 e4       	ldi	r24, 0x44	; 68
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	68 e8       	ldi	r22, 0x88	; 136
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	0e 94 c9 01 	call	0x392	; 0x392 <Send_Packet>
 200:	21 97       	sbiw	r28, 0x01	; 1
		{
			//PORTB ^= 1 << PINB0;
			
			if( on3 == 1 )
			{
				for(int k=0;k<10;k++)
 202:	c1 f7       	brne	.-16     	; 0x1f4 <ScanButton3+0x8a>
					Send_Packet(RADDR, LEDOFF3);
				on3 = 0;
 204:	10 92 8b 00 	sts	0x008B, r1
 208:	10 92 8a 00 	sts	0x008A, r1
			}
			
			pressed3 = 0;					
 20c:	10 92 81 00 	sts	0x0081, r1
 210:	10 92 80 00 	sts	0x0080, r1
		}
	}
	
	
}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <ScanButton2>:



void ScanButton2()
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
	if(bit_is_clear(PINA, 2))
 21e:	ca 99       	sbic	0x19, 2	; 25
 220:	14 c0       	rjmp	.+40     	; 0x24a <ScanButton2+0x30>
	{
		if(pressed2 >= 1000)
 222:	80 91 7e 00 	lds	r24, 0x007E
 226:	90 91 7f 00 	lds	r25, 0x007F
 22a:	23 e0       	ldi	r18, 0x03	; 3
 22c:	88 3e       	cpi	r24, 0xE8	; 232
 22e:	92 07       	cpc	r25, r18
 230:	3c f0       	brlt	.+14     	; 0x240 <ScanButton2+0x26>
		{
			pressed2 = 500;
 232:	84 ef       	ldi	r24, 0xF4	; 244
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	90 93 7f 00 	sts	0x007F, r25
 23a:	80 93 7e 00 	sts	0x007E, r24
 23e:	0d c0       	rjmp	.+26     	; 0x25a <ScanButton2+0x40>
		}
		else
		{
			pressed2++;
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	90 93 7f 00 	sts	0x007F, r25
 246:	80 93 7e 00 	sts	0x007E, r24
			on2 = 0;
		}
	}
	*/	
		
	if(pressed2 >= 400)
 24a:	80 91 7e 00 	lds	r24, 0x007E
 24e:	90 91 7f 00 	lds	r25, 0x007F
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	80 39       	cpi	r24, 0x90	; 144
 256:	92 07       	cpc	r25, r18
 258:	ac f1       	brlt	.+106    	; 0x2c4 <ScanButton2+0xaa>
	{
		if(bit_is_clear(PINA,2))
 25a:	ca 99       	sbic	0x19, 2	; 25
 25c:	1a c0       	rjmp	.+52     	; 0x292 <ScanButton2+0x78>
		{
			//Do Nothing
			if( on2 == 0 || on2 == 1 )
 25e:	80 91 88 00 	lds	r24, 0x0088
 262:	90 91 89 00 	lds	r25, 0x0089
 266:	82 30       	cpi	r24, 0x02	; 2
 268:	91 05       	cpc	r25, r1
 26a:	60 f5       	brcc	.+88     	; 0x2c4 <ScanButton2+0xaa>
 26c:	c0 e0       	ldi	r28, 0x00	; 0
 26e:	d0 e0       	ldi	r29, 0x00	; 0
			{
				for(int k=0;k<10;k++)
					Send_Packet(RADDR, LEDON2);
 270:	84 e4       	ldi	r24, 0x44	; 68
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	62 e2       	ldi	r22, 0x22	; 34
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	0e 94 c9 01 	call	0x392	; 0x392 <Send_Packet>
		if(bit_is_clear(PINA,2))
		{
			//Do Nothing
			if( on2 == 0 || on2 == 1 )
			{
				for(int k=0;k<10;k++)
 27c:	21 96       	adiw	r28, 0x01	; 1
 27e:	ca 30       	cpi	r28, 0x0A	; 10
 280:	d1 05       	cpc	r29, r1
 282:	b1 f7       	brne	.-20     	; 0x270 <ScanButton2+0x56>
					Send_Packet(RADDR, LEDON2);
				on2 = 1;
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	90 93 89 00 	sts	0x0089, r25
 28c:	80 93 88 00 	sts	0x0088, r24
 290:	19 c0       	rjmp	.+50     	; 0x2c4 <ScanButton2+0xaa>
		}
		else
		{
			//PORTB ^= 1 << PINB0;
			
			if( on2 == 1 )
 292:	80 91 88 00 	lds	r24, 0x0088
 296:	90 91 89 00 	lds	r25, 0x0089
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	91 05       	cpc	r25, r1
 29e:	71 f4       	brne	.+28     	; 0x2bc <ScanButton2+0xa2>
 2a0:	ca e0       	ldi	r28, 0x0A	; 10
 2a2:	d0 e0       	ldi	r29, 0x00	; 0
			{
				for(int k=0;k<10;k++)
					Send_Packet(RADDR, LEDOFF2);
 2a4:	84 e4       	ldi	r24, 0x44	; 68
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	65 e5       	ldi	r22, 0x55	; 85
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	0e 94 c9 01 	call	0x392	; 0x392 <Send_Packet>
 2b0:	21 97       	sbiw	r28, 0x01	; 1
		{
			//PORTB ^= 1 << PINB0;
			
			if( on2 == 1 )
			{
				for(int k=0;k<10;k++)
 2b2:	c1 f7       	brne	.-16     	; 0x2a4 <ScanButton2+0x8a>
					Send_Packet(RADDR, LEDOFF2);
				on2 = 0;
 2b4:	10 92 89 00 	sts	0x0089, r1
 2b8:	10 92 88 00 	sts	0x0088, r1
			}
			
			pressed2 = 0;					
 2bc:	10 92 7f 00 	sts	0x007F, r1
 2c0:	10 92 7e 00 	sts	0x007E, r1
		}
	}
	
	
}
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <ScanButton1>:

void ScanButton1()
{
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
	
	if(bit_is_clear(PINA, 1))
 2ce:	c9 99       	sbic	0x19, 1	; 25
 2d0:	14 c0       	rjmp	.+40     	; 0x2fa <ScanButton1+0x30>
	{
		if(pressed1 >= 1000)
 2d2:	80 91 7c 00 	lds	r24, 0x007C
 2d6:	90 91 7d 00 	lds	r25, 0x007D
 2da:	23 e0       	ldi	r18, 0x03	; 3
 2dc:	88 3e       	cpi	r24, 0xE8	; 232
 2de:	92 07       	cpc	r25, r18
 2e0:	3c f0       	brlt	.+14     	; 0x2f0 <ScanButton1+0x26>
		{
			pressed1 = 500;
 2e2:	84 ef       	ldi	r24, 0xF4	; 244
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	90 93 7d 00 	sts	0x007D, r25
 2ea:	80 93 7c 00 	sts	0x007C, r24
 2ee:	0d c0       	rjmp	.+26     	; 0x30a <ScanButton1+0x40>
		}
		else
		{
			pressed1++;
 2f0:	01 96       	adiw	r24, 0x01	; 1
 2f2:	90 93 7d 00 	sts	0x007D, r25
 2f6:	80 93 7c 00 	sts	0x007C, r24
			on1 = 0;
		}
	}	
	*/	
		
	if(pressed1 >= 400)
 2fa:	80 91 7c 00 	lds	r24, 0x007C
 2fe:	90 91 7d 00 	lds	r25, 0x007D
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	80 39       	cpi	r24, 0x90	; 144
 306:	92 07       	cpc	r25, r18
 308:	ac f1       	brlt	.+106    	; 0x374 <ScanButton1+0xaa>
	{
		if(bit_is_clear(PINA,1))
 30a:	c9 99       	sbic	0x19, 1	; 25
 30c:	1a c0       	rjmp	.+52     	; 0x342 <ScanButton1+0x78>
		{
			//Do Nothing
			if( on1 == 0 || on1 == 1 )
 30e:	80 91 86 00 	lds	r24, 0x0086
 312:	90 91 87 00 	lds	r25, 0x0087
 316:	82 30       	cpi	r24, 0x02	; 2
 318:	91 05       	cpc	r25, r1
 31a:	60 f5       	brcc	.+88     	; 0x374 <ScanButton1+0xaa>
 31c:	c0 e0       	ldi	r28, 0x00	; 0
 31e:	d0 e0       	ldi	r29, 0x00	; 0
			{
				for(int k=0;k<10;k++)
					Send_Packet(RADDR, LEDON1);
 320:	84 e4       	ldi	r24, 0x44	; 68
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	61 e1       	ldi	r22, 0x11	; 17
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	0e 94 c9 01 	call	0x392	; 0x392 <Send_Packet>
		if(bit_is_clear(PINA,1))
		{
			//Do Nothing
			if( on1 == 0 || on1 == 1 )
			{
				for(int k=0;k<10;k++)
 32c:	21 96       	adiw	r28, 0x01	; 1
 32e:	ca 30       	cpi	r28, 0x0A	; 10
 330:	d1 05       	cpc	r29, r1
 332:	b1 f7       	brne	.-20     	; 0x320 <ScanButton1+0x56>
					Send_Packet(RADDR, LEDON1);
				on1 = 1;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	90 93 87 00 	sts	0x0087, r25
 33c:	80 93 86 00 	sts	0x0086, r24
 340:	19 c0       	rjmp	.+50     	; 0x374 <ScanButton1+0xaa>
		}
		else
		{
			//PORTB ^= 1 << PINB0;
			
			if( on1 == 1 )
 342:	80 91 86 00 	lds	r24, 0x0086
 346:	90 91 87 00 	lds	r25, 0x0087
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	91 05       	cpc	r25, r1
 34e:	71 f4       	brne	.+28     	; 0x36c <ScanButton1+0xa2>
 350:	ca e0       	ldi	r28, 0x0A	; 10
 352:	d0 e0       	ldi	r29, 0x00	; 0
			{
				for(int k=0;k<10;k++)
					Send_Packet(RADDR, LEDOFF1);
 354:	84 e4       	ldi	r24, 0x44	; 68
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	63 e3       	ldi	r22, 0x33	; 51
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	0e 94 c9 01 	call	0x392	; 0x392 <Send_Packet>
 360:	21 97       	sbiw	r28, 0x01	; 1
		{
			//PORTB ^= 1 << PINB0;
			
			if( on1 == 1 )
			{
				for(int k=0;k<10;k++)
 362:	c1 f7       	brne	.-16     	; 0x354 <ScanButton1+0x8a>
					Send_Packet(RADDR, LEDOFF1);
				on1 = 0;
 364:	10 92 87 00 	sts	0x0087, r1
 368:	10 92 86 00 	sts	0x0086, r1
			}
			
			pressed1 = 0;					
 36c:	10 92 7d 00 	sts	0x007D, r1
 370:	10 92 7c 00 	sts	0x007C, r1
		}
	}
	
}
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	08 95       	ret

0000037a <USART_Init>:


void USART_Init(void)
{
	//Set baud rate
	UBRRL=(uint8_t)UBRRVAL;		//low byte
 37a:	83 e3       	ldi	r24, 0x33	; 51
 37c:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);	//high byte
 37e:	10 bc       	out	0x20, r1	; 32
	//Set data frame format: asynchronous mode,no parity, 1 stop bit, 8 bit size
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|
 380:	86 e8       	ldi	r24, 0x86	; 134
 382:	80 bd       	out	0x20, r24	; 32
		(0<<USBS)|(0<<UCSZ2)|(1<<UCSZ1)|(1<<UCSZ0);	
	//Enable Transmitter and Receiver and Interrupt on receive complete
	UCSRB=(1<<TXEN);
 384:	88 e0       	ldi	r24, 0x08	; 8
 386:	8a b9       	out	0x0a, r24	; 10
}
 388:	08 95       	ret

0000038a <USART_vSendByte>:
void USART_vSendByte(uint8_t u8Data)
{
    // Wait if a byte is being transmitted
    while((UCSRA&(1<<UDRE)) == 0);
 38a:	5d 9b       	sbis	0x0b, 5	; 11
 38c:	fe cf       	rjmp	.-4      	; 0x38a <USART_vSendByte>
    // Transmit data
    UDR = u8Data; 
 38e:	8c b9       	out	0x0c, r24	; 12
}
 390:	08 95       	ret

00000392 <Send_Packet>:
void Send_Packet(uint8_t addr, uint8_t cmd)
{
 392:	0f 93       	push	r16
 394:	1f 93       	push	r17
 396:	18 2f       	mov	r17, r24
 398:	06 2f       	mov	r16, r22
	USART_vSendByte(SYNC);//send synchro byte	
 39a:	8a ea       	ldi	r24, 0xAA	; 170
 39c:	0e 94 c5 01 	call	0x38a	; 0x38a <USART_vSendByte>
	USART_vSendByte(addr);//send receiver address
 3a0:	81 2f       	mov	r24, r17
 3a2:	0e 94 c5 01 	call	0x38a	; 0x38a <USART_vSendByte>
	USART_vSendByte(cmd);//send increment command
 3a6:	80 2f       	mov	r24, r16
 3a8:	0e 94 c5 01 	call	0x38a	; 0x38a <USART_vSendByte>
	USART_vSendByte((addr+cmd));//send checksum
 3ac:	80 2f       	mov	r24, r16
 3ae:	81 0f       	add	r24, r17
 3b0:	0e 94 c5 01 	call	0x38a	; 0x38a <USART_vSendByte>
}
 3b4:	1f 91       	pop	r17
 3b6:	0f 91       	pop	r16
 3b8:	08 95       	ret

000003ba <delayms>:
void delayms(uint8_t t)//delay in ms
{
	uint8_t i;
	for(i=0;i<t;i++)
 3ba:	88 23       	and	r24, r24
 3bc:	51 f0       	breq	.+20     	; 0x3d2 <delayms+0x18>
 3be:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c0:	e9 ef       	ldi	r30, 0xF9	; 249
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	31 97       	sbiw	r30, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <delayms+0xa>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <delayms+0x10>
 3ca:	00 00       	nop
 3cc:	9f 5f       	subi	r25, 0xFF	; 255
 3ce:	98 17       	cp	r25, r24
 3d0:	b8 f3       	brcs	.-18     	; 0x3c0 <delayms+0x6>
 3d2:	08 95       	ret

000003d4 <Peek_A_Boo>:

	DataDir_MrLCDsCrib = 0xFF; //0xFF means 0b11111111
}
void Peek_A_Boo()
{
	MrLCDsControl |= 1<<LightSwitch;
 3d4:	95 9a       	sbi	0x12, 5	; 18
	asm volatile ("nop");
 3d6:	00 00       	nop
	asm volatile ("nop");
 3d8:	00 00       	nop
	MrLCDsControl &= ~1<<LightSwitch;
 3da:	82 b3       	in	r24, 0x12	; 18
 3dc:	80 7c       	andi	r24, 0xC0	; 192
 3de:	82 bb       	out	0x12, r24	; 18
}
 3e0:	08 95       	ret

000003e2 <Check_IF_MrLCD_isBusy>:
	}
}

void Check_IF_MrLCD_isBusy()
{
	DataDir_MrLCDsCrib = 0;
 3e2:	17 ba       	out	0x17, r1	; 23
	MrLCDsControl |= 1<<ReadWrite;
 3e4:	97 9a       	sbi	0x12, 7	; 18
	MrLCDsControl &= ~1<<BiPolarMood;
 3e6:	82 b3       	in	r24, 0x12	; 18
 3e8:	88 7f       	andi	r24, 0xF8	; 248
 3ea:	82 bb       	out	0x12, r24	; 18

	while (MrLCDsCrib >= 0x80)
 3ec:	c7 9b       	sbis	0x18, 7	; 24
 3ee:	04 c0       	rjmp	.+8      	; 0x3f8 <Check_IF_MrLCD_isBusy+0x16>
	{
	Peek_A_Boo();
 3f0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <Peek_A_Boo>
{
	DataDir_MrLCDsCrib = 0;
	MrLCDsControl |= 1<<ReadWrite;
	MrLCDsControl &= ~1<<BiPolarMood;

	while (MrLCDsCrib >= 0x80)
 3f4:	c7 99       	sbic	0x18, 7	; 24
 3f6:	fc cf       	rjmp	.-8      	; 0x3f0 <Check_IF_MrLCD_isBusy+0xe>
	{
	Peek_A_Boo();
	}

	DataDir_MrLCDsCrib = 0xFF; //0xFF means 0b11111111
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	87 bb       	out	0x17, r24	; 23
}
 3fc:	08 95       	ret

000003fe <Send_A_Command>:
	asm volatile ("nop");
	MrLCDsControl &= ~1<<LightSwitch;
}

void Send_A_Command(unsigned char command)
{
 3fe:	1f 93       	push	r17
 400:	18 2f       	mov	r17, r24
	Check_IF_MrLCD_isBusy();
 402:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <Check_IF_MrLCD_isBusy>
	MrLCDsCrib = command;
 406:	18 bb       	out	0x18, r17	; 24
	MrLCDsControl &= ~ ((1<<ReadWrite)|(1<<BiPolarMood));
 408:	82 b3       	in	r24, 0x12	; 18
 40a:	8b 77       	andi	r24, 0x7B	; 123
 40c:	82 bb       	out	0x12, r24	; 18
	Peek_A_Boo();
 40e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <Peek_A_Boo>
	MrLCDsCrib = 0;
 412:	18 ba       	out	0x18, r1	; 24
}
 414:	1f 91       	pop	r17
 416:	08 95       	ret

00000418 <cls>:
	Send_A_Command(0x80 + firstColumnPosition[y] + x);
}

void cls()
{
	Send_A_Command(0x01); //Clear Screen 0x01 = 00000001
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <Send_A_Command>
 41e:	83 ef       	ldi	r24, 0xF3	; 243
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <cls+0xa>
 426:	00 c0       	rjmp	.+0      	; 0x428 <cls+0x10>
 428:	00 00       	nop
	_delay_ms(2);
}
 42a:	08 95       	ret

0000042c <GotoLocation>:
uint16_t address_1 = 0x00;
uint16_t data_1 = 0x00;

void GotoLocation(uint8_t x, uint8_t y)
{
	Send_A_Command(0x80 + firstColumnPosition[y] + x);
 42c:	80 58       	subi	r24, 0x80	; 128
 42e:	e6 2f       	mov	r30, r22
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	e8 58       	subi	r30, 0x88	; 136
 434:	ff 4f       	sbci	r31, 0xFF	; 255
 436:	90 81       	ld	r25, Z
 438:	89 0f       	add	r24, r25
 43a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <Send_A_Command>
}
 43e:	08 95       	ret

00000440 <Send_A_Character>:
	Peek_A_Boo();
	MrLCDsCrib = 0;
}

void Send_A_Character(unsigned char character)
{
 440:	1f 93       	push	r17
 442:	18 2f       	mov	r17, r24
	Check_IF_MrLCD_isBusy();
 444:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <Check_IF_MrLCD_isBusy>
	MrLCDsCrib = character;
 448:	18 bb       	out	0x18, r17	; 24
	MrLCDsControl &= ~ (1<<ReadWrite);
 44a:	97 98       	cbi	0x12, 7	; 18
	MrLCDsControl |= 1<<BiPolarMood;
 44c:	92 9a       	sbi	0x12, 2	; 18
	Peek_A_Boo();
 44e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <Peek_A_Boo>
	MrLCDsCrib = 0;
 452:	18 ba       	out	0x18, r1	; 24
}
 454:	1f 91       	pop	r17
 456:	08 95       	ret

00000458 <Send_A_String>:

void Send_A_String(char *StringOfCharacters)
{
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	ec 01       	movw	r28, r24
	while(*StringOfCharacters > 0)
 45e:	88 81       	ld	r24, Y
 460:	88 23       	and	r24, r24
 462:	31 f0       	breq	.+12     	; 0x470 <__stack+0x11>
	MrLCDsControl |= 1<<BiPolarMood;
	Peek_A_Boo();
	MrLCDsCrib = 0;
}

void Send_A_String(char *StringOfCharacters)
 464:	21 96       	adiw	r28, 0x01	; 1
{
	while(*StringOfCharacters > 0)
	{
		Send_A_Character(*StringOfCharacters++);
 466:	0e 94 20 02 	call	0x440	; 0x440 <Send_A_Character>
	MrLCDsCrib = 0;
}

void Send_A_String(char *StringOfCharacters)
{
	while(*StringOfCharacters > 0)
 46a:	89 91       	ld	r24, Y+
 46c:	88 23       	and	r24, r24
 46e:	d9 f7       	brne	.-10     	; 0x466 <__stack+0x7>
	{
		Send_A_Character(*StringOfCharacters++);
	}
}
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	08 95       	ret

00000476 <ScanButton5>:
}



void ScanButton5()
{
 476:	af 92       	push	r10
 478:	bf 92       	push	r11
 47a:	cf 92       	push	r12
 47c:	df 92       	push	r13
 47e:	ef 92       	push	r14
 480:	ff 92       	push	r15
 482:	0f 93       	push	r16
 484:	1f 93       	push	r17
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
	if(bit_is_clear(PINA, 5))
 48a:	cd 99       	sbic	0x19, 5	; 25
 48c:	14 c0       	rjmp	.+40     	; 0x4b6 <ScanButton5+0x40>
	{
		if(pressed5 >= 1000)
 48e:	80 91 84 00 	lds	r24, 0x0084
 492:	90 91 85 00 	lds	r25, 0x0085
 496:	23 e0       	ldi	r18, 0x03	; 3
 498:	88 3e       	cpi	r24, 0xE8	; 232
 49a:	92 07       	cpc	r25, r18
 49c:	3c f0       	brlt	.+14     	; 0x4ac <ScanButton5+0x36>
		{
			pressed5 = 500;
 49e:	84 ef       	ldi	r24, 0xF4	; 244
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	90 93 85 00 	sts	0x0085, r25
 4a6:	80 93 84 00 	sts	0x0084, r24
 4aa:	0e c0       	rjmp	.+28     	; 0x4c8 <ScanButton5+0x52>
		}
		else
		{
			pressed5++;
 4ac:	01 96       	adiw	r24, 0x01	; 1
 4ae:	90 93 85 00 	sts	0x0085, r25
 4b2:	80 93 84 00 	sts	0x0084, r24
			on5 = 0;
		}
	}		
	*/
		
	if(pressed5 >= 400)
 4b6:	80 91 84 00 	lds	r24, 0x0084
 4ba:	90 91 85 00 	lds	r25, 0x0085
 4be:	21 e0       	ldi	r18, 0x01	; 1
 4c0:	80 39       	cpi	r24, 0x90	; 144
 4c2:	92 07       	cpc	r25, r18
 4c4:	0c f4       	brge	.+2      	; 0x4c8 <ScanButton5+0x52>
 4c6:	62 c0       	rjmp	.+196    	; 0x58c <ScanButton5+0x116>
	{
		if(bit_is_clear(PINA,5))
 4c8:	cd 99       	sbic	0x19, 5	; 25
 4ca:	5c c0       	rjmp	.+184    	; 0x584 <ScanButton5+0x10e>
		{
			//Do Nothing
			if( on5 == 0 || on5 == 1 )
 4cc:	80 91 8e 00 	lds	r24, 0x008E
 4d0:	90 91 8f 00 	lds	r25, 0x008F
 4d4:	82 30       	cpi	r24, 0x02	; 2
 4d6:	91 05       	cpc	r25, r1
 4d8:	08 f0       	brcs	.+2      	; 0x4dc <ScanButton5+0x66>
 4da:	58 c0       	rjmp	.+176    	; 0x58c <ScanButton5+0x116>
 4dc:	aa 24       	eor	r10, r10
 4de:	bb 24       	eor	r11, r11
							Send_Packet(address_1, data_1);
						}							
						plusData();
						Send_A_Character('|');
						
						if(p % 10 == 0)
 4e0:	0f 2e       	mov	r0, r31
 4e2:	fa e0       	ldi	r31, 0x0A	; 10
 4e4:	ef 2e       	mov	r14, r31
 4e6:	ff 24       	eor	r15, r15
 4e8:	f0 2d       	mov	r31, r0
	if(pressed5 >= 400)
	{
		if(bit_is_clear(PINA,5))
		{
			//Do Nothing
			if( on5 == 0 || on5 == 1 )
 4ea:	0f 2e       	mov	r0, r31
 4ec:	f3 e0       	ldi	r31, 0x03	; 3
 4ee:	cf 2e       	mov	r12, r31
 4f0:	dd 24       	eor	r13, r13
 4f2:	f0 2d       	mov	r31, r0
			{
				for(int k=0;k<256;k++)//256 = 0xff => 16*16
				{
					//Send_Packet(RADDR, LEDON4);
					data_1 = 0x00;
 4f4:	10 92 93 00 	sts	0x0093, r1
 4f8:	10 92 92 00 	sts	0x0092, r1
					for(int p=0;p<270;p++)//256 = 0xff => 16*16
 4fc:	00 e0       	ldi	r16, 0x00	; 0
 4fe:	10 e0       	ldi	r17, 0x00	; 0
 500:	1f c0       	rjmp	.+62     	; 0x540 <ScanButton5+0xca>
					{
						for(int e=0;e<3;e++)
						{
							Send_Packet(address_1, data_1);
 502:	60 91 92 00 	lds	r22, 0x0092
 506:	70 91 93 00 	lds	r23, 0x0093
 50a:	80 91 90 00 	lds	r24, 0x0090
 50e:	90 91 91 00 	lds	r25, 0x0091
 512:	0e 94 c9 01 	call	0x392	; 0x392 <Send_Packet>
 516:	21 97       	sbiw	r28, 0x01	; 1
				{
					//Send_Packet(RADDR, LEDON4);
					data_1 = 0x00;
					for(int p=0;p<270;p++)//256 = 0xff => 16*16
					{
						for(int e=0;e<3;e++)
 518:	a1 f7       	brne	.-24     	; 0x502 <ScanButton5+0x8c>
						{
							Send_Packet(address_1, data_1);
						}							
						plusData();
 51a:	0e 94 53 00 	call	0xa6	; 0xa6 <plusData>
						Send_A_Character('|');
 51e:	8c e7       	ldi	r24, 0x7C	; 124
 520:	0e 94 20 02 	call	0x440	; 0x440 <Send_A_Character>
						
						if(p % 10 == 0)
 524:	c8 01       	movw	r24, r16
 526:	b7 01       	movw	r22, r14
 528:	0e 94 21 03 	call	0x642	; 0x642 <__divmodhi4>
 52c:	00 97       	sbiw	r24, 0x00	; 0
 52e:	11 f4       	brne	.+4      	; 0x534 <ScanButton5+0xbe>
						{
							cls();
 530:	0e 94 0c 02 	call	0x418	; 0x418 <cls>
			{
				for(int k=0;k<256;k++)//256 = 0xff => 16*16
				{
					//Send_Packet(RADDR, LEDON4);
					data_1 = 0x00;
					for(int p=0;p<270;p++)//256 = 0xff => 16*16
 534:	0f 5f       	subi	r16, 0xFF	; 255
 536:	1f 4f       	sbci	r17, 0xFF	; 255
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	0e 30       	cpi	r16, 0x0E	; 14
 53c:	18 07       	cpc	r17, r24
 53e:	11 f0       	breq	.+4      	; 0x544 <ScanButton5+0xce>
	if(pressed5 >= 400)
	{
		if(bit_is_clear(PINA,5))
		{
			//Do Nothing
			if( on5 == 0 || on5 == 1 )
 540:	e6 01       	movw	r28, r12
 542:	df cf       	rjmp	.-66     	; 0x502 <ScanButton5+0x8c>
							cls();
						}
						
					}
					//plusAddress();
					Send_A_Character('|');
 544:	8c e7       	ldi	r24, 0x7C	; 124
 546:	0e 94 20 02 	call	0x440	; 0x440 <Send_A_Character>
					if(k % 10 == 0)
 54a:	c5 01       	movw	r24, r10
 54c:	b7 01       	movw	r22, r14
 54e:	0e 94 21 03 	call	0x642	; 0x642 <__divmodhi4>
 552:	00 97       	sbiw	r24, 0x00	; 0
 554:	11 f4       	brne	.+4      	; 0x55a <ScanButton5+0xe4>
					{
						cls();
 556:	0e 94 0c 02 	call	0x418	; 0x418 <cls>
		if(bit_is_clear(PINA,5))
		{
			//Do Nothing
			if( on5 == 0 || on5 == 1 )
			{
				for(int k=0;k<256;k++)//256 = 0xff => 16*16
 55a:	08 94       	sec
 55c:	a1 1c       	adc	r10, r1
 55e:	b1 1c       	adc	r11, r1
 560:	20 e0       	ldi	r18, 0x00	; 0
 562:	a2 16       	cp	r10, r18
 564:	21 e0       	ldi	r18, 0x01	; 1
 566:	b2 06       	cpc	r11, r18
 568:	29 f6       	brne	.-118    	; 0x4f4 <ScanButton5+0x7e>
					{
						cls();
					}
				}
				
				cls();
 56a:	0e 94 0c 02 	call	0x418	; 0x418 <cls>
				Send_A_String("Complete ...");
 56e:	80 e6       	ldi	r24, 0x60	; 96
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0e 94 2c 02 	call	0x458	; 0x458 <Send_A_String>
				on5 = 1;
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	90 93 8f 00 	sts	0x008F, r25
 57e:	80 93 8e 00 	sts	0x008E, r24
 582:	04 c0       	rjmp	.+8      	; 0x58c <ScanButton5+0x116>
				}
				on5 = 0;
			}
			*/
			
			pressed5 = 0;					
 584:	10 92 85 00 	sts	0x0085, r1
 588:	10 92 84 00 	sts	0x0084, r1
		}
	}
	
}
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	1f 91       	pop	r17
 592:	0f 91       	pop	r16
 594:	ff 90       	pop	r15
 596:	ef 90       	pop	r14
 598:	df 90       	pop	r13
 59a:	cf 90       	pop	r12
 59c:	bf 90       	pop	r11
 59e:	af 90       	pop	r10
 5a0:	08 95       	ret

000005a2 <main>:



int main(void)
{
	DataDir_MrLCDsControl |= 1<<LightSwitch | 1<<ReadWrite | 1<<BiPolarMood;
 5a2:	81 b3       	in	r24, 0x11	; 17
 5a4:	84 6a       	ori	r24, 0xA4	; 164
 5a6:	81 bb       	out	0x11, r24	; 17
 5a8:	85 ea       	ldi	r24, 0xA5	; 165
 5aa:	9e e0       	ldi	r25, 0x0E	; 14
 5ac:	01 97       	sbiw	r24, 0x01	; 1
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <main+0xa>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <main+0x10>
 5b2:	00 00       	nop
	_delay_ms(15);

	Send_A_Command(0x01); //Clear Screen 0x01 = 00000001
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <Send_A_Command>
 5ba:	a3 ef       	ldi	r26, 0xF3	; 243
 5bc:	b1 e0       	ldi	r27, 0x01	; 1
 5be:	11 97       	sbiw	r26, 0x01	; 1
 5c0:	f1 f7       	brne	.-4      	; 0x5be <main+0x1c>
 5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <main+0x22>
 5c4:	00 00       	nop
	_delay_ms(2);
	Send_A_Command(0x38);
 5c6:	88 e3       	ldi	r24, 0x38	; 56
 5c8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <Send_A_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5cc:	b0 e1       	ldi	r27, 0x10	; 16
 5ce:	ba 95       	dec	r27
 5d0:	f1 f7       	brne	.-4      	; 0x5ce <main+0x2c>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <main+0x32>
	_delay_us(50);
	Send_A_Command(0b00001110);
 5d4:	8e e0       	ldi	r24, 0x0E	; 14
 5d6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <Send_A_Command>
 5da:	80 e1       	ldi	r24, 0x10	; 16
 5dc:	8a 95       	dec	r24
 5de:	f1 f7       	brne	.-4      	; 0x5dc <main+0x3a>
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <main+0x40>
	_delay_us(50);
	
	USART_Init();
 5e2:	0e 94 bd 01 	call	0x37a	; 0x37a <USART_Init>
	
	DDRA |= 1 << SIGN;//on the turning microcontroller on
 5e6:	d0 9a       	sbi	0x1a, 0	; 26
	
	
	DDRA &= ~(1 << FIRST);
 5e8:	d1 98       	cbi	0x1a, 1	; 26
	DDRA &= ~(1 << SECOND);
 5ea:	d2 98       	cbi	0x1a, 2	; 26
	DDRA &= ~(1 << THIRD);
 5ec:	d3 98       	cbi	0x1a, 3	; 26
	DDRA &= ~(1 << FOURTH);
 5ee:	d4 98       	cbi	0x1a, 4	; 26
	DDRA &= ~(1 << FIFTH);
 5f0:	d5 98       	cbi	0x1a, 5	; 26
	
	PORTA |= 1 << FIRST;
 5f2:	d9 9a       	sbi	0x1b, 1	; 27
	PORTA |= 1 << SECOND;
 5f4:	da 9a       	sbi	0x1b, 2	; 27
	PORTA |= 1 << THIRD;
 5f6:	db 9a       	sbi	0x1b, 3	; 27
	PORTA |= 1 << FOURTH;
 5f8:	dc 9a       	sbi	0x1b, 4	; 27
	PORTA |= 1 << FIFTH;
 5fa:	dd 9a       	sbi	0x1b, 5	; 27
	
	PORTA |= 1 << SIGN;
 5fc:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5fe:	8f e3       	ldi	r24, 0x3F	; 63
 600:	9d e0       	ldi	r25, 0x0D	; 13
 602:	a3 e0       	ldi	r26, 0x03	; 3
 604:	81 50       	subi	r24, 0x01	; 1
 606:	90 40       	sbci	r25, 0x00	; 0
 608:	a0 40       	sbci	r26, 0x00	; 0
 60a:	e1 f7       	brne	.-8      	; 0x604 <main+0x62>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <main+0x6c>
 60e:	00 00       	nop
	_delay_ms(1000);
	PORTA &= ~(1<<SIGN);
 610:	d8 98       	cbi	0x1b, 0	; 27
 612:	8f e3       	ldi	r24, 0x3F	; 63
 614:	9d e0       	ldi	r25, 0x0D	; 13
 616:	a3 e0       	ldi	r26, 0x03	; 3
 618:	81 50       	subi	r24, 0x01	; 1
 61a:	90 40       	sbci	r25, 0x00	; 0
 61c:	a0 40       	sbci	r26, 0x00	; 0
 61e:	e1 f7       	brne	.-8      	; 0x618 <main+0x76>
 620:	00 c0       	rjmp	.+0      	; 0x622 <main+0x80>
 622:	00 00       	nop
	_delay_ms(1000);

	Send_A_String("Let's Hack");
 624:	8d e6       	ldi	r24, 0x6D	; 109
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 2c 02 	call	0x458	; 0x458 <Send_A_String>

	while(1)
	{
		ScanButton1();
 62c:	0e 94 65 01 	call	0x2ca	; 0x2ca <ScanButton1>
		ScanButton2();
 630:	0e 94 0d 01 	call	0x21a	; 0x21a <ScanButton2>
		ScanButton3();
 634:	0e 94 b5 00 	call	0x16a	; 0x16a <ScanButton3>
		ScanButton4();
 638:	0e 94 5d 00 	call	0xba	; 0xba <ScanButton4>
		ScanButton5();
 63c:	0e 94 3b 02 	call	0x476	; 0x476 <ScanButton5>
 640:	f5 cf       	rjmp	.-22     	; 0x62c <main+0x8a>

00000642 <__divmodhi4>:
 642:	97 fb       	bst	r25, 7
 644:	09 2e       	mov	r0, r25
 646:	07 26       	eor	r0, r23
 648:	0a d0       	rcall	.+20     	; 0x65e <__divmodhi4_neg1>
 64a:	77 fd       	sbrc	r23, 7
 64c:	04 d0       	rcall	.+8      	; 0x656 <__divmodhi4_neg2>
 64e:	0c d0       	rcall	.+24     	; 0x668 <__udivmodhi4>
 650:	06 d0       	rcall	.+12     	; 0x65e <__divmodhi4_neg1>
 652:	00 20       	and	r0, r0
 654:	1a f4       	brpl	.+6      	; 0x65c <__divmodhi4_exit>

00000656 <__divmodhi4_neg2>:
 656:	70 95       	com	r23
 658:	61 95       	neg	r22
 65a:	7f 4f       	sbci	r23, 0xFF	; 255

0000065c <__divmodhi4_exit>:
 65c:	08 95       	ret

0000065e <__divmodhi4_neg1>:
 65e:	f6 f7       	brtc	.-4      	; 0x65c <__divmodhi4_exit>
 660:	90 95       	com	r25
 662:	81 95       	neg	r24
 664:	9f 4f       	sbci	r25, 0xFF	; 255
 666:	08 95       	ret

00000668 <__udivmodhi4>:
 668:	aa 1b       	sub	r26, r26
 66a:	bb 1b       	sub	r27, r27
 66c:	51 e1       	ldi	r21, 0x11	; 17
 66e:	07 c0       	rjmp	.+14     	; 0x67e <__udivmodhi4_ep>

00000670 <__udivmodhi4_loop>:
 670:	aa 1f       	adc	r26, r26
 672:	bb 1f       	adc	r27, r27
 674:	a6 17       	cp	r26, r22
 676:	b7 07       	cpc	r27, r23
 678:	10 f0       	brcs	.+4      	; 0x67e <__udivmodhi4_ep>
 67a:	a6 1b       	sub	r26, r22
 67c:	b7 0b       	sbc	r27, r23

0000067e <__udivmodhi4_ep>:
 67e:	88 1f       	adc	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	5a 95       	dec	r21
 684:	a9 f7       	brne	.-22     	; 0x670 <__udivmodhi4_loop>
 686:	80 95       	com	r24
 688:	90 95       	com	r25
 68a:	bc 01       	movw	r22, r24
 68c:	cd 01       	movw	r24, r26
 68e:	08 95       	ret

00000690 <_exit>:
 690:	f8 94       	cli

00000692 <__stop_program>:
 692:	ff cf       	rjmp	.-2      	; 0x692 <__stop_program>
