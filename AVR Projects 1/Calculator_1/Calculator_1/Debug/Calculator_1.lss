
Calculator_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000002ea  0000037e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800064  00800064  00000382  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000d6  00000000  00000000  00000b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000484  00000000  00000000  00000bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000206  00000000  00000000  00001061  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000549  00000000  00000000  00001267  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000b0  00000000  00000000  000017b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001ba  00000000  00000000  00001860  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001ac  00000000  00000000  00001a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  00001bc6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 28 01 	call	0x250	; 0x250 <main>
  8a:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <cls>:
void CheckLCDBusyOrNot(); 


void cls()
{
	SendACommand(0x01);//clear the screen
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SendACommand>
}
  9a:	08 95       	ret

0000009c <DO>:

void DO()
{
	cls();
  9c:	0e 94 49 00 	call	0x92	; 0x92 <cls>
	SendString(blinkDuration);
  a0:	80 91 66 00 	lds	r24, 0x0066
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 19 01 	call	0x232	; 0x232 <SendString>
}
  aa:	08 95       	ret

000000ac <KeypadScan>:


void KeypadScan()
{
	if( KeypadPortValue == 0b11110000 )
  ac:	89 b3       	in	r24, 0x19	; 25
  ae:	80 3f       	cpi	r24, 0xF0	; 240
  b0:	09 f4       	brne	.+2      	; 0xb4 <KeypadScan+0x8>
  b2:	89 c0       	rjmp	.+274    	; 0x1c6 <KeypadScan+0x11a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	83 ed       	ldi	r24, 0xD3	; 211
  b6:	90 e3       	ldi	r25, 0x30	; 48
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <KeypadScan+0xc>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <KeypadScan+0x12>
  be:	00 00       	nop

	_delay_ms(50);
	
	//Scan The Keypad

	uint8_t KeyPressCode = KeypadPortValue;
  c0:	89 b3       	in	r24, 0x19	; 25

	KeypadDirectionRegister ^= 0b11111111;
  c2:	9a b3       	in	r25, 0x1a	; 26
  c4:	90 95       	com	r25
  c6:	9a bb       	out	0x1a, r25	; 26
	KeypadPortControl ^= 0b11111111;
  c8:	9b b3       	in	r25, 0x1b	; 27
  ca:	90 95       	com	r25
  cc:	9b bb       	out	0x1b, r25	; 27
	
	asm volatile("nop");
  ce:	00 00       	nop
	asm volatile("nop");
  d0:	00 00       	nop
	
	KeyPressCode |= KeypadPortValue;
  d2:	99 b3       	in	r25, 0x19	; 25
  d4:	89 2b       	or	r24, r25

	
	switch(KeyPressCode)
  d6:	8e 3b       	cpi	r24, 0xBE	; 190
  d8:	d1 f1       	breq	.+116    	; 0x14e <KeypadScan+0xa2>
  da:	8f 3b       	cpi	r24, 0xBF	; 191
  dc:	b8 f4       	brcc	.+46     	; 0x10c <KeypadScan+0x60>
  de:	8e 37       	cpi	r24, 0x7E	; 126
  e0:	d1 f1       	breq	.+116    	; 0x156 <KeypadScan+0xaa>
  e2:	8f 37       	cpi	r24, 0x7F	; 127
  e4:	50 f4       	brcc	.+20     	; 0xfa <KeypadScan+0x4e>
  e6:	8b 37       	cpi	r24, 0x7B	; 123
  e8:	09 f4       	brne	.+2      	; 0xec <KeypadScan+0x40>
  ea:	55 c0       	rjmp	.+170    	; 0x196 <KeypadScan+0xea>
  ec:	8d 37       	cpi	r24, 0x7D	; 125
  ee:	09 f4       	brne	.+2      	; 0xf2 <KeypadScan+0x46>
  f0:	42 c0       	rjmp	.+132    	; 0x176 <KeypadScan+0xca>
  f2:	87 37       	cpi	r24, 0x77	; 119
  f4:	09 f0       	breq	.+2      	; 0xf8 <KeypadScan+0x4c>
  f6:	63 c0       	rjmp	.+198    	; 0x1be <KeypadScan+0x112>
  f8:	5e c0       	rjmp	.+188    	; 0x1b6 <KeypadScan+0x10a>
  fa:	8b 3b       	cpi	r24, 0xBB	; 187
  fc:	09 f4       	brne	.+2      	; 0x100 <KeypadScan+0x54>
  fe:	47 c0       	rjmp	.+142    	; 0x18e <KeypadScan+0xe2>
 100:	8d 3b       	cpi	r24, 0xBD	; 189
 102:	a9 f1       	breq	.+106    	; 0x16e <KeypadScan+0xc2>
 104:	87 3b       	cpi	r24, 0xB7	; 183
 106:	09 f0       	breq	.+2      	; 0x10a <KeypadScan+0x5e>
 108:	5a c0       	rjmp	.+180    	; 0x1be <KeypadScan+0x112>
 10a:	51 c0       	rjmp	.+162    	; 0x1ae <KeypadScan+0x102>
 10c:	8e 3d       	cpi	r24, 0xDE	; 222
 10e:	d9 f0       	breq	.+54     	; 0x146 <KeypadScan+0x9a>
 110:	8f 3d       	cpi	r24, 0xDF	; 223
 112:	40 f4       	brcc	.+16     	; 0x124 <KeypadScan+0x78>
 114:	8b 3d       	cpi	r24, 0xDB	; 219
 116:	b9 f1       	breq	.+110    	; 0x186 <KeypadScan+0xda>
 118:	8d 3d       	cpi	r24, 0xDD	; 221
 11a:	29 f1       	breq	.+74     	; 0x166 <KeypadScan+0xba>
 11c:	87 3d       	cpi	r24, 0xD7	; 215
 11e:	09 f0       	breq	.+2      	; 0x122 <KeypadScan+0x76>
 120:	4e c0       	rjmp	.+156    	; 0x1be <KeypadScan+0x112>
 122:	41 c0       	rjmp	.+130    	; 0x1a6 <KeypadScan+0xfa>
 124:	8b 3e       	cpi	r24, 0xEB	; 235
 126:	59 f1       	breq	.+86     	; 0x17e <KeypadScan+0xd2>
 128:	8c 3e       	cpi	r24, 0xEC	; 236
 12a:	20 f4       	brcc	.+8      	; 0x134 <KeypadScan+0x88>
 12c:	87 3e       	cpi	r24, 0xE7	; 231
 12e:	09 f0       	breq	.+2      	; 0x132 <KeypadScan+0x86>
 130:	46 c0       	rjmp	.+140    	; 0x1be <KeypadScan+0x112>
 132:	35 c0       	rjmp	.+106    	; 0x19e <KeypadScan+0xf2>
 134:	8d 3e       	cpi	r24, 0xED	; 237
 136:	99 f0       	breq	.+38     	; 0x15e <KeypadScan+0xb2>
 138:	8e 3e       	cpi	r24, 0xEE	; 238
 13a:	09 f0       	breq	.+2      	; 0x13e <KeypadScan+0x92>
 13c:	40 c0       	rjmp	.+128    	; 0x1be <KeypadScan+0x112>
	{
		case 0b11101110 :
			blinkDuration = 1;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 66 00 	sts	0x0066, r24
			break;
 144:	3e c0       	rjmp	.+124    	; 0x1c2 <KeypadScan+0x116>
		case 0b11011110 :
			blinkDuration = 2;
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	80 93 66 00 	sts	0x0066, r24
			break;
 14c:	3a c0       	rjmp	.+116    	; 0x1c2 <KeypadScan+0x116>
		case 0b10111110 :
			blinkDuration = 3;
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	80 93 66 00 	sts	0x0066, r24
			break;
 154:	36 c0       	rjmp	.+108    	; 0x1c2 <KeypadScan+0x116>
		case 0b01111110 :
			blinkDuration = 4;
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	80 93 66 00 	sts	0x0066, r24
			break;
 15c:	32 c0       	rjmp	.+100    	; 0x1c2 <KeypadScan+0x116>
		case 0b11101101 :
			blinkDuration = 5;
 15e:	85 e0       	ldi	r24, 0x05	; 5
 160:	80 93 66 00 	sts	0x0066, r24
			break;
 164:	2e c0       	rjmp	.+92     	; 0x1c2 <KeypadScan+0x116>
		case 0b11011101 :
			blinkDuration = 6;
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	80 93 66 00 	sts	0x0066, r24
			break;
 16c:	2a c0       	rjmp	.+84     	; 0x1c2 <KeypadScan+0x116>
		case 0b10111101 :
			blinkDuration = 7;
 16e:	87 e0       	ldi	r24, 0x07	; 7
 170:	80 93 66 00 	sts	0x0066, r24
			break;
 174:	26 c0       	rjmp	.+76     	; 0x1c2 <KeypadScan+0x116>
		case 0b01111101 :
			blinkDuration = 8;
 176:	88 e0       	ldi	r24, 0x08	; 8
 178:	80 93 66 00 	sts	0x0066, r24
			break;
 17c:	22 c0       	rjmp	.+68     	; 0x1c2 <KeypadScan+0x116>
		case 0b11101011 :
			blinkDuration = 9;
 17e:	89 e0       	ldi	r24, 0x09	; 9
 180:	80 93 66 00 	sts	0x0066, r24
			break;
 184:	1e c0       	rjmp	.+60     	; 0x1c2 <KeypadScan+0x116>
		case 0b11011011 :
			blinkDuration = 10;
 186:	8a e0       	ldi	r24, 0x0A	; 10
 188:	80 93 66 00 	sts	0x0066, r24
			break;
 18c:	1a c0       	rjmp	.+52     	; 0x1c2 <KeypadScan+0x116>
		case 0b10111011 :
			blinkDuration = 11;
 18e:	8b e0       	ldi	r24, 0x0B	; 11
 190:	80 93 66 00 	sts	0x0066, r24
			break;
 194:	16 c0       	rjmp	.+44     	; 0x1c2 <KeypadScan+0x116>
		case 0b01111011 :
			blinkDuration = 12;
 196:	8c e0       	ldi	r24, 0x0C	; 12
 198:	80 93 66 00 	sts	0x0066, r24
			break;
 19c:	12 c0       	rjmp	.+36     	; 0x1c2 <KeypadScan+0x116>
		case 0b11100111 :
			blinkDuration = 13;
 19e:	8d e0       	ldi	r24, 0x0D	; 13
 1a0:	80 93 66 00 	sts	0x0066, r24
			break;
 1a4:	0e c0       	rjmp	.+28     	; 0x1c2 <KeypadScan+0x116>
		case 0b11010111 :
			blinkDuration = 14;
 1a6:	8e e0       	ldi	r24, 0x0E	; 14
 1a8:	80 93 66 00 	sts	0x0066, r24
			break;
 1ac:	0a c0       	rjmp	.+20     	; 0x1c2 <KeypadScan+0x116>
		case 0b10110111 :
			blinkDuration = 15;
 1ae:	8f e0       	ldi	r24, 0x0F	; 15
 1b0:	80 93 66 00 	sts	0x0066, r24
			break;
 1b4:	06 c0       	rjmp	.+12     	; 0x1c2 <KeypadScan+0x116>
		case 0b01110111 :
			blinkDuration = 16;
 1b6:	80 e1       	ldi	r24, 0x10	; 16
 1b8:	80 93 66 00 	sts	0x0066, r24
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <KeypadScan+0x116>
			break;

	}
	
	
	if(KeyPressCode < 0b11111111 )
 1be:	8f 3f       	cpi	r24, 0xFF	; 255
 1c0:	11 f0       	breq	.+4      	; 0x1c6 <KeypadScan+0x11a>
			_delay_ms(100);
			PORTB ^= 1 << PINB0;//LED PORT
			_delay_ms(100);
		}
		*/
		DO();
 1c2:	0e 94 4e 00 	call	0x9c	; 0x9c <DO>
 1c6:	08 95       	ret

000001c8 <PeekABoo>:
	LCDDataDirection = 0xff; // mean 0b11111111;
}

void PeekABoo()
{
	LCDControlPort |= 1 << LightSwitch;
 1c8:	95 9a       	sbi	0x12, 5	; 18
	asm volatile("nop");
 1ca:	00 00       	nop
	asm volatile("nop");
 1cc:	00 00       	nop
	asm volatile("nop");
 1ce:	00 00       	nop
	LCDControlPort &= ~ (1 << LightSwitch);
 1d0:	95 98       	cbi	0x12, 5	; 18
}
 1d2:	08 95       	ret

000001d4 <CheckLCDBusyOrNot>:
	}
}
*/
void CheckLCDBusyOrNot()
{
	LCDDataDirection = 0;
 1d4:	14 ba       	out	0x14, r1	; 20
	
	
	LCDControlPort |= 1 << ReadWrite;
 1d6:	97 9a       	sbi	0x12, 7	; 18
	LCDControlPort &= ~ (1 << BiPolarMood);
 1d8:	92 98       	cbi	0x12, 2	; 18
	
	while(LCDPort >= 0x80 ) // D7 PORTB PIN7 is 1 or 0 // 0b10000000 == 0x80
 1da:	af 9b       	sbis	0x15, 7	; 21
 1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <CheckLCDBusyOrNot+0x12>
	{
		PeekABoo();
 1de:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <PeekABoo>
	
	
	LCDControlPort |= 1 << ReadWrite;
	LCDControlPort &= ~ (1 << BiPolarMood);
	
	while(LCDPort >= 0x80 ) // D7 PORTB PIN7 is 1 or 0 // 0b10000000 == 0x80
 1e2:	af 99       	sbic	0x15, 7	; 21
 1e4:	fc cf       	rjmp	.-8      	; 0x1de <CheckLCDBusyOrNot+0xa>
	{
		PeekABoo();
	}
	
	LCDDataDirection = 0xff; // mean 0b11111111;
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	84 bb       	out	0x14, r24	; 20
}
 1ea:	08 95       	ret

000001ec <SendACommand>:
	asm volatile("nop");
	LCDControlPort &= ~ (1 << LightSwitch);
}

void SendACommand(unsigned char command)
{
 1ec:	1f 93       	push	r17
 1ee:	18 2f       	mov	r17, r24
	CheckLCDBusyOrNot();
 1f0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <CheckLCDBusyOrNot>
	
	LCDPort = command;
 1f4:	15 bb       	out	0x15, r17	; 21
	
	LCDControlPort &=  ~( (1 << ReadWrite) | (1 << BiPolarMood) );
 1f6:	82 b3       	in	r24, 0x12	; 18
 1f8:	8b 77       	andi	r24, 0x7B	; 123
 1fa:	82 bb       	out	0x12, r24	; 18
	
	PeekABoo();
 1fc:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <PeekABoo>
	LCDPort = 0;
 200:	15 ba       	out	0x15, r1	; 21
}
 202:	1f 91       	pop	r17
 204:	08 95       	ret

00000206 <GotoLocation>:

void GotoLocation(uint8_t x, uint8_t y)
{
	SendACommand(0x80 + firstColumnPosition[y] + x);
 206:	80 58       	subi	r24, 0x80	; 128
 208:	e6 2f       	mov	r30, r22
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	e0 5a       	subi	r30, 0xA0	; 160
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	90 81       	ld	r25, Z
 212:	89 0f       	add	r24, r25
 214:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SendACommand>
}
 218:	08 95       	ret

0000021a <SendACharacter>:


void SendACharacter(unsigned char character)
{
 21a:	1f 93       	push	r17
 21c:	18 2f       	mov	r17, r24
	CheckLCDBusyOrNot();
 21e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <CheckLCDBusyOrNot>
	
	LCDPort = character;
 222:	15 bb       	out	0x15, r17	; 21
	
	LCDControlPort &=  ~(1 << ReadWrite);
 224:	97 98       	cbi	0x12, 7	; 18
	LCDControlPort |= 1 << BiPolarMood;
 226:	92 9a       	sbi	0x12, 2	; 18
	
	PeekABoo();
 228:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <PeekABoo>
	LCDPort = 0;
 22c:	15 ba       	out	0x15, r1	; 21
}
 22e:	1f 91       	pop	r17
 230:	08 95       	ret

00000232 <SendString>:

void SendString(char *Str)
{
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	ec 01       	movw	r28, r24
	while(*Str > 0)
 238:	88 81       	ld	r24, Y
 23a:	88 23       	and	r24, r24
 23c:	31 f0       	breq	.+12     	; 0x24a <SendString+0x18>
	
	PeekABoo();
	LCDPort = 0;
}

void SendString(char *Str)
 23e:	21 96       	adiw	r28, 0x01	; 1
{
	while(*Str > 0)
	{
		SendACharacter(*Str++);
 240:	0e 94 0d 01 	call	0x21a	; 0x21a <SendACharacter>
	LCDPort = 0;
}

void SendString(char *Str)
{
	while(*Str > 0)
 244:	89 91       	ld	r24, Y+
 246:	88 23       	and	r24, r24
 248:	d9 f7       	brne	.-10     	; 0x240 <SendString+0xe>
	{
		SendACharacter(*Str++);
	}
}
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <main>:
	//DDRB |= 1 << PINB0;
	//DDRB &= ~(1 << PINB1);
	
	//PORTB |= 1 << PINB1;
	
	LCDControlDataDirection |= (1 << LightSwitch) | (1 << ReadWrite) | (1 << BiPolarMood);
 250:	81 b3       	in	r24, 0x11	; 17
 252:	84 6a       	ori	r24, 0xA4	; 164
 254:	81 bb       	out	0x11, r24	; 17
 256:	85 ea       	ldi	r24, 0xA5	; 165
 258:	9e e0       	ldi	r25, 0x0E	; 14
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <main+0xa>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x10>
 260:	00 00       	nop
	
	_delay_ms(15);
	SendACommand(0x01);//clear the screen
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SendACommand>
 268:	83 ef       	ldi	r24, 0xF3	; 243
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <main+0x1c>
 270:	00 c0       	rjmp	.+0      	; 0x272 <main+0x22>
 272:	00 00       	nop
	_delay_ms(2);
	SendACommand(0x38);
 274:	88 e3       	ldi	r24, 0x38	; 56
 276:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SendACommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27a:	90 e1       	ldi	r25, 0x10	; 16
 27c:	9a 95       	dec	r25
 27e:	f1 f7       	brne	.-4      	; 0x27c <main+0x2c>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0x32>
	_delay_us(50);//MicroSeconds
	SendACommand(0b00000000);
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SendACommand>
 288:	80 e1       	ldi	r24, 0x10	; 16
 28a:	8a 95       	dec	r24
 28c:	f1 f7       	brne	.-4      	; 0x28a <main+0x3a>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <main+0x40>
	
	//SendACharacter(0x4E);
	//SendACharacter(0x4E);
	
	
	SendACharacter(0x4E); //N
 290:	8e e4       	ldi	r24, 0x4E	; 78
 292:	0e 94 0d 01 	call	0x21a	; 0x21a <SendACharacter>
	SendACharacter(0x65); //e
 296:	85 e6       	ldi	r24, 0x65	; 101
 298:	0e 94 0d 01 	call	0x21a	; 0x21a <SendACharacter>
	SendACharacter(0x77); //w
 29c:	87 e7       	ldi	r24, 0x77	; 119
 29e:	0e 94 0d 01 	call	0x21a	; 0x21a <SendACharacter>
	SendACharacter(0x62); //b
 2a2:	82 e6       	ldi	r24, 0x62	; 98
 2a4:	0e 94 0d 01 	call	0x21a	; 0x21a <SendACharacter>
	SendACharacter(0x69); //i
 2a8:	89 e6       	ldi	r24, 0x69	; 105
 2aa:	0e 94 0d 01 	call	0x21a	; 0x21a <SendACharacter>
	SendACharacter(0x65); //e
 2ae:	85 e6       	ldi	r24, 0x65	; 101
 2b0:	0e 94 0d 01 	call	0x21a	; 0x21a <SendACharacter>
	SendACharacter(0x48); //H
 2b4:	88 e4       	ldi	r24, 0x48	; 72
 2b6:	0e 94 0d 01 	call	0x21a	; 0x21a <SendACharacter>
	SendACharacter(0x61); //a
 2ba:	81 e6       	ldi	r24, 0x61	; 97
 2bc:	0e 94 0d 01 	call	0x21a	; 0x21a <SendACharacter>
	SendACharacter(0x63); //c
 2c0:	83 e6       	ldi	r24, 0x63	; 99
 2c2:	0e 94 0d 01 	call	0x21a	; 0x21a <SendACharacter>
	SendACharacter(0x6B); //k
 2c6:	8b e6       	ldi	r24, 0x6B	; 107
 2c8:	0e 94 0d 01 	call	0x21a	; 0x21a <SendACharacter>
	SendACharacter(0x2E); //.
 2cc:	8e e2       	ldi	r24, 0x2E	; 46
 2ce:	0e 94 0d 01 	call	0x21a	; 0x21a <SendACharacter>
	SendACharacter(0x63); //c
 2d2:	83 e6       	ldi	r24, 0x63	; 99
 2d4:	0e 94 0d 01 	call	0x21a	; 0x21a <SendACharacter>
	SendACharacter(0x6F); //o
 2d8:	8f e6       	ldi	r24, 0x6F	; 111
 2da:	0e 94 0d 01 	call	0x21a	; 0x21a <SendACharacter>
	SendACharacter(0x6D); //m
 2de:	8d e6       	ldi	r24, 0x6D	; 109
 2e0:	0e 94 0d 01 	call	0x21a	; 0x21a <SendACharacter>
 2e4:	ff cf       	rjmp	.-2      	; 0x2e4 <main+0x94>

000002e6 <_exit>:
 2e6:	f8 94       	cli

000002e8 <__stop_program>:
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <__stop_program>
