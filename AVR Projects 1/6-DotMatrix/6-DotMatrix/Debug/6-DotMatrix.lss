
6-DotMatrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  000002f2  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000096  00000000  00000000  00000a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000016b  00000000  00000000  00000b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000083  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f5  00000000  00000000  00000cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  000010f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000fb  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000002b  00000000  00000000  0000128b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 37 01 	call	0x26e	; 0x26e <main>
  74:	0c 94 3d 01 	jmp	0x27a	; 0x27a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <turnOnA>:
int pressed = 0;
int counter = 0;

void turnOnA()
{
	PORTB ^= 1 << PINB1;//a
  7c:	98 b3       	in	r25, 0x18	; 24
  7e:	82 e0       	ldi	r24, 0x02	; 2
  80:	89 27       	eor	r24, r25
  82:	88 bb       	out	0x18, r24	; 24
}
  84:	08 95       	ret

00000086 <turnOnB>:

void turnOnB()
{
	PORTB ^= 1 << PINB0;//b
  86:	98 b3       	in	r25, 0x18	; 24
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	89 27       	eor	r24, r25
  8c:	88 bb       	out	0x18, r24	; 24
}
  8e:	08 95       	ret

00000090 <turnOnC>:

void turnOnC()
{
	PORTB ^= 1 << PINB5;//c
  90:	98 b3       	in	r25, 0x18	; 24
  92:	80 e2       	ldi	r24, 0x20	; 32
  94:	89 27       	eor	r24, r25
  96:	88 bb       	out	0x18, r24	; 24
}
  98:	08 95       	ret

0000009a <turnOnD>:

void turnOnD()
{
	PORTB ^= 1 << PINB6;//d
  9a:	98 b3       	in	r25, 0x18	; 24
  9c:	80 e4       	ldi	r24, 0x40	; 64
  9e:	89 27       	eor	r24, r25
  a0:	88 bb       	out	0x18, r24	; 24
}
  a2:	08 95       	ret

000000a4 <turnOnE>:

void turnOnE()
{
	PORTB ^= 1 << PINB7;//e
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	80 58       	subi	r24, 0x80	; 128
  a8:	88 bb       	out	0x18, r24	; 24
}
  aa:	08 95       	ret

000000ac <turnOnF>:

void turnOnF()
{
	PORTB ^= 1 << PINB2;//f
  ac:	98 b3       	in	r25, 0x18	; 24
  ae:	84 e0       	ldi	r24, 0x04	; 4
  b0:	89 27       	eor	r24, r25
  b2:	88 bb       	out	0x18, r24	; 24
}
  b4:	08 95       	ret

000000b6 <turnOnG>:

void turnOnG()
{
	PORTB ^= 1 << PINB3;//g
  b6:	98 b3       	in	r25, 0x18	; 24
  b8:	88 e0       	ldi	r24, 0x08	; 8
  ba:	89 27       	eor	r24, r25
  bc:	88 bb       	out	0x18, r24	; 24
}
  be:	08 95       	ret

000000c0 <ScanButton>:

void ScanButton()
{
	
	
	if(bit_is_clear(PINC, 0))
  c0:	98 99       	sbic	0x13, 0	; 19
  c2:	14 c0       	rjmp	.+40     	; 0xec <ScanButton+0x2c>
	{
		if(pressed >= 1000)
  c4:	80 91 60 00 	lds	r24, 0x0060
  c8:	90 91 61 00 	lds	r25, 0x0061
  cc:	23 e0       	ldi	r18, 0x03	; 3
  ce:	88 3e       	cpi	r24, 0xE8	; 232
  d0:	92 07       	cpc	r25, r18
  d2:	3c f0       	brlt	.+14     	; 0xe2 <ScanButton+0x22>
		{
			pressed = 500;
  d4:	84 ef       	ldi	r24, 0xF4	; 244
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	90 93 61 00 	sts	0x0061, r25
  dc:	80 93 60 00 	sts	0x0060, r24
  e0:	0e c0       	rjmp	.+28     	; 0xfe <ScanButton+0x3e>
		}
		else
		{
			pressed++;
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	90 93 61 00 	sts	0x0061, r25
  e8:	80 93 60 00 	sts	0x0060, r24
		}							
	}	
		
	if(pressed >= 400)
  ec:	80 91 60 00 	lds	r24, 0x0060
  f0:	90 91 61 00 	lds	r25, 0x0061
  f4:	21 e0       	ldi	r18, 0x01	; 1
  f6:	80 39       	cpi	r24, 0x90	; 144
  f8:	92 07       	cpc	r25, r18
  fa:	0c f4       	brge	.+2      	; 0xfe <ScanButton+0x3e>
  fc:	b7 c0       	rjmp	.+366    	; 0x26c <ScanButton+0x1ac>
	{
		if(bit_is_clear(PINC,0))
  fe:	98 9b       	sbis	0x13, 0	; 19
 100:	b5 c0       	rjmp	.+362    	; 0x26c <ScanButton+0x1ac>
		{
			//Do Nothing
		}
		else
		{
			PORTB = 0x00;//set PORTB to 0b00000000;
 102:	18 ba       	out	0x18, r1	; 24
			switch(counter)
 104:	80 91 62 00 	lds	r24, 0x0062
 108:	90 91 63 00 	lds	r25, 0x0063
 10c:	84 30       	cpi	r24, 0x04	; 4
 10e:	91 05       	cpc	r25, r1
 110:	09 f4       	brne	.+2      	; 0x114 <ScanButton+0x54>
 112:	55 c0       	rjmp	.+170    	; 0x1be <ScanButton+0xfe>
 114:	85 30       	cpi	r24, 0x05	; 5
 116:	91 05       	cpc	r25, r1
 118:	8c f4       	brge	.+34     	; 0x13c <ScanButton+0x7c>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	91 05       	cpc	r25, r1
 11e:	a1 f1       	breq	.+104    	; 0x188 <ScanButton+0xc8>
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	91 05       	cpc	r25, r1
 124:	1c f4       	brge	.+6      	; 0x12c <ScanButton+0x6c>
 126:	00 97       	sbiw	r24, 0x00	; 0
 128:	11 f1       	breq	.+68     	; 0x16e <ScanButton+0xae>
 12a:	8c c0       	rjmp	.+280    	; 0x244 <ScanButton+0x184>
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	91 05       	cpc	r25, r1
 130:	81 f1       	breq	.+96     	; 0x192 <ScanButton+0xd2>
 132:	83 30       	cpi	r24, 0x03	; 3
 134:	91 05       	cpc	r25, r1
 136:	09 f0       	breq	.+2      	; 0x13a <ScanButton+0x7a>
 138:	85 c0       	rjmp	.+266    	; 0x244 <ScanButton+0x184>
 13a:	36 c0       	rjmp	.+108    	; 0x1a8 <ScanButton+0xe8>
 13c:	87 30       	cpi	r24, 0x07	; 7
 13e:	91 05       	cpc	r25, r1
 140:	09 f4       	brne	.+2      	; 0x144 <ScanButton+0x84>
 142:	5e c0       	rjmp	.+188    	; 0x200 <ScanButton+0x140>
 144:	88 30       	cpi	r24, 0x08	; 8
 146:	91 05       	cpc	r25, r1
 148:	4c f4       	brge	.+18     	; 0x15c <ScanButton+0x9c>
 14a:	85 30       	cpi	r24, 0x05	; 5
 14c:	91 05       	cpc	r25, r1
 14e:	09 f4       	brne	.+2      	; 0x152 <ScanButton+0x92>
 150:	3f c0       	rjmp	.+126    	; 0x1d0 <ScanButton+0x110>
 152:	86 30       	cpi	r24, 0x06	; 6
 154:	91 05       	cpc	r25, r1
 156:	09 f0       	breq	.+2      	; 0x15a <ScanButton+0x9a>
 158:	75 c0       	rjmp	.+234    	; 0x244 <ScanButton+0x184>
 15a:	45 c0       	rjmp	.+138    	; 0x1e6 <ScanButton+0x126>
 15c:	88 30       	cpi	r24, 0x08	; 8
 15e:	91 05       	cpc	r25, r1
 160:	09 f4       	brne	.+2      	; 0x164 <ScanButton+0xa4>
 162:	55 c0       	rjmp	.+170    	; 0x20e <ScanButton+0x14e>
 164:	89 30       	cpi	r24, 0x09	; 9
 166:	91 05       	cpc	r25, r1
 168:	09 f0       	breq	.+2      	; 0x16c <ScanButton+0xac>
 16a:	6c c0       	rjmp	.+216    	; 0x244 <ScanButton+0x184>
 16c:	5f c0       	rjmp	.+190    	; 0x22c <ScanButton+0x16c>
			{
				case 0:
				//a,b,c,d,e,f
				turnOnA();
 16e:	0e 94 3e 00 	call	0x7c	; 0x7c <turnOnA>
				turnOnB();
 172:	0e 94 43 00 	call	0x86	; 0x86 <turnOnB>
				turnOnC();
 176:	0e 94 48 00 	call	0x90	; 0x90 <turnOnC>
				turnOnD();
 17a:	0e 94 4d 00 	call	0x9a	; 0x9a <turnOnD>
				turnOnE();
 17e:	0e 94 52 00 	call	0xa4	; 0xa4 <turnOnE>
				turnOnF();
 182:	0e 94 56 00 	call	0xac	; 0xac <turnOnF>
				//turnOnG();
				break;
 186:	5e c0       	rjmp	.+188    	; 0x244 <ScanButton+0x184>
				case 1:
				//b,c
				turnOnB();
 188:	0e 94 43 00 	call	0x86	; 0x86 <turnOnB>
				turnOnC();
 18c:	0e 94 48 00 	call	0x90	; 0x90 <turnOnC>
				break;
 190:	59 c0       	rjmp	.+178    	; 0x244 <ScanButton+0x184>
				case 2:
				//a,b,g,d,e
				turnOnA();
 192:	0e 94 3e 00 	call	0x7c	; 0x7c <turnOnA>
				turnOnB();
 196:	0e 94 43 00 	call	0x86	; 0x86 <turnOnB>
				turnOnG();
 19a:	0e 94 5b 00 	call	0xb6	; 0xb6 <turnOnG>
				turnOnD();
 19e:	0e 94 4d 00 	call	0x9a	; 0x9a <turnOnD>
				turnOnE();
 1a2:	0e 94 52 00 	call	0xa4	; 0xa4 <turnOnE>
				break;
 1a6:	4e c0       	rjmp	.+156    	; 0x244 <ScanButton+0x184>
				case 3:
				//a,b,g,c,d
				turnOnA();
 1a8:	0e 94 3e 00 	call	0x7c	; 0x7c <turnOnA>
				turnOnB();
 1ac:	0e 94 43 00 	call	0x86	; 0x86 <turnOnB>
				turnOnG();
 1b0:	0e 94 5b 00 	call	0xb6	; 0xb6 <turnOnG>
				turnOnC();
 1b4:	0e 94 48 00 	call	0x90	; 0x90 <turnOnC>
				turnOnD();
 1b8:	0e 94 4d 00 	call	0x9a	; 0x9a <turnOnD>
				break;
 1bc:	43 c0       	rjmp	.+134    	; 0x244 <ScanButton+0x184>
				case 4:
				//f,g,b,c
				turnOnF();
 1be:	0e 94 56 00 	call	0xac	; 0xac <turnOnF>
				turnOnG();
 1c2:	0e 94 5b 00 	call	0xb6	; 0xb6 <turnOnG>
				turnOnB();
 1c6:	0e 94 43 00 	call	0x86	; 0x86 <turnOnB>
				turnOnC();
 1ca:	0e 94 48 00 	call	0x90	; 0x90 <turnOnC>
				break;
 1ce:	3a c0       	rjmp	.+116    	; 0x244 <ScanButton+0x184>
				case 5:
				//a,f,g,c,d
				turnOnA();
 1d0:	0e 94 3e 00 	call	0x7c	; 0x7c <turnOnA>
				turnOnF();
 1d4:	0e 94 56 00 	call	0xac	; 0xac <turnOnF>
				turnOnG();
 1d8:	0e 94 5b 00 	call	0xb6	; 0xb6 <turnOnG>
				turnOnC();
 1dc:	0e 94 48 00 	call	0x90	; 0x90 <turnOnC>
				turnOnD();
 1e0:	0e 94 4d 00 	call	0x9a	; 0x9a <turnOnD>
				break;
 1e4:	2f c0       	rjmp	.+94     	; 0x244 <ScanButton+0x184>
				case 6:
				//g,c,d,e,f,a
				turnOnG();
 1e6:	0e 94 5b 00 	call	0xb6	; 0xb6 <turnOnG>
				turnOnC();
 1ea:	0e 94 48 00 	call	0x90	; 0x90 <turnOnC>
				turnOnD();
 1ee:	0e 94 4d 00 	call	0x9a	; 0x9a <turnOnD>
				turnOnE();
 1f2:	0e 94 52 00 	call	0xa4	; 0xa4 <turnOnE>
				turnOnF();
 1f6:	0e 94 56 00 	call	0xac	; 0xac <turnOnF>
				turnOnA();
 1fa:	0e 94 3e 00 	call	0x7c	; 0x7c <turnOnA>
				break;
 1fe:	22 c0       	rjmp	.+68     	; 0x244 <ScanButton+0x184>
				case 7:
				//a,b,c
				turnOnA();
 200:	0e 94 3e 00 	call	0x7c	; 0x7c <turnOnA>
				turnOnB();
 204:	0e 94 43 00 	call	0x86	; 0x86 <turnOnB>
				turnOnC();
 208:	0e 94 48 00 	call	0x90	; 0x90 <turnOnC>
				break;
 20c:	1b c0       	rjmp	.+54     	; 0x244 <ScanButton+0x184>
				case 8:
				//a,b,c,d,e,f,g
				turnOnA();
 20e:	0e 94 3e 00 	call	0x7c	; 0x7c <turnOnA>
				turnOnB();
 212:	0e 94 43 00 	call	0x86	; 0x86 <turnOnB>
				turnOnC();
 216:	0e 94 48 00 	call	0x90	; 0x90 <turnOnC>
				turnOnD();
 21a:	0e 94 4d 00 	call	0x9a	; 0x9a <turnOnD>
				turnOnE();
 21e:	0e 94 52 00 	call	0xa4	; 0xa4 <turnOnE>
				turnOnF();
 222:	0e 94 56 00 	call	0xac	; 0xac <turnOnF>
				turnOnG();
 226:	0e 94 5b 00 	call	0xb6	; 0xb6 <turnOnG>
				break;
 22a:	0c c0       	rjmp	.+24     	; 0x244 <ScanButton+0x184>
				case 9:
				//all - e
				turnOnA();
 22c:	0e 94 3e 00 	call	0x7c	; 0x7c <turnOnA>
				turnOnB();
 230:	0e 94 43 00 	call	0x86	; 0x86 <turnOnB>
				turnOnC();
 234:	0e 94 48 00 	call	0x90	; 0x90 <turnOnC>
				turnOnD();
 238:	0e 94 4d 00 	call	0x9a	; 0x9a <turnOnD>
				//turnOnE();
				turnOnF();
 23c:	0e 94 56 00 	call	0xac	; 0xac <turnOnF>
				turnOnG();
 240:	0e 94 5b 00 	call	0xb6	; 0xb6 <turnOnG>
			_delay_ms(1000);
			PORTB ^= 1 << PINB7;//e
			_delay_ms(1000);
			*/
			
			pressed = 0;
 244:	10 92 61 00 	sts	0x0061, r1
 248:	10 92 60 00 	sts	0x0060, r1
			counter++;
 24c:	80 91 62 00 	lds	r24, 0x0062
 250:	90 91 63 00 	lds	r25, 0x0063
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	90 93 63 00 	sts	0x0063, r25
 25a:	80 93 62 00 	sts	0x0062, r24
			if(counter > 9)	
 25e:	8a 30       	cpi	r24, 0x0A	; 10
 260:	91 05       	cpc	r25, r1
 262:	24 f0       	brlt	.+8      	; 0x26c <ScanButton+0x1ac>
			{
				counter = 0;
 264:	10 92 63 00 	sts	0x0063, r1
 268:	10 92 62 00 	sts	0x0062, r1
 26c:	08 95       	ret

0000026e <main>:

int main(void)
{
	//DDRB |= 1 << PINB0;    // Data Direction Register output PINB0
	//DDRB |= 0b11111111;
	DDRC |= 1 << PINC1;
 26e:	a1 9a       	sbi	0x14, 1	; 20
	DDRC &= ~(1 << PINC0); //Data Direction Register input PINB1
 270:	a0 98       	cbi	0x14, 0	; 20
	PORTC |= 1 << PINC0;   // set PINB1 to a high reading
 272:	a8 9a       	sbi	0x15, 0	; 21
	
	//PORTC ^= 1 << PINC1;
	
    while(1)
    {
        ScanButton();
 274:	0e 94 60 00 	call	0xc0	; 0xc0 <ScanButton>
 278:	fd cf       	rjmp	.-6      	; 0x274 <main+0x6>

0000027a <_exit>:
 27a:	f8 94       	cli

0000027c <__stop_program>:
 27c:	ff cf       	rjmp	.-2      	; 0x27c <__stop_program>
