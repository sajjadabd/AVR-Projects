
Transfer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000156  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000008bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000036  00000000  00000000  000008db  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000c0  00000000  00000000  00000911  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000083  00000000  00000000  000009d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000015b  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000030  00000000  00000000  00000bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000b5  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000002b  00000000  00000000  00000c95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 67 00 	call	0xce	; 0xce <main>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ScanButton>:
int pressed = 0;

void ScanButton()
{
	
	if(bit_is_clear(PINB, 1))
  7c:	b1 99       	sbic	0x16, 1	; 22
  7e:	14 c0       	rjmp	.+40     	; 0xa8 <ScanButton+0x2c>
	{
		if(pressed >= 1000)
  80:	80 91 60 00 	lds	r24, 0x0060
  84:	90 91 61 00 	lds	r25, 0x0061
  88:	23 e0       	ldi	r18, 0x03	; 3
  8a:	88 3e       	cpi	r24, 0xE8	; 232
  8c:	92 07       	cpc	r25, r18
  8e:	3c f0       	brlt	.+14     	; 0x9e <ScanButton+0x22>
		{
			pressed = 500;
  90:	84 ef       	ldi	r24, 0xF4	; 244
  92:	91 e0       	ldi	r25, 0x01	; 1
  94:	90 93 61 00 	sts	0x0061, r25
  98:	80 93 60 00 	sts	0x0060, r24
  9c:	0d c0       	rjmp	.+26     	; 0xb8 <ScanButton+0x3c>
		}
		else
		{
			pressed++;
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	90 93 61 00 	sts	0x0061, r25
  a4:	80 93 60 00 	sts	0x0060, r24
		}							
	}	
		
	if(pressed >= 400)
  a8:	80 91 60 00 	lds	r24, 0x0060
  ac:	90 91 61 00 	lds	r25, 0x0061
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	80 39       	cpi	r24, 0x90	; 144
  b4:	92 07       	cpc	r25, r18
  b6:	54 f0       	brlt	.+20     	; 0xcc <ScanButton+0x50>
	{
		if(bit_is_clear(PINB,1))
  b8:	b1 9b       	sbis	0x16, 1	; 22
  ba:	08 c0       	rjmp	.+16     	; 0xcc <ScanButton+0x50>
		{
			//Do Nothing
		}
		else
		{
			PORTB ^= 1 << PINB0;
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	89 27       	eor	r24, r25
  c2:	88 bb       	out	0x18, r24	; 24
			pressed = 0;					
  c4:	10 92 61 00 	sts	0x0061, r1
  c8:	10 92 60 00 	sts	0x0060, r1
  cc:	08 95       	ret

000000ce <main>:
	}
}

int main(void)
{
	DDRB |= 1 << PINB0;
  ce:	b8 9a       	sbi	0x17, 0	; 23
	DDRB |= ~(1<<PINB1);
  d0:	87 b3       	in	r24, 0x17	; 23
  d2:	8d 6f       	ori	r24, 0xFD	; 253
  d4:	87 bb       	out	0x17, r24	; 23
	
	PORTB |= 1 << PINB1;
  d6:	c1 9a       	sbi	0x18, 1	; 24
	
    while(1)
    {
        //TODO:: Please write your application code 
		ScanButton();
  d8:	0e 94 3e 00 	call	0x7c	; 0x7c <ScanButton>
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <main+0xa>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
