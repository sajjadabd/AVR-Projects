
PWM1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000212  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000286  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000009eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000009f  00000000  00000000  00000a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000306  00000000  00000000  00000aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000169  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a0  00000000  00000000  00000f19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  000012bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000167  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000eb  00000000  00000000  000014b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  0000159e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 00 01 	call	0x200	; 0x200 <main>
  74:	0c 94 07 01 	jmp	0x20e	; 0x20e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <initPWM>:
//int counterMemory;
int counter = 0;

void initPWM()
{
	TCCR0 |= 1 << WGM00 | 1 << WGM01 | 1 << CS00 | 1 << COM01;
  7c:	83 b7       	in	r24, 0x33	; 51
  7e:	89 66       	ori	r24, 0x69	; 105
  80:	83 bf       	out	0x33, r24	; 51
	DDRB |= 1 << PINB3;
  82:	bb 9a       	sbi	0x17, 3	; 23
	DDRB &= ~(1 << PINB0);
  84:	b8 98       	cbi	0x17, 0	; 23
	DDRB &= ~(1 << PINB1);
  86:	b9 98       	cbi	0x17, 1	; 23
	PORTB |= 1 << PINB0;
  88:	c0 9a       	sbi	0x18, 0	; 24
	PORTB |= 1 << PINB1;
  8a:	c1 9a       	sbi	0x18, 1	; 24
	//PORTB |= 1 << PINB3;
}
  8c:	08 95       	ret

0000008e <setPWMOutput>:



void setPWMOutput(int duty)
{
	OCR0 = duty;
  8e:	8c bf       	out	0x3c, r24	; 60
}
  90:	08 95       	ret

00000092 <wait>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  92:	80 e8       	ldi	r24, 0x80	; 128
  94:	9c e0       	ldi	r25, 0x0C	; 12
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <wait+0x4>

void wait()
{
	_delay_loop_2(3200);
}
  9a:	08 95       	ret

0000009c <ScanButton>:


void ScanButton()
{
	
	if(bit_is_clear(PINB, 0))
  9c:	b0 99       	sbic	0x16, 0	; 22
  9e:	14 c0       	rjmp	.+40     	; 0xc8 <ScanButton+0x2c>
	{
		if(pressed >= 1000)
  a0:	80 91 60 00 	lds	r24, 0x0060
  a4:	90 91 61 00 	lds	r25, 0x0061
  a8:	23 e0       	ldi	r18, 0x03	; 3
  aa:	88 3e       	cpi	r24, 0xE8	; 232
  ac:	92 07       	cpc	r25, r18
  ae:	3c f0       	brlt	.+14     	; 0xbe <ScanButton+0x22>
		{
			pressed = 500;
  b0:	84 ef       	ldi	r24, 0xF4	; 244
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	90 93 61 00 	sts	0x0061, r25
  b8:	80 93 60 00 	sts	0x0060, r24
  bc:	0d c0       	rjmp	.+26     	; 0xd8 <ScanButton+0x3c>
		}
		else
		{
			pressed++;
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	90 93 61 00 	sts	0x0061, r25
  c4:	80 93 60 00 	sts	0x0060, r24
		}							
	}	
		
	if(pressed >= 400)
  c8:	80 91 60 00 	lds	r24, 0x0060
  cc:	90 91 61 00 	lds	r25, 0x0061
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	80 39       	cpi	r24, 0x90	; 144
  d4:	92 07       	cpc	r25, r18
  d6:	6c f1       	brlt	.+90     	; 0x132 <ScanButton+0x96>
	{
		if(bit_is_clear(PINB,0))
  d8:	b0 99       	sbic	0x16, 0	; 22
  da:	27 c0       	rjmp	.+78     	; 0x12a <ScanButton+0x8e>
		{
			if(counter < 10)
  dc:	80 91 64 00 	lds	r24, 0x0064
  e0:	90 91 65 00 	lds	r25, 0x0065
  e4:	8a 30       	cpi	r24, 0x0A	; 10
  e6:	91 05       	cpc	r25, r1
  e8:	0c f4       	brge	.+2      	; 0xec <ScanButton+0x50>
			{
				//PORTB ^= 1 << PINB3;
				PORTB |= 1 << PINB3;
  ea:	c3 9a       	sbi	0x18, 3	; 24
			}
			
			//When Button in Pressed
			//counterMemory = counter;
			counter++;
  ec:	80 91 64 00 	lds	r24, 0x0064
  f0:	90 91 65 00 	lds	r25, 0x0065
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	90 93 65 00 	sts	0x0065, r25
  fa:	80 93 64 00 	sts	0x0064, r24
			
			if(counter >= 250)
  fe:	8a 3f       	cpi	r24, 0xFA	; 250
 100:	91 05       	cpc	r25, r1
 102:	34 f0       	brlt	.+12     	; 0x110 <ScanButton+0x74>
			{
				counter = 255;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 93 65 00 	sts	0x0065, r25
 10c:	80 93 64 00 	sts	0x0064, r24
			}
			setPWMOutput(counter);
 110:	80 91 64 00 	lds	r24, 0x0064
 114:	90 91 65 00 	lds	r25, 0x0065
 118:	0e 94 47 00 	call	0x8e	; 0x8e <setPWMOutput>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	81 ee       	ldi	r24, 0xE1	; 225
 11e:	94 e0       	ldi	r25, 0x04	; 4
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <ScanButton+0x84>
 124:	00 c0       	rjmp	.+0      	; 0x126 <ScanButton+0x8a>
 126:	00 00       	nop
 128:	08 95       	ret
		else
		{
			//PORTB ^= 1 << PINB0;
			//Do SomeThing
			
			pressed = 0;					
 12a:	10 92 61 00 	sts	0x0061, r1
 12e:	10 92 60 00 	sts	0x0060, r1
 132:	08 95       	ret

00000134 <ScanButton2>:
}

void ScanButton2()
{
	
	if(bit_is_clear(PINB, 1))
 134:	b1 99       	sbic	0x16, 1	; 22
 136:	14 c0       	rjmp	.+40     	; 0x160 <ScanButton2+0x2c>
	{
		if(pressed2 >= 1000)
 138:	80 91 62 00 	lds	r24, 0x0062
 13c:	90 91 63 00 	lds	r25, 0x0063
 140:	23 e0       	ldi	r18, 0x03	; 3
 142:	88 3e       	cpi	r24, 0xE8	; 232
 144:	92 07       	cpc	r25, r18
 146:	3c f0       	brlt	.+14     	; 0x156 <ScanButton2+0x22>
		{
			pressed2 = 500;
 148:	84 ef       	ldi	r24, 0xF4	; 244
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	90 93 63 00 	sts	0x0063, r25
 150:	80 93 62 00 	sts	0x0062, r24
 154:	0d c0       	rjmp	.+26     	; 0x170 <ScanButton2+0x3c>
		}
		else
		{
			pressed2++;
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	90 93 63 00 	sts	0x0063, r25
 15c:	80 93 62 00 	sts	0x0062, r24
		}							
	}	
		
	if(pressed2 >= 400)
 160:	80 91 62 00 	lds	r24, 0x0062
 164:	90 91 63 00 	lds	r25, 0x0063
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	80 39       	cpi	r24, 0x90	; 144
 16c:	92 07       	cpc	r25, r18
 16e:	2c f1       	brlt	.+74     	; 0x1ba <ScanButton2+0x86>
	{
		if(bit_is_clear(PINB,1))
 170:	b1 99       	sbic	0x16, 1	; 22
 172:	1f c0       	rjmp	.+62     	; 0x1b2 <ScanButton2+0x7e>
		{
			//When Button in Pressed
			//counterMemory = counter;
			counter--;
 174:	80 91 64 00 	lds	r24, 0x0064
 178:	90 91 65 00 	lds	r25, 0x0065
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	90 93 65 00 	sts	0x0065, r25
 182:	80 93 64 00 	sts	0x0064, r24
			if(counter <= 1)
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	91 05       	cpc	r25, r1
 18a:	54 f4       	brge	.+20     	; 0x1a0 <ScanButton2+0x6c>
			{
				counter = 0;
 18c:	10 92 65 00 	sts	0x0065, r1
 190:	10 92 64 00 	sts	0x0064, r1
				setPWMOutput(counter);
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 47 00 	call	0x8e	; 0x8e <setPWMOutput>
				PORTB &= ~(1 << PINB3);
 19c:	c3 98       	cbi	0x18, 3	; 24
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <ScanButton2+0x70>
			}
			else
			{
				setPWMOutput(counter);
 1a0:	0e 94 47 00 	call	0x8e	; 0x8e <setPWMOutput>
 1a4:	83 ef       	ldi	r24, 0xF3	; 243
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <ScanButton2+0x74>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <ScanButton2+0x7a>
 1ae:	00 00       	nop
 1b0:	08 95       	ret
		else
		{
			//PORTB ^= 1 << PINB0;
			//Do SomeThing
			
			pressed2 = 0;					
 1b2:	10 92 63 00 	sts	0x0063, r1
 1b6:	10 92 62 00 	sts	0x0062, r1
 1ba:	08 95       	ret

000001bc <increase>:
	}
	*/
}

void increase()
{
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
	for(int i=0; i<=255; i++)
 1c0:	c0 e0       	ldi	r28, 0x00	; 0
 1c2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		setPWMOutput(i);
 1c4:	ce 01       	movw	r24, r28
 1c6:	0e 94 47 00 	call	0x8e	; 0x8e <setPWMOutput>
		wait();
 1ca:	0e 94 49 00 	call	0x92	; 0x92 <wait>
	*/
}

void increase()
{
	for(int i=0; i<=255; i++)
 1ce:	21 96       	adiw	r28, 0x01	; 1
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	c0 30       	cpi	r28, 0x00	; 0
 1d4:	d8 07       	cpc	r29, r24
 1d6:	b1 f7       	brne	.-20     	; 0x1c4 <increase+0x8>
	{
		setPWMOutput(i);
		wait();
	}
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <decrease>:



void decrease()
{
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
	for(int i=255; i>=0; i--)
 1e2:	cf ef       	ldi	r28, 0xFF	; 255
 1e4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		setPWMOutput(i);
 1e6:	ce 01       	movw	r24, r28
 1e8:	0e 94 47 00 	call	0x8e	; 0x8e <setPWMOutput>
		wait();
 1ec:	0e 94 49 00 	call	0x92	; 0x92 <wait>



void decrease()
{
	for(int i=255; i>=0; i--)
 1f0:	21 97       	sbiw	r28, 0x01	; 1
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	cf 3f       	cpi	r28, 0xFF	; 255
 1f6:	d8 07       	cpc	r29, r24
 1f8:	b1 f7       	brne	.-20     	; 0x1e6 <decrease+0x8>
	{
		setPWMOutput(i);
		wait();
	}
}
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <main>:

int main()
{
	//int brightness = 0;
	
	initPWM();
 200:	0e 94 3e 00 	call	0x7c	; 0x7c <initPWM>
	
	while(1)
	{
		ScanButton();
 204:	0e 94 4e 00 	call	0x9c	; 0x9c <ScanButton>
		ScanButton2();
 208:	0e 94 9a 00 	call	0x134	; 0x134 <ScanButton2>
 20c:	fb cf       	rjmp	.-10     	; 0x204 <main+0x4>

0000020e <_exit>:
 20e:	f8 94       	cli

00000210 <__stop_program>:
 210:	ff cf       	rjmp	.-2      	; 0x210 <__stop_program>
