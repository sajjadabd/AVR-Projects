
4-LCD1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000014a  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  0000092f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000007e  00000000  00000000  0000094f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000338  00000000  00000000  000009cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000153  00000000  00000000  00000d05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000328  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001180  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000179  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000064  00000000  00000000  00001369  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  000013cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  7a:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Peek_A_Boo>:

	DataDir_MrLCDsCrib = 0xFF; //0xFF means 0b11111111
}
void Peek_A_Boo()
{
	MrLCDsControl |= 1<<LightSwitch;
  82:	95 9a       	sbi	0x12, 5	; 18
	asm volatile ("nop");
  84:	00 00       	nop
	asm volatile ("nop");
  86:	00 00       	nop
	MrLCDsControl &= ~1<<LightSwitch;
  88:	82 b3       	in	r24, 0x12	; 18
  8a:	80 7c       	andi	r24, 0xC0	; 192
  8c:	82 bb       	out	0x12, r24	; 18
}
  8e:	08 95       	ret

00000090 <Check_IF_MrLCD_isBusy>:
	}
}

void Check_IF_MrLCD_isBusy()
{
	DataDir_MrLCDsCrib = 0;
  90:	17 ba       	out	0x17, r1	; 23
	MrLCDsControl |= 1<<ReadWrite;
  92:	97 9a       	sbi	0x12, 7	; 18
	MrLCDsControl &= ~1<<BiPolarMood;
  94:	82 b3       	in	r24, 0x12	; 18
  96:	88 7f       	andi	r24, 0xF8	; 248
  98:	82 bb       	out	0x12, r24	; 18

	while (MrLCDsCrib >= 0x80)
  9a:	c7 9b       	sbis	0x18, 7	; 24
  9c:	04 c0       	rjmp	.+8      	; 0xa6 <Check_IF_MrLCD_isBusy+0x16>
	{
	Peek_A_Boo();
  9e:	0e 94 41 00 	call	0x82	; 0x82 <Peek_A_Boo>
{
	DataDir_MrLCDsCrib = 0;
	MrLCDsControl |= 1<<ReadWrite;
	MrLCDsControl &= ~1<<BiPolarMood;

	while (MrLCDsCrib >= 0x80)
  a2:	c7 99       	sbic	0x18, 7	; 24
  a4:	fc cf       	rjmp	.-8      	; 0x9e <Check_IF_MrLCD_isBusy+0xe>
	{
	Peek_A_Boo();
	}

	DataDir_MrLCDsCrib = 0xFF; //0xFF means 0b11111111
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	87 bb       	out	0x17, r24	; 23
}
  aa:	08 95       	ret

000000ac <Send_A_Command>:
	asm volatile ("nop");
	MrLCDsControl &= ~1<<LightSwitch;
}

void Send_A_Command(unsigned char command)
{
  ac:	1f 93       	push	r17
  ae:	18 2f       	mov	r17, r24
	Check_IF_MrLCD_isBusy();
  b0:	0e 94 48 00 	call	0x90	; 0x90 <Check_IF_MrLCD_isBusy>
	MrLCDsCrib = command;
  b4:	18 bb       	out	0x18, r17	; 24
	MrLCDsControl &= ~ ((1<<ReadWrite)|(1<<BiPolarMood));
  b6:	82 b3       	in	r24, 0x12	; 18
  b8:	8b 77       	andi	r24, 0x7B	; 123
  ba:	82 bb       	out	0x12, r24	; 18
	Peek_A_Boo();
  bc:	0e 94 41 00 	call	0x82	; 0x82 <Peek_A_Boo>
	MrLCDsCrib = 0;
  c0:	18 ba       	out	0x18, r1	; 24
}
  c2:	1f 91       	pop	r17
  c4:	08 95       	ret

000000c6 <Send_A_Character>:

void Send_A_Character(unsigned char character)
{
  c6:	1f 93       	push	r17
  c8:	18 2f       	mov	r17, r24
	Check_IF_MrLCD_isBusy();
  ca:	0e 94 48 00 	call	0x90	; 0x90 <Check_IF_MrLCD_isBusy>
	MrLCDsCrib = character;
  ce:	18 bb       	out	0x18, r17	; 24
	MrLCDsControl &= ~ (1<<ReadWrite);
  d0:	97 98       	cbi	0x12, 7	; 18
	MrLCDsControl |= 1<<BiPolarMood;
  d2:	92 9a       	sbi	0x12, 2	; 18
	Peek_A_Boo();
  d4:	0e 94 41 00 	call	0x82	; 0x82 <Peek_A_Boo>
	MrLCDsCrib = 0;
  d8:	18 ba       	out	0x18, r1	; 24
}
  da:	1f 91       	pop	r17
  dc:	08 95       	ret

000000de <Send_A_String>:

void Send_A_String(char *StringOfCharacters)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	ec 01       	movw	r28, r24
	while(*StringOfCharacters > 0)
  e4:	88 81       	ld	r24, Y
  e6:	88 23       	and	r24, r24
  e8:	31 f0       	breq	.+12     	; 0xf6 <Send_A_String+0x18>
	MrLCDsControl |= 1<<BiPolarMood;
	Peek_A_Boo();
	MrLCDsCrib = 0;
}

void Send_A_String(char *StringOfCharacters)
  ea:	21 96       	adiw	r28, 0x01	; 1
{
	while(*StringOfCharacters > 0)
	{
		Send_A_Character(*StringOfCharacters++);
  ec:	0e 94 63 00 	call	0xc6	; 0xc6 <Send_A_Character>
	MrLCDsCrib = 0;
}

void Send_A_String(char *StringOfCharacters)
{
	while(*StringOfCharacters > 0)
  f0:	89 91       	ld	r24, Y+
  f2:	88 23       	and	r24, r24
  f4:	d9 f7       	brne	.-10     	; 0xec <Send_A_String+0xe>
	{
		Send_A_Character(*StringOfCharacters++);
	}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <main>:
void Send_A_Character(unsigned char character);
void Send_A_String(char *StringOfCharacters);

int main(void)
{
	DataDir_MrLCDsControl |= 1<<LightSwitch | 1<<ReadWrite | 1<<BiPolarMood;
  fc:	81 b3       	in	r24, 0x11	; 17
  fe:	84 6a       	ori	r24, 0xA4	; 164
 100:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	85 ea       	ldi	r24, 0xA5	; 165
 104:	9e e0       	ldi	r25, 0x0E	; 14
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0xa>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x10>
 10c:	00 00       	nop
	_delay_ms(15);

	Send_A_Command(0x01); //Clear Screen 0x01 = 00000001
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	0e 94 56 00 	call	0xac	; 0xac <Send_A_Command>
 114:	83 ef       	ldi	r24, 0xF3	; 243
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <main+0x1c>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x22>
 11e:	00 00       	nop
	_delay_ms(2);
	Send_A_Command(0x38);
 120:	88 e3       	ldi	r24, 0x38	; 56
 122:	0e 94 56 00 	call	0xac	; 0xac <Send_A_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	90 e1       	ldi	r25, 0x10	; 16
 128:	9a 95       	dec	r25
 12a:	f1 f7       	brne	.-4      	; 0x128 <main+0x2c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x32>
	_delay_us(50);
	Send_A_Command(0b00001110);
 12e:	8e e0       	ldi	r24, 0x0E	; 14
 130:	0e 94 56 00 	call	0xac	; 0xac <Send_A_Command>
 134:	80 e1       	ldi	r24, 0x10	; 16
 136:	8a 95       	dec	r24
 138:	f1 f7       	brne	.-4      	; 0x136 <main+0x3a>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x40>
	_delay_us(50);

	Send_A_String("Welcome ...");
 13c:	80 e6       	ldi	r24, 0x60	; 96
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 6f 00 	call	0xde	; 0xde <Send_A_String>
 144:	ff cf       	rjmp	.-2      	; 0x144 <main+0x48>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
