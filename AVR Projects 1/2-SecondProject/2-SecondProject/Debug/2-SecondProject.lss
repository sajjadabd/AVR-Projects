
2-SecondProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000002ee  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080007c  0080007c  0000039e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000a5  00000000  00000000  00000b23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000504  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001f9  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000588  00000000  00000000  000012c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000a0  00000000  00000000  00001850  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001b3  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000281  00000000  00000000  00001aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  00001d5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 45 01 	call	0x28a	; 0x28a <main>
  8a:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KeypadScan>:
void PeekABoo();
void CheckLCDBusyOrNot();

void KeypadScan()
{
	if( KeypadPortValue == 0b11110000 )
  92:	89 b3       	in	r24, 0x19	; 25
  94:	80 3f       	cpi	r24, 0xF0	; 240
  96:	09 f4       	brne	.+2      	; 0x9a <KeypadScan+0x8>
  98:	80 c0       	rjmp	.+256    	; 0x19a <KeypadScan+0x108>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	83 ed       	ldi	r24, 0xD3	; 211
  9c:	90 e3       	ldi	r25, 0x30	; 48
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <KeypadScan+0xc>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <KeypadScan+0x12>
  a4:	00 00       	nop

	_delay_ms(50);
	
	//Scan The Keypad

	uint8_t KeyPressCode = KeypadPortValue;
  a6:	89 b3       	in	r24, 0x19	; 25

	KeypadDirectionRegister ^= 0b11111111;
  a8:	9a b3       	in	r25, 0x1a	; 26
  aa:	90 95       	com	r25
  ac:	9a bb       	out	0x1a, r25	; 26
	KeypadPortControl ^= 0b11111111;
  ae:	9b b3       	in	r25, 0x1b	; 27
  b0:	90 95       	com	r25
  b2:	9b bb       	out	0x1b, r25	; 27
	
	asm volatile("nop");
  b4:	00 00       	nop
	asm volatile("nop");
  b6:	00 00       	nop
	
	KeyPressCode |= KeypadPortValue;
  b8:	99 b3       	in	r25, 0x19	; 25
  ba:	89 2b       	or	r24, r25

	uint8_t blinkDuration = 0;

	switch(KeyPressCode)
  bc:	8e 3b       	cpi	r24, 0xBE	; 190
  be:	81 f1       	breq	.+96     	; 0x120 <KeypadScan+0x8e>
  c0:	8f 3b       	cpi	r24, 0xBF	; 191
  c2:	a0 f4       	brcc	.+40     	; 0xec <KeypadScan+0x5a>
  c4:	8e 37       	cpi	r24, 0x7E	; 126
  c6:	71 f1       	breq	.+92     	; 0x124 <KeypadScan+0x92>
  c8:	8f 37       	cpi	r24, 0x7F	; 127
  ca:	40 f4       	brcc	.+16     	; 0xdc <KeypadScan+0x4a>
  cc:	8b 37       	cpi	r24, 0x7B	; 123
  ce:	d1 f1       	breq	.+116    	; 0x144 <KeypadScan+0xb2>
  d0:	8d 37       	cpi	r24, 0x7D	; 125
  d2:	81 f1       	breq	.+96     	; 0x134 <KeypadScan+0xa2>
  d4:	87 37       	cpi	r24, 0x77	; 119
  d6:	09 f0       	breq	.+2      	; 0xda <KeypadScan+0x48>
  d8:	60 c0       	rjmp	.+192    	; 0x19a <KeypadScan+0x108>
  da:	3c c0       	rjmp	.+120    	; 0x154 <KeypadScan+0xc2>
  dc:	8b 3b       	cpi	r24, 0xBB	; 187
  de:	81 f1       	breq	.+96     	; 0x140 <KeypadScan+0xae>
  e0:	8d 3b       	cpi	r24, 0xBD	; 189
  e2:	31 f1       	breq	.+76     	; 0x130 <KeypadScan+0x9e>
  e4:	87 3b       	cpi	r24, 0xB7	; 183
  e6:	09 f0       	breq	.+2      	; 0xea <KeypadScan+0x58>
  e8:	58 c0       	rjmp	.+176    	; 0x19a <KeypadScan+0x108>
  ea:	32 c0       	rjmp	.+100    	; 0x150 <KeypadScan+0xbe>
  ec:	8e 3d       	cpi	r24, 0xDE	; 222
  ee:	09 f4       	brne	.+2      	; 0xf2 <KeypadScan+0x60>
  f0:	4f c0       	rjmp	.+158    	; 0x190 <KeypadScan+0xfe>
  f2:	8f 3d       	cpi	r24, 0xDF	; 223
  f4:	40 f4       	brcc	.+16     	; 0x106 <KeypadScan+0x74>
  f6:	8b 3d       	cpi	r24, 0xDB	; 219
  f8:	09 f1       	breq	.+66     	; 0x13c <KeypadScan+0xaa>
  fa:	8d 3d       	cpi	r24, 0xDD	; 221
  fc:	b9 f0       	breq	.+46     	; 0x12c <KeypadScan+0x9a>
  fe:	87 3d       	cpi	r24, 0xD7	; 215
 100:	09 f0       	breq	.+2      	; 0x104 <KeypadScan+0x72>
 102:	4b c0       	rjmp	.+150    	; 0x19a <KeypadScan+0x108>
 104:	23 c0       	rjmp	.+70     	; 0x14c <KeypadScan+0xba>
 106:	8b 3e       	cpi	r24, 0xEB	; 235
 108:	b9 f0       	breq	.+46     	; 0x138 <KeypadScan+0xa6>
 10a:	8c 3e       	cpi	r24, 0xEC	; 236
 10c:	20 f4       	brcc	.+8      	; 0x116 <KeypadScan+0x84>
 10e:	87 3e       	cpi	r24, 0xE7	; 231
 110:	09 f0       	breq	.+2      	; 0x114 <KeypadScan+0x82>
 112:	43 c0       	rjmp	.+134    	; 0x19a <KeypadScan+0x108>
 114:	19 c0       	rjmp	.+50     	; 0x148 <KeypadScan+0xb6>
 116:	8d 3e       	cpi	r24, 0xED	; 237
 118:	39 f0       	breq	.+14     	; 0x128 <KeypadScan+0x96>
 11a:	8e 3e       	cpi	r24, 0xEE	; 238
 11c:	f1 f5       	brne	.+124    	; 0x19a <KeypadScan+0x108>
 11e:	36 c0       	rjmp	.+108    	; 0x18c <KeypadScan+0xfa>
		break;
		case 0b11011110 :
		blinkDuration = 2;
		break;
		case 0b10111110 :
		blinkDuration = 3;
 120:	23 e0       	ldi	r18, 0x03	; 3
		break;
 122:	37 c0       	rjmp	.+110    	; 0x192 <KeypadScan+0x100>
		case 0b01111110 :
		blinkDuration = 4;
 124:	24 e0       	ldi	r18, 0x04	; 4
		break;
 126:	35 c0       	rjmp	.+106    	; 0x192 <KeypadScan+0x100>
		case 0b11101101 :
		blinkDuration = 5;
 128:	25 e0       	ldi	r18, 0x05	; 5
		break;
 12a:	33 c0       	rjmp	.+102    	; 0x192 <KeypadScan+0x100>
		case 0b11011101 :
		blinkDuration = 6;
 12c:	26 e0       	ldi	r18, 0x06	; 6
		break;
 12e:	31 c0       	rjmp	.+98     	; 0x192 <KeypadScan+0x100>
		case 0b10111101 :
		blinkDuration = 7;
 130:	27 e0       	ldi	r18, 0x07	; 7
		break;
 132:	2f c0       	rjmp	.+94     	; 0x192 <KeypadScan+0x100>
		case 0b01111101 :
		blinkDuration = 8;
 134:	28 e0       	ldi	r18, 0x08	; 8
		break;
 136:	2d c0       	rjmp	.+90     	; 0x192 <KeypadScan+0x100>
		case 0b11101011 :
		blinkDuration = 9;
 138:	29 e0       	ldi	r18, 0x09	; 9
		break;
 13a:	2b c0       	rjmp	.+86     	; 0x192 <KeypadScan+0x100>
		case 0b11011011 :
		blinkDuration = 10;
 13c:	2a e0       	ldi	r18, 0x0A	; 10
		break;
 13e:	29 c0       	rjmp	.+82     	; 0x192 <KeypadScan+0x100>
		case 0b10111011 :
		blinkDuration = 11;
 140:	2b e0       	ldi	r18, 0x0B	; 11
		break;
 142:	27 c0       	rjmp	.+78     	; 0x192 <KeypadScan+0x100>
		case 0b01111011 :
		blinkDuration = 12;
 144:	2c e0       	ldi	r18, 0x0C	; 12
		break;
 146:	25 c0       	rjmp	.+74     	; 0x192 <KeypadScan+0x100>
		case 0b11100111 :
		blinkDuration = 13;
 148:	2d e0       	ldi	r18, 0x0D	; 13
		break;
 14a:	23 c0       	rjmp	.+70     	; 0x192 <KeypadScan+0x100>
		case 0b11010111 :
		blinkDuration = 14;
 14c:	2e e0       	ldi	r18, 0x0E	; 14
		break;
 14e:	21 c0       	rjmp	.+66     	; 0x192 <KeypadScan+0x100>
		case 0b10110111 :
		blinkDuration = 15;
 150:	2f e0       	ldi	r18, 0x0F	; 15
		break;
 152:	1f c0       	rjmp	.+62     	; 0x192 <KeypadScan+0x100>
		case 0b01110111 :
		blinkDuration = 16;
 154:	20 e1       	ldi	r18, 0x10	; 16
		break;
 156:	1d c0       	rjmp	.+58     	; 0x192 <KeypadScan+0x100>
	
	
	if(KeyPressCode < 0b11111111 )
	{
		
		for(int i=0;i<blinkDuration;i++)
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB ^= 1 << PINB0;//LED PORT
 15c:	41 e0       	ldi	r20, 0x01	; 1
 15e:	58 b3       	in	r21, 0x18	; 24
 160:	54 27       	eor	r21, r20
 162:	58 bb       	out	0x18, r21	; 24
 164:	e7 ea       	ldi	r30, 0xA7	; 167
 166:	f1 e6       	ldi	r31, 0x61	; 97
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <KeypadScan+0xd6>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <KeypadScan+0xdc>
 16e:	00 00       	nop
			_delay_ms(100);
			PORTB ^= 1 << PINB0;//LED PORT
 170:	58 b3       	in	r21, 0x18	; 24
 172:	54 27       	eor	r21, r20
 174:	58 bb       	out	0x18, r21	; 24
 176:	e7 ea       	ldi	r30, 0xA7	; 167
 178:	f1 e6       	ldi	r31, 0x61	; 97
 17a:	31 97       	sbiw	r30, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <KeypadScan+0xe8>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <KeypadScan+0xee>
 180:	00 00       	nop
	
	
	if(KeyPressCode < 0b11111111 )
	{
		
		for(int i=0;i<blinkDuration;i++)
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	82 17       	cp	r24, r18
 186:	93 07       	cpc	r25, r19
 188:	54 f3       	brlt	.-44     	; 0x15e <KeypadScan+0xcc>
 18a:	08 95       	ret
	uint8_t blinkDuration = 0;

	switch(KeyPressCode)
	{
		case 0b11101110 :
		blinkDuration = 1;
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	01 c0       	rjmp	.+2      	; 0x192 <KeypadScan+0x100>
		break;
		case 0b11011110 :
		blinkDuration = 2;
 190:	22 e0       	ldi	r18, 0x02	; 2
	
	
	if(KeyPressCode < 0b11111111 )
	{
		
		for(int i=0;i<blinkDuration;i++)
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	12 16       	cp	r1, r18
 196:	13 06       	cpc	r1, r19
 198:	fc f2       	brlt	.-66     	; 0x158 <KeypadScan+0xc6>
 19a:	08 95       	ret

0000019c <ScanButton>:


void ScanButton()
{
	
	if(bit_is_clear(PINB, 1))
 19c:	b1 99       	sbic	0x16, 1	; 22
 19e:	14 c0       	rjmp	.+40     	; 0x1c8 <ScanButton+0x2c>
	{
		if(pressed >= 1000)
 1a0:	80 91 7c 00 	lds	r24, 0x007C
 1a4:	90 91 7d 00 	lds	r25, 0x007D
 1a8:	23 e0       	ldi	r18, 0x03	; 3
 1aa:	88 3e       	cpi	r24, 0xE8	; 232
 1ac:	92 07       	cpc	r25, r18
 1ae:	3c f0       	brlt	.+14     	; 0x1be <ScanButton+0x22>
		{
			pressed = 500;
 1b0:	84 ef       	ldi	r24, 0xF4	; 244
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	90 93 7d 00 	sts	0x007D, r25
 1b8:	80 93 7c 00 	sts	0x007C, r24
 1bc:	0d c0       	rjmp	.+26     	; 0x1d8 <ScanButton+0x3c>
		}
		else
		{
			pressed++;
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	90 93 7d 00 	sts	0x007D, r25
 1c4:	80 93 7c 00 	sts	0x007C, r24
		}							
	}	
		
	if(pressed >= 400)
 1c8:	80 91 7c 00 	lds	r24, 0x007C
 1cc:	90 91 7d 00 	lds	r25, 0x007D
 1d0:	21 e0       	ldi	r18, 0x01	; 1
 1d2:	80 39       	cpi	r24, 0x90	; 144
 1d4:	92 07       	cpc	r25, r18
 1d6:	54 f0       	brlt	.+20     	; 0x1ec <ScanButton+0x50>
	{
		if(bit_is_clear(PINB,1))
 1d8:	b1 9b       	sbis	0x16, 1	; 22
 1da:	08 c0       	rjmp	.+16     	; 0x1ec <ScanButton+0x50>
		{
			//Do Nothing
		}
		else
		{
			PORTB ^= 1 << PINB0;
 1dc:	98 b3       	in	r25, 0x18	; 24
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	89 27       	eor	r24, r25
 1e2:	88 bb       	out	0x18, r24	; 24
			pressed = 0;					
 1e4:	10 92 7d 00 	sts	0x007D, r1
 1e8:	10 92 7c 00 	sts	0x007C, r1
 1ec:	08 95       	ret

000001ee <PeekABoo>:
	LCDDataDirection = 0xff; // mean 0b11111111;
}

void PeekABoo()
{
	LCDControlPort |= 1 << LightSwitch;
 1ee:	95 9a       	sbi	0x12, 5	; 18
	asm volatile("nop");
 1f0:	00 00       	nop
	asm volatile("nop");
 1f2:	00 00       	nop
	asm volatile("nop");
 1f4:	00 00       	nop
	LCDControlPort &= ~ (1 << LightSwitch);
 1f6:	95 98       	cbi	0x12, 5	; 18
}
 1f8:	08 95       	ret

000001fa <CheckLCDBusyOrNot>:
	}
}

void CheckLCDBusyOrNot()
{
	LCDDataDirection = 0;
 1fa:	14 ba       	out	0x14, r1	; 20
	
	
	LCDControlPort |= 1 << ReadWrite;
 1fc:	97 9a       	sbi	0x12, 7	; 18
	LCDControlPort &= ~ (1 << BiPolarMood);
 1fe:	92 98       	cbi	0x12, 2	; 18
	
	while(LCDPort >= 0x80 ) // D7 PORTB PIN7 is 1 or 0 // 0b10000000 == 0x80
 200:	af 9b       	sbis	0x15, 7	; 21
 202:	04 c0       	rjmp	.+8      	; 0x20c <CheckLCDBusyOrNot+0x12>
	{
		PeekABoo();
 204:	0e 94 f7 00 	call	0x1ee	; 0x1ee <PeekABoo>
	
	
	LCDControlPort |= 1 << ReadWrite;
	LCDControlPort &= ~ (1 << BiPolarMood);
	
	while(LCDPort >= 0x80 ) // D7 PORTB PIN7 is 1 or 0 // 0b10000000 == 0x80
 208:	af 99       	sbic	0x15, 7	; 21
 20a:	fc cf       	rjmp	.-8      	; 0x204 <CheckLCDBusyOrNot+0xa>
	{
		PeekABoo();
	}
	
	LCDDataDirection = 0xff; // mean 0b11111111;
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	84 bb       	out	0x14, r24	; 20
}
 210:	08 95       	ret

00000212 <SendACommand>:
	asm volatile("nop");
	LCDControlPort &= ~ (1 << LightSwitch);
}

void SendACommand(unsigned char command)
{
 212:	1f 93       	push	r17
 214:	18 2f       	mov	r17, r24
	CheckLCDBusyOrNot();
 216:	0e 94 fd 00 	call	0x1fa	; 0x1fa <CheckLCDBusyOrNot>
	
	LCDPort = command;
 21a:	15 bb       	out	0x15, r17	; 21
	
	LCDControlPort &=  ~( (1 << ReadWrite) | (1 << BiPolarMood) );
 21c:	82 b3       	in	r24, 0x12	; 18
 21e:	8b 77       	andi	r24, 0x7B	; 123
 220:	82 bb       	out	0x12, r24	; 18
	
	PeekABoo();
 222:	0e 94 f7 00 	call	0x1ee	; 0x1ee <PeekABoo>
	LCDPort = 0;
 226:	15 ba       	out	0x15, r1	; 21
}
 228:	1f 91       	pop	r17
 22a:	08 95       	ret

0000022c <SendACharacter>:



void SendACharacter(unsigned char character)
{
 22c:	1f 93       	push	r17
 22e:	18 2f       	mov	r17, r24
	CheckLCDBusyOrNot();
 230:	0e 94 fd 00 	call	0x1fa	; 0x1fa <CheckLCDBusyOrNot>
	
	LCDPort = character;
 234:	15 bb       	out	0x15, r17	; 21
	
	LCDControlPort &=  ~(1 << ReadWrite);
 236:	97 98       	cbi	0x12, 7	; 18
	LCDControlPort |= 1 << BiPolarMood;
 238:	92 9a       	sbi	0x12, 2	; 18
	
	PeekABoo();
 23a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <PeekABoo>
	LCDPort = 0;
 23e:	15 ba       	out	0x15, r1	; 21
}
 240:	1f 91       	pop	r17
 242:	08 95       	ret

00000244 <SendString>:

void SendString(char *Str)
{
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	ec 01       	movw	r28, r24
	while(*Str > 0)
 24a:	88 81       	ld	r24, Y
 24c:	88 23       	and	r24, r24
 24e:	31 f0       	breq	.+12     	; 0x25c <SendString+0x18>
	
	PeekABoo();
	LCDPort = 0;
}

void SendString(char *Str)
 250:	21 96       	adiw	r28, 0x01	; 1
{
	while(*Str > 0)
	{
		SendACharacter(*Str++);
 252:	0e 94 16 01 	call	0x22c	; 0x22c <SendACharacter>
	LCDPort = 0;
}

void SendString(char *Str)
{
	while(*Str > 0)
 256:	89 91       	ld	r24, Y+
 258:	88 23       	and	r24, r24
 25a:	d9 f7       	brne	.-10     	; 0x252 <SendString+0xe>
	{
		SendACharacter(*Str++);
	}
}
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <blink>:

void blink()
{
	PORTB ^= 1 << PINB0;
 262:	98 b3       	in	r25, 0x18	; 24
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	98 27       	eor	r25, r24
 268:	98 bb       	out	0x18, r25	; 24
 26a:	e7 ea       	ldi	r30, 0xA7	; 167
 26c:	f1 e6       	ldi	r31, 0x61	; 97
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <blink+0xc>
 272:	00 c0       	rjmp	.+0      	; 0x274 <blink+0x12>
 274:	00 00       	nop
	_delay_ms(100);	
	PORTB ^= 1 << PINB0;
 276:	98 b3       	in	r25, 0x18	; 24
 278:	89 27       	eor	r24, r25
 27a:	88 bb       	out	0x18, r24	; 24
 27c:	87 ea       	ldi	r24, 0xA7	; 167
 27e:	91 e6       	ldi	r25, 0x61	; 97
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <blink+0x1e>
 284:	00 c0       	rjmp	.+0      	; 0x286 <blink+0x24>
 286:	00 00       	nop
	_delay_ms(100);	
}
 288:	08 95       	ret

0000028a <main>:
	//LEDDirectionRegister = 0b00000001;// 1 << PINB0;
	//PORTB |= 1 << PINB0;
	
	//Initialize the Keypad Data Direction And Port Settings
	
	KeypadDirectionRegister = 0b00001111;
 28a:	8f e0       	ldi	r24, 0x0F	; 15
 28c:	8a bb       	out	0x1a, r24	; 26
	KeypadPortControl = 0b11110000;
 28e:	80 ef       	ldi	r24, 0xF0	; 240
 290:	8b bb       	out	0x1b, r24	; 27
	
	
	
	DDRB |= 1 << PINB0;
 292:	b8 9a       	sbi	0x17, 0	; 23
	DDRB &= ~(1 << PINB1);
 294:	b9 98       	cbi	0x17, 1	; 23
	
	PORTB |= 1 << PINB1;
 296:	c1 9a       	sbi	0x18, 1	; 24
	
	LCDControlDataDirection |= (1 << LightSwitch) | (1 << ReadWrite) | (1 << BiPolarMood);
 298:	81 b3       	in	r24, 0x11	; 17
 29a:	84 6a       	ori	r24, 0xA4	; 164
 29c:	81 bb       	out	0x11, r24	; 17
 29e:	85 ea       	ldi	r24, 0xA5	; 165
 2a0:	9e e0       	ldi	r25, 0x0E	; 14
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <main+0x18>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <main+0x1e>
 2a8:	00 00       	nop
	
	_delay_ms(15);
	SendACommand(0x01);//clear the screen
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 09 01 	call	0x212	; 0x212 <SendACommand>
 2b0:	83 ef       	ldi	r24, 0xF3	; 243
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <main+0x2a>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <main+0x30>
 2ba:	00 00       	nop
	_delay_ms(2);
	SendACommand(0x38);
 2bc:	88 e3       	ldi	r24, 0x38	; 56
 2be:	0e 94 09 01 	call	0x212	; 0x212 <SendACommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c2:	90 e1       	ldi	r25, 0x10	; 16
 2c4:	9a 95       	dec	r25
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <main+0x3a>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <main+0x40>
	_delay_us(50);//MicroSeconds
	SendACommand(0b00000000);
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	0e 94 09 01 	call	0x212	; 0x212 <SendACommand>
 2d0:	80 e1       	ldi	r24, 0x10	; 16
 2d2:	8a 95       	dec	r24
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <main+0x48>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <main+0x4e>
	SendACharacter(0x63); //c
	SendACharacter(0x6F); //o
	SendACharacter(0x6D); //m
	*/
	
	SendString("Welcome to AVR Programming");
 2d8:	80 e6       	ldi	r24, 0x60	; 96
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 22 01 	call	0x244	; 0x244 <SendString>
	//SendACommand(0x01);//clear the screen
	
    while(1)
    {
		
		KeypadScan();
 2e0:	0e 94 49 00 	call	0x92	; 0x92 <KeypadScan>
		
		
		ScanButton();
 2e4:	0e 94 ce 00 	call	0x19c	; 0x19c <ScanButton>
 2e8:	fb cf       	rjmp	.-10     	; 0x2e0 <main+0x56>

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>
