
433Mhz_Rx_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000020e  000002a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  000002a4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000a07  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000ae  00000000  00000000  00000a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000003fa  00000000  00000000  00000ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001bb  00000000  00000000  00000ecf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000047b  00000000  00000000  0000108a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000a0  00000000  00000000  00001508  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000199  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000b6  00000000  00000000  00001741  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  000017f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <main>
  8a:	0c 94 05 01 	jmp	0x20a	; 0x20a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setPWMOutput>:

int NoCommand = 0;

void setPWMOutput(int duty)
{
	OCR0 = duty;
  92:	8c bf       	out	0x3c, r24	; 60
}
  94:	08 95       	ret

00000096 <wait>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  96:	80 e8       	ldi	r24, 0x80	; 128
  98:	9c e0       	ldi	r25, 0x0C	; 12
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <wait+0x4>

void wait()
{
	_delay_loop_2(3200);
}
  9e:	08 95       	ret

000000a0 <USART_Init>:


void USART_Init(void)
{
	//Set baud rate
	UBRRL=(uint8_t)UBRRVAL;		//low byte
  a0:	83 e3       	ldi	r24, 0x33	; 51
  a2:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);	//high byte
  a4:	10 bc       	out	0x20, r1	; 32
	//Set data frame format: asynchronous mode,no parity, 1 stop bit, 8 bit size
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|
  a6:	86 e8       	ldi	r24, 0x86	; 134
  a8:	80 bd       	out	0x20, r24	; 32
		(0<<USBS)|(0<<UCSZ2)|(1<<UCSZ1)|(1<<UCSZ0);	
	//Enable Transmitter and Receiver and Interrupt on receive complete
	UCSRB=(1<<RXEN);//|(1<<RXCIE);//|(1<<TXEN);
  aa:	80 e1       	ldi	r24, 0x10	; 16
  ac:	8a b9       	out	0x0a, r24	; 10
	//enable global interrupts

}
  ae:	08 95       	ret

000000b0 <USART_vReceiveByte>:
uint8_t USART_vReceiveByte(void)
{
    // Wait until a byte has been received
    while((UCSRA&(1<<RXC)) == 0);
  b0:	5f 9b       	sbis	0x0b, 7	; 11
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <USART_vReceiveByte>
    // Return received data
    return UDR;
  b4:	8c b1       	in	r24, 0x0c	; 12
}
  b6:	08 95       	ret

000000b8 <looping>:
void looping()
{
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
	//define variables
	uint8_t raddress, data, chk;//transmitter address
	//receive destination address
	raddress=USART_vReceiveByte();
  bc:	0e 94 58 00 	call	0xb0	; 0xb0 <USART_vReceiveByte>
  c0:	08 2f       	mov	r16, r24
	//receive data
	data=USART_vReceiveByte();
  c2:	0e 94 58 00 	call	0xb0	; 0xb0 <USART_vReceiveByte>
  c6:	18 2f       	mov	r17, r24
	//receive checksum
	chk=USART_vReceiveByte();
  c8:	0e 94 58 00 	call	0xb0	; 0xb0 <USART_vReceiveByte>
	//compare received checksum with calculated
	if(chk==(raddress+data))//if match perform operations
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	20 2f       	mov	r18, r16
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	21 0f       	add	r18, r17
  d4:	31 1d       	adc	r19, r1
  d6:	82 17       	cp	r24, r18
  d8:	93 07       	cpc	r25, r19
  da:	59 f5       	brne	.+86     	; 0x132 <looping+0x7a>
	{
		//if transmitter address match
		if(raddress==RADDR)
  dc:	04 34       	cpi	r16, 0x44	; 68
  de:	f1 f5       	brne	.+124    	; 0x15c <looping+0xa4>
			{
				if( data == LEDON1)
  e0:	11 31       	cpi	r17, 0x11	; 17
  e2:	11 f4       	brne	.+4      	; 0xe8 <looping+0x30>
				{
					//PORTC&=~(1<<0);//LED ON
					PORTC |= 1 << PINC0;
  e4:	a8 9a       	sbi	0x15, 0	; 21
  e6:	3a c0       	rjmp	.+116    	; 0x15c <looping+0xa4>
				}
				else if(data == LEDOFF1)
  e8:	13 33       	cpi	r17, 0x33	; 51
  ea:	11 f4       	brne	.+4      	; 0xf0 <looping+0x38>
				{
					//PORTC|=(1<<0);//LED OFF
					PORTC &= ~(1 << PINC0);
  ec:	a8 98       	cbi	0x15, 0	; 21
  ee:	36 c0       	rjmp	.+108    	; 0x15c <looping+0xa4>
				}
				else if(data == LEDON2)
  f0:	12 32       	cpi	r17, 0x22	; 34
  f2:	11 f4       	brne	.+4      	; 0xf8 <looping+0x40>
				{
					PORTC |= 1 << PINC1;
  f4:	a9 9a       	sbi	0x15, 1	; 21
  f6:	32 c0       	rjmp	.+100    	; 0x15c <looping+0xa4>
				}
				else if(data == LEDOFF2)
  f8:	15 35       	cpi	r17, 0x55	; 85
  fa:	11 f4       	brne	.+4      	; 0x100 <looping+0x48>
				{
					PORTC &= ~ (1 << PINC1);
  fc:	a9 98       	cbi	0x15, 1	; 21
  fe:	2e c0       	rjmp	.+92     	; 0x15c <looping+0xa4>
				}
				else if(data == LEDON3)
 100:	16 36       	cpi	r17, 0x66	; 102
 102:	11 f4       	brne	.+4      	; 0x108 <looping+0x50>
				{
					PORTA |= 1 << PINA7;
 104:	df 9a       	sbi	0x1b, 7	; 27
 106:	2a c0       	rjmp	.+84     	; 0x15c <looping+0xa4>
				}
				else if(data == LEDOFF3)
 108:	18 38       	cpi	r17, 0x88	; 136
 10a:	11 f4       	brne	.+4      	; 0x110 <looping+0x58>
				{
					PORTA &= ~ (1 << PINA7);
 10c:	df 98       	cbi	0x1b, 7	; 27
 10e:	26 c0       	rjmp	.+76     	; 0x15c <looping+0xa4>
				}
				else if(data == LEDON4)
 110:	17 37       	cpi	r17, 0x77	; 119
 112:	11 f4       	brne	.+4      	; 0x118 <looping+0x60>
				{
					PORTC |= 1 << PINC6;
 114:	ae 9a       	sbi	0x15, 6	; 21
 116:	22 c0       	rjmp	.+68     	; 0x15c <looping+0xa4>
				}
				else if(data == LEDOFF4)
 118:	19 39       	cpi	r17, 0x99	; 153
 11a:	11 f4       	brne	.+4      	; 0x120 <looping+0x68>
				{
					PORTC &= ~ (1 << PINC6);
 11c:	ae 98       	cbi	0x15, 6	; 21
 11e:	1e c0       	rjmp	.+60     	; 0x15c <looping+0xa4>
				}
				else
				{
					//blink led as error
					PORTD |=   1 << PIND6;//LED OFF
 120:	96 9a       	sbi	0x12, 6	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	83 ec       	ldi	r24, 0xC3	; 195
 124:	99 e0       	ldi	r25, 0x09	; 9
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <looping+0x6e>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <looping+0x74>
 12c:	00 00       	nop
					_delay_ms(10);
					PORTD &= ~(1<< PIND6);//LED ON	
 12e:	96 98       	cbi	0x12, 6	; 18
 130:	15 c0       	rjmp	.+42     	; 0x15c <looping+0xa4>
		//C0
		//C1
		//A7
		//C6
		
		NoCommand++;
 132:	80 91 62 00 	lds	r24, 0x0062
 136:	90 91 63 00 	lds	r25, 0x0063
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	90 93 63 00 	sts	0x0063, r25
 140:	80 93 62 00 	sts	0x0062, r24
		if(NoCommand > 300)
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	8d 32       	cpi	r24, 0x2D	; 45
 148:	92 07       	cpc	r25, r18
 14a:	44 f0       	brlt	.+16     	; 0x15c <looping+0xa4>
		{
			PORTC &= ~(1 << PINC0);
 14c:	a8 98       	cbi	0x15, 0	; 21
			PORTC &= ~(1 << PINC1);
 14e:	a9 98       	cbi	0x15, 1	; 21
			PORTA &= ~(1 << PINA7);
 150:	df 98       	cbi	0x1b, 7	; 27
			PORTC &= ~(1 << PINC6);
 152:	ae 98       	cbi	0x15, 6	; 21
			NoCommand = 0;
 154:	10 92 63 00 	sts	0x0063, r1
 158:	10 92 62 00 	sts	0x0062, r1
		}
		
		
	}
}
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	08 95       	ret

00000162 <turnOnSign>:

void turnOnSign()
{
	//PINC0
	PORTC |= 1 << PINC0;
 162:	a8 9a       	sbi	0x15, 0	; 21
 164:	8f e9       	ldi	r24, 0x9F	; 159
 166:	96 e8       	ldi	r25, 0x86	; 134
 168:	a1 e0       	ldi	r26, 0x01	; 1
 16a:	81 50       	subi	r24, 0x01	; 1
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	a0 40       	sbci	r26, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <turnOnSign+0x8>
 172:	00 c0       	rjmp	.+0      	; 0x174 <turnOnSign+0x12>
 174:	00 00       	nop
	_delay_ms(500);
	PORTC &= ~(1 << PINC0);
 176:	a8 98       	cbi	0x15, 0	; 21
	
	//PINC1
	PORTC |= 1 << PINC1;
 178:	a9 9a       	sbi	0x15, 1	; 21
 17a:	8f e9       	ldi	r24, 0x9F	; 159
 17c:	96 e8       	ldi	r25, 0x86	; 134
 17e:	a1 e0       	ldi	r26, 0x01	; 1
 180:	81 50       	subi	r24, 0x01	; 1
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	a0 40       	sbci	r26, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <turnOnSign+0x1e>
 188:	00 c0       	rjmp	.+0      	; 0x18a <turnOnSign+0x28>
 18a:	00 00       	nop
	_delay_ms(500);
	PORTC &= ~(1 << PINC1);
 18c:	a9 98       	cbi	0x15, 1	; 21
	
	//PINA7
	PORTA |= 1 << PINA7;
 18e:	df 9a       	sbi	0x1b, 7	; 27
 190:	8f e9       	ldi	r24, 0x9F	; 159
 192:	96 e8       	ldi	r25, 0x86	; 134
 194:	a1 e0       	ldi	r26, 0x01	; 1
 196:	81 50       	subi	r24, 0x01	; 1
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	a0 40       	sbci	r26, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <turnOnSign+0x34>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <turnOnSign+0x3e>
 1a0:	00 00       	nop
	_delay_ms(500);
	PORTA &= ~(1 << PINA7);
 1a2:	df 98       	cbi	0x1b, 7	; 27
	
	//PINC6
	PORTC |= 1 << PINC6;
 1a4:	ae 9a       	sbi	0x15, 6	; 21
 1a6:	8f e9       	ldi	r24, 0x9F	; 159
 1a8:	96 e8       	ldi	r25, 0x86	; 134
 1aa:	a1 e0       	ldi	r26, 0x01	; 1
 1ac:	81 50       	subi	r24, 0x01	; 1
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	a0 40       	sbci	r26, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <turnOnSign+0x4a>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <turnOnSign+0x54>
 1b6:	00 00       	nop
	_delay_ms(500);
	PORTC &= ~(1 << PINC6);
 1b8:	ae 98       	cbi	0x15, 6	; 21
	
	//PIND6
	PORTD |= 1 << PIND6;
 1ba:	96 9a       	sbi	0x12, 6	; 18
 1bc:	8f e9       	ldi	r24, 0x9F	; 159
 1be:	96 e8       	ldi	r25, 0x86	; 134
 1c0:	a1 e0       	ldi	r26, 0x01	; 1
 1c2:	81 50       	subi	r24, 0x01	; 1
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	a0 40       	sbci	r26, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <turnOnSign+0x60>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <turnOnSign+0x6a>
 1cc:	00 00       	nop
	_delay_ms(500);
	PORTD &= ~(1 << PIND6);
 1ce:	96 98       	cbi	0x12, 6	; 18
}
 1d0:	08 95       	ret

000001d2 <Main_Init>:
void Main_Init(void)
{
	DDRC |= 1 << PINC0;//Up Button
 1d2:	a0 9a       	sbi	0x14, 0	; 20
	DDRC |= 1 << PINC1;//Down Button
 1d4:	a1 9a       	sbi	0x14, 1	; 20
	
	DDRA |= 1 << PINA7;//Right Button
 1d6:	d7 9a       	sbi	0x1a, 7	; 26
	DDRC |= 1 << PINC6;//Left Button
 1d8:	a6 9a       	sbi	0x14, 6	; 20
	
	DDRD |= 1 << PIND6;//Turn On Sign
 1da:	8e 9a       	sbi	0x11, 6	; 17
	
	DDRB |= 1 << PINB3;//PWM OUTPUT for Enable A And Enable B
 1dc:	bb 9a       	sbi	0x17, 3	; 23
	
	turnOnSign();
 1de:	0e 94 b1 00 	call	0x162	; 0x162 <turnOnSign>
	
	//PORTC|=(1<<0);//LED OFF
	//DDRC=0X001;//define port C pin 0 as output;
	//enable global interrupts
	//sei();
}
 1e2:	08 95       	ret

000001e4 <initPWM>:

void initPWM()
{
	TCCR0 |= 1 << WGM00 | 1 << WGM01 | 1 << CS00 | 1 << COM01;
 1e4:	83 b7       	in	r24, 0x33	; 51
 1e6:	89 66       	ori	r24, 0x69	; 105
 1e8:	83 bf       	out	0x33, r24	; 51
	
	setPWMOutput(PWM_Counter);
 1ea:	80 91 60 00 	lds	r24, 0x0060
 1ee:	90 91 61 00 	lds	r25, 0x0061
 1f2:	0e 94 49 00 	call	0x92	; 0x92 <setPWMOutput>
}	
 1f6:	08 95       	ret

000001f8 <main>:

int main(void)
{
	
	
	Main_Init();
 1f8:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Main_Init>
	initPWM();
 1fc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <initPWM>
	USART_Init();
 200:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Init>
	while(1)
	{
		looping();
 204:	0e 94 5c 00 	call	0xb8	; 0xb8 <looping>
 208:	fd cf       	rjmp	.-6      	; 0x204 <main+0xc>

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
