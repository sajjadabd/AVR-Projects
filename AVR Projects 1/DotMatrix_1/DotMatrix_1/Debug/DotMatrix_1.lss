
DotMatrix_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000004ee  00000582  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800064  00800064  00000586  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000588  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000116  00000000  00000000  00000d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000802  00000000  00000000  00000e21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000209  00000000  00000000  00001623  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000895  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000f0  00000000  00000000  000020c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001bc  00000000  00000000  000021b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000097  00000000  00000000  00002370  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  00002407  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 25 02 	call	0x44a	; 0x44a <main>
  8a:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init>:
int i = 4;
int j = 4;

void init()
{
	DDRA |= 1 << R1;
  92:	d7 9a       	sbi	0x1a, 7	; 26
	DDRA |= 1 << R2;
  94:	d6 9a       	sbi	0x1a, 6	; 26
	DDRA |= 1 << R3;
  96:	d5 9a       	sbi	0x1a, 5	; 26
	DDRA |= 1 << R4;
  98:	d4 9a       	sbi	0x1a, 4	; 26
	DDRA |= 1 << R5;
  9a:	d3 9a       	sbi	0x1a, 3	; 26
	DDRA |= 1 << R6;
  9c:	d2 9a       	sbi	0x1a, 2	; 26
	DDRA |= 1 << R7;
  9e:	d1 9a       	sbi	0x1a, 1	; 26
	DDRA |= 1 << R8;
  a0:	d0 9a       	sbi	0x1a, 0	; 26
	//-----------------------
	DDRB |= 1 << C1;
  a2:	b8 9a       	sbi	0x17, 0	; 23
	DDRB |= 1 << C2;
  a4:	b9 9a       	sbi	0x17, 1	; 23
	DDRB |= 1 << C3;
  a6:	ba 9a       	sbi	0x17, 2	; 23
	DDRB |= 1 << C4;
  a8:	bb 9a       	sbi	0x17, 3	; 23
	DDRB |= 1 << C5;
  aa:	bc 9a       	sbi	0x17, 4	; 23
	DDRB |= 1 << C6;
  ac:	bd 9a       	sbi	0x17, 5	; 23
	DDRB |= 1 << C7;
  ae:	be 9a       	sbi	0x17, 6	; 23
	DDRB |= 1 << C8;
  b0:	bf 9a       	sbi	0x17, 7	; 23
	//------------------------
	PORTB |= 1 << C1;
  b2:	c0 9a       	sbi	0x18, 0	; 24
	PORTB |= 1 << C2;
  b4:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |= 1 << C3;
  b6:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= 1 << C4;
  b8:	c3 9a       	sbi	0x18, 3	; 24
	PORTB |= 1 << C5;
  ba:	c4 9a       	sbi	0x18, 4	; 24
	PORTB |= 1 << C6;
  bc:	c5 9a       	sbi	0x18, 5	; 24
	PORTB |= 1 << C7;
  be:	c6 9a       	sbi	0x18, 6	; 24
	PORTB |= 1 << C8;
  c0:	c7 9a       	sbi	0x18, 7	; 24
	//------------------------	
}
  c2:	08 95       	ret

000000c4 <firstPlay>:
//}

void firstPlay(uint8_t row)
{
	//turn on the first LED
	PORTA |= 1 << row;
  c4:	9b b3       	in	r25, 0x1b	; 27
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <firstPlay+0xc>
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	8a 95       	dec	r24
  d2:	e2 f7       	brpl	.-8      	; 0xcc <firstPlay+0x8>
  d4:	92 2b       	or	r25, r18
  d6:	9b bb       	out	0x1b, r25	; 27
	PORTB &= ~(1 << C1);
  d8:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	87 ea       	ldi	r24, 0xA7	; 167
  dc:	91 e6       	ldi	r25, 0x61	; 97
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <firstPlay+0x1a>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <firstPlay+0x20>
  e4:	00 00       	nop
	_delay_ms(100);
	
	PORTB |= 1 << C1;
  e6:	c0 9a       	sbi	0x18, 0	; 24
	PORTB &= ~(1 << C2);
  e8:	c1 98       	cbi	0x18, 1	; 24
  ea:	87 ea       	ldi	r24, 0xA7	; 167
  ec:	91 e6       	ldi	r25, 0x61	; 97
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <firstPlay+0x2a>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <firstPlay+0x30>
  f4:	00 00       	nop
	_delay_ms(100);
	
	PORTB |= 1 << C2;
  f6:	c1 9a       	sbi	0x18, 1	; 24
	PORTB &= ~(1 << C3);
  f8:	c2 98       	cbi	0x18, 2	; 24
  fa:	87 ea       	ldi	r24, 0xA7	; 167
  fc:	91 e6       	ldi	r25, 0x61	; 97
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <firstPlay+0x3a>
 102:	00 c0       	rjmp	.+0      	; 0x104 <firstPlay+0x40>
 104:	00 00       	nop
	_delay_ms(100);
	
	PORTB |= 1 << C3;
 106:	c2 9a       	sbi	0x18, 2	; 24
	PORTB &= ~(1 << C4);
 108:	c3 98       	cbi	0x18, 3	; 24
 10a:	87 ea       	ldi	r24, 0xA7	; 167
 10c:	91 e6       	ldi	r25, 0x61	; 97
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <firstPlay+0x4a>
 112:	00 c0       	rjmp	.+0      	; 0x114 <firstPlay+0x50>
 114:	00 00       	nop
	_delay_ms(100);
	
	PORTB |= 1 << C4;
 116:	c3 9a       	sbi	0x18, 3	; 24
	PORTB &= ~(1 << C5);
 118:	c4 98       	cbi	0x18, 4	; 24
 11a:	87 ea       	ldi	r24, 0xA7	; 167
 11c:	91 e6       	ldi	r25, 0x61	; 97
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <firstPlay+0x5a>
 122:	00 c0       	rjmp	.+0      	; 0x124 <firstPlay+0x60>
 124:	00 00       	nop
	_delay_ms(100);
	
	PORTB |= 1 << C5;
 126:	c4 9a       	sbi	0x18, 4	; 24
	PORTB &= ~(1 << C6);
 128:	c5 98       	cbi	0x18, 5	; 24
 12a:	87 ea       	ldi	r24, 0xA7	; 167
 12c:	91 e6       	ldi	r25, 0x61	; 97
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <firstPlay+0x6a>
 132:	00 c0       	rjmp	.+0      	; 0x134 <firstPlay+0x70>
 134:	00 00       	nop
	_delay_ms(100);
	
	PORTB |= 1 << C6;
 136:	c5 9a       	sbi	0x18, 5	; 24
	PORTB &= ~(1 << C7);
 138:	c6 98       	cbi	0x18, 6	; 24
 13a:	87 ea       	ldi	r24, 0xA7	; 167
 13c:	91 e6       	ldi	r25, 0x61	; 97
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <firstPlay+0x7a>
 142:	00 c0       	rjmp	.+0      	; 0x144 <firstPlay+0x80>
 144:	00 00       	nop
	_delay_ms(100);
	
	PORTB |= 1 << C7;
 146:	c6 9a       	sbi	0x18, 6	; 24
	PORTB &= ~(1 << C8);
 148:	c7 98       	cbi	0x18, 7	; 24
 14a:	87 ea       	ldi	r24, 0xA7	; 167
 14c:	91 e6       	ldi	r25, 0x61	; 97
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <firstPlay+0x8a>
 152:	00 c0       	rjmp	.+0      	; 0x154 <firstPlay+0x90>
 154:	00 00       	nop
	_delay_ms(100);
	
	PORTB |= (1 << C8);	
 156:	c7 9a       	sbi	0x18, 7	; 24
	PORTA &= ~(1 << row);
 158:	8b b3       	in	r24, 0x1b	; 27
 15a:	20 95       	com	r18
 15c:	28 23       	and	r18, r24
 15e:	2b bb       	out	0x1b, r18	; 27
}
 160:	08 95       	ret

00000162 <secondPlay>:

void secondPlay(uint8_t row)
{
	//turn on the first LED
	PORTB &= ~(1 << row);
 162:	98 b3       	in	r25, 0x18	; 24
 164:	21 e0       	ldi	r18, 0x01	; 1
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <secondPlay+0xc>
 16a:	22 0f       	add	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	8a 95       	dec	r24
 170:	e2 f7       	brpl	.-8      	; 0x16a <secondPlay+0x8>
 172:	82 2f       	mov	r24, r18
 174:	80 95       	com	r24
 176:	98 23       	and	r25, r24
 178:	98 bb       	out	0x18, r25	; 24
	PORTA |= (1 << R1);
 17a:	df 9a       	sbi	0x1b, 7	; 27
 17c:	87 ea       	ldi	r24, 0xA7	; 167
 17e:	91 e6       	ldi	r25, 0x61	; 97
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <secondPlay+0x1e>
 184:	00 c0       	rjmp	.+0      	; 0x186 <secondPlay+0x24>
 186:	00 00       	nop
	_delay_ms(100);
	
	PORTA &= ~(1 << R1);
 188:	df 98       	cbi	0x1b, 7	; 27
	PORTA |= 1 << R2;
 18a:	de 9a       	sbi	0x1b, 6	; 27
 18c:	87 ea       	ldi	r24, 0xA7	; 167
 18e:	91 e6       	ldi	r25, 0x61	; 97
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <secondPlay+0x2e>
 194:	00 c0       	rjmp	.+0      	; 0x196 <secondPlay+0x34>
 196:	00 00       	nop
	_delay_ms(100);
	
	PORTA &= ~(1 << R2);
 198:	de 98       	cbi	0x1b, 6	; 27
	PORTA |= 1 << R3;
 19a:	dd 9a       	sbi	0x1b, 5	; 27
 19c:	87 ea       	ldi	r24, 0xA7	; 167
 19e:	91 e6       	ldi	r25, 0x61	; 97
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <secondPlay+0x3e>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <secondPlay+0x44>
 1a6:	00 00       	nop
	_delay_ms(100);
	
	PORTA &= ~(1 << R3);
 1a8:	dd 98       	cbi	0x1b, 5	; 27
	PORTA |= 1 << R4;
 1aa:	dc 9a       	sbi	0x1b, 4	; 27
 1ac:	87 ea       	ldi	r24, 0xA7	; 167
 1ae:	91 e6       	ldi	r25, 0x61	; 97
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <secondPlay+0x4e>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <secondPlay+0x54>
 1b6:	00 00       	nop
	_delay_ms(100);
	
	PORTA &= ~(1 << R4);
 1b8:	dc 98       	cbi	0x1b, 4	; 27
	PORTA |= 1 << R5;
 1ba:	db 9a       	sbi	0x1b, 3	; 27
 1bc:	87 ea       	ldi	r24, 0xA7	; 167
 1be:	91 e6       	ldi	r25, 0x61	; 97
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <secondPlay+0x5e>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <secondPlay+0x64>
 1c6:	00 00       	nop
	_delay_ms(100);
	
	PORTA &= ~(1 << R5);
 1c8:	db 98       	cbi	0x1b, 3	; 27
	PORTA |= 1 << R6;
 1ca:	da 9a       	sbi	0x1b, 2	; 27
 1cc:	87 ea       	ldi	r24, 0xA7	; 167
 1ce:	91 e6       	ldi	r25, 0x61	; 97
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <secondPlay+0x6e>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <secondPlay+0x74>
 1d6:	00 00       	nop
	_delay_ms(100);
	
	PORTA &= ~(1 << R6);
 1d8:	da 98       	cbi	0x1b, 2	; 27
	PORTA |= 1 << R7;
 1da:	d9 9a       	sbi	0x1b, 1	; 27
 1dc:	87 ea       	ldi	r24, 0xA7	; 167
 1de:	91 e6       	ldi	r25, 0x61	; 97
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <secondPlay+0x7e>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <secondPlay+0x84>
 1e6:	00 00       	nop
	_delay_ms(100);
	
	PORTA &= ~(1 << R7);
 1e8:	d9 98       	cbi	0x1b, 1	; 27
	PORTA |= 1 << R8;
 1ea:	d8 9a       	sbi	0x1b, 0	; 27
 1ec:	87 ea       	ldi	r24, 0xA7	; 167
 1ee:	91 e6       	ldi	r25, 0x61	; 97
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <secondPlay+0x8e>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <secondPlay+0x94>
 1f6:	00 00       	nop
	_delay_ms(100);
	
	PORTA &= ~(1 << R8);	
 1f8:	d8 98       	cbi	0x1b, 0	; 27
	PORTB |= 1 << row;
 1fa:	88 b3       	in	r24, 0x18	; 24
 1fc:	28 2b       	or	r18, r24
 1fe:	28 bb       	out	0x18, r18	; 24
}
 200:	08 95       	ret

00000202 <resetRow>:

void resetRow()
{
	PORTA &= ~(1 << R1);
 202:	df 98       	cbi	0x1b, 7	; 27
	PORTA &= ~(1 << R2);
 204:	de 98       	cbi	0x1b, 6	; 27
	PORTA &= ~(1 << R3);
 206:	dd 98       	cbi	0x1b, 5	; 27
	PORTA &= ~(1 << R4);
 208:	dc 98       	cbi	0x1b, 4	; 27
	PORTA &= ~(1 << R5);
 20a:	db 98       	cbi	0x1b, 3	; 27
	PORTA &= ~(1 << R6);
 20c:	da 98       	cbi	0x1b, 2	; 27
	PORTA &= ~(1 << R7);
 20e:	d9 98       	cbi	0x1b, 1	; 27
	PORTA &= ~(1 << R8);
 210:	d8 98       	cbi	0x1b, 0	; 27
}
 212:	08 95       	ret

00000214 <resetCol>:

void resetCol()
{
	PORTB |= 1 << C1;
 214:	c0 9a       	sbi	0x18, 0	; 24
	PORTB |= 1 << C2;
 216:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |= 1 << C3;
 218:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= 1 << C4;
 21a:	c3 9a       	sbi	0x18, 3	; 24
	PORTB |= 1 << C5;
 21c:	c4 9a       	sbi	0x18, 4	; 24
	PORTB |= 1 << C6;
 21e:	c5 9a       	sbi	0x18, 5	; 24
	PORTB |= 1 << C7;
 220:	c6 9a       	sbi	0x18, 6	; 24
	PORTB |= 1 << C8;
 222:	c7 9a       	sbi	0x18, 7	; 24
}
 224:	08 95       	ret

00000226 <reset>:

void reset()
{
	PORTA &= ~(1 << R1);
 226:	df 98       	cbi	0x1b, 7	; 27
	PORTA &= ~(1 << R2);
 228:	de 98       	cbi	0x1b, 6	; 27
	PORTA &= ~(1 << R3);
 22a:	dd 98       	cbi	0x1b, 5	; 27
	PORTA &= ~(1 << R4);
 22c:	dc 98       	cbi	0x1b, 4	; 27
	PORTA &= ~(1 << R5);
 22e:	db 98       	cbi	0x1b, 3	; 27
	PORTA &= ~(1 << R6);
 230:	da 98       	cbi	0x1b, 2	; 27
	PORTA &= ~(1 << R7);
 232:	d9 98       	cbi	0x1b, 1	; 27
	PORTA &= ~(1 << R8);
 234:	d8 98       	cbi	0x1b, 0	; 27
	
	PORTB |= 1 << C1;
 236:	c0 9a       	sbi	0x18, 0	; 24
	PORTB |= 1 << C2;
 238:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |= 1 << C3;
 23a:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= 1 << C4;
 23c:	c3 9a       	sbi	0x18, 3	; 24
	PORTB |= 1 << C5;
 23e:	c4 9a       	sbi	0x18, 4	; 24
	PORTB |= 1 << C6;
 240:	c5 9a       	sbi	0x18, 5	; 24
	PORTB |= 1 << C7;
 242:	c6 9a       	sbi	0x18, 6	; 24
	PORTB |= 1 << C8;
 244:	c7 9a       	sbi	0x18, 7	; 24
}
 246:	08 95       	ret

00000248 <ScanButtonUp>:

void ScanButtonUp()
{
	
	if(bit_is_clear(PINC, 0))
 248:	98 99       	sbic	0x13, 0	; 19
 24a:	14 c0       	rjmp	.+40     	; 0x274 <ScanButtonUp+0x2c>
	{
		if(pressed1 >= 1000)
 24c:	80 91 64 00 	lds	r24, 0x0064
 250:	90 91 65 00 	lds	r25, 0x0065
 254:	23 e0       	ldi	r18, 0x03	; 3
 256:	88 3e       	cpi	r24, 0xE8	; 232
 258:	92 07       	cpc	r25, r18
 25a:	3c f0       	brlt	.+14     	; 0x26a <ScanButtonUp+0x22>
		{
			pressed1 = 500;
 25c:	84 ef       	ldi	r24, 0xF4	; 244
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	90 93 65 00 	sts	0x0065, r25
 264:	80 93 64 00 	sts	0x0064, r24
 268:	0d c0       	rjmp	.+26     	; 0x284 <ScanButtonUp+0x3c>
		}
		else
		{
			pressed1++;
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	90 93 65 00 	sts	0x0065, r25
 270:	80 93 64 00 	sts	0x0064, r24
		}							
	}	
		
	if(pressed1 >= 400)
 274:	80 91 64 00 	lds	r24, 0x0064
 278:	90 91 65 00 	lds	r25, 0x0065
 27c:	21 e0       	ldi	r18, 0x01	; 1
 27e:	80 39       	cpi	r24, 0x90	; 144
 280:	92 07       	cpc	r25, r18
 282:	a4 f0       	brlt	.+40     	; 0x2ac <ScanButtonUp+0x64>
	{
		if(bit_is_clear(PINC,0))
 284:	98 9b       	sbis	0x13, 0	; 19
 286:	12 c0       	rjmp	.+36     	; 0x2ac <ScanButtonUp+0x64>
			//Do Nothing
		}
		else
		{
			//PORTB ^= 1 << PINB0;
			if( j > 1 )
 288:	80 91 62 00 	lds	r24, 0x0062
 28c:	90 91 63 00 	lds	r25, 0x0063
 290:	82 30       	cpi	r24, 0x02	; 2
 292:	91 05       	cpc	r25, r1
 294:	2c f0       	brlt	.+10     	; 0x2a0 <ScanButtonUp+0x58>
			{
				j-=1;
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	90 93 63 00 	sts	0x0063, r25
 29c:	80 93 62 00 	sts	0x0062, r24
			}
			play();
 2a0:	0e 94 13 02 	call	0x426	; 0x426 <play>
			pressed1 = 0;					
 2a4:	10 92 65 00 	sts	0x0065, r1
 2a8:	10 92 64 00 	sts	0x0064, r1
 2ac:	08 95       	ret

000002ae <ScanButtonDown>:
}

void ScanButtonDown()
{
	
	if(bit_is_clear(PIND, 7))
 2ae:	87 99       	sbic	0x10, 7	; 16
 2b0:	14 c0       	rjmp	.+40     	; 0x2da <ScanButtonDown+0x2c>
	{
		if(pressed2 >= 1000)
 2b2:	80 91 66 00 	lds	r24, 0x0066
 2b6:	90 91 67 00 	lds	r25, 0x0067
 2ba:	23 e0       	ldi	r18, 0x03	; 3
 2bc:	88 3e       	cpi	r24, 0xE8	; 232
 2be:	92 07       	cpc	r25, r18
 2c0:	3c f0       	brlt	.+14     	; 0x2d0 <ScanButtonDown+0x22>
		{
			pressed2 = 500;
 2c2:	84 ef       	ldi	r24, 0xF4	; 244
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	90 93 67 00 	sts	0x0067, r25
 2ca:	80 93 66 00 	sts	0x0066, r24
 2ce:	0d c0       	rjmp	.+26     	; 0x2ea <ScanButtonDown+0x3c>
		}
		else
		{
			pressed2++;
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	90 93 67 00 	sts	0x0067, r25
 2d6:	80 93 66 00 	sts	0x0066, r24
		}							
	}	
		
	if(pressed2 >= 400)
 2da:	80 91 66 00 	lds	r24, 0x0066
 2de:	90 91 67 00 	lds	r25, 0x0067
 2e2:	21 e0       	ldi	r18, 0x01	; 1
 2e4:	80 39       	cpi	r24, 0x90	; 144
 2e6:	92 07       	cpc	r25, r18
 2e8:	a4 f0       	brlt	.+40     	; 0x312 <ScanButtonDown+0x64>
	{
		if(bit_is_clear(PIND,7))
 2ea:	87 9b       	sbis	0x10, 7	; 16
 2ec:	12 c0       	rjmp	.+36     	; 0x312 <ScanButtonDown+0x64>
			//Do Nothing
		}
		else
		{
			//PORTB ^= 1 << PINB0;
			if( j < 8 )
 2ee:	80 91 62 00 	lds	r24, 0x0062
 2f2:	90 91 63 00 	lds	r25, 0x0063
 2f6:	88 30       	cpi	r24, 0x08	; 8
 2f8:	91 05       	cpc	r25, r1
 2fa:	2c f4       	brge	.+10     	; 0x306 <ScanButtonDown+0x58>
			{
				j +=1 ;
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	90 93 63 00 	sts	0x0063, r25
 302:	80 93 62 00 	sts	0x0062, r24
			}
			play();
 306:	0e 94 13 02 	call	0x426	; 0x426 <play>
			pressed2 = 0;					
 30a:	10 92 67 00 	sts	0x0067, r1
 30e:	10 92 66 00 	sts	0x0066, r1
 312:	08 95       	ret

00000314 <ScanButtonRight>:
}

void ScanButtonRight()
{
	
	if(bit_is_clear(PIND, 5))
 314:	85 99       	sbic	0x10, 5	; 16
 316:	14 c0       	rjmp	.+40     	; 0x340 <ScanButtonRight+0x2c>
	{
		if(pressed3 >= 1000)
 318:	80 91 68 00 	lds	r24, 0x0068
 31c:	90 91 69 00 	lds	r25, 0x0069
 320:	23 e0       	ldi	r18, 0x03	; 3
 322:	88 3e       	cpi	r24, 0xE8	; 232
 324:	92 07       	cpc	r25, r18
 326:	3c f0       	brlt	.+14     	; 0x336 <ScanButtonRight+0x22>
		{
			pressed3 = 500;
 328:	84 ef       	ldi	r24, 0xF4	; 244
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	90 93 69 00 	sts	0x0069, r25
 330:	80 93 68 00 	sts	0x0068, r24
 334:	0d c0       	rjmp	.+26     	; 0x350 <ScanButtonRight+0x3c>
		}
		else
		{
			pressed3++;
 336:	01 96       	adiw	r24, 0x01	; 1
 338:	90 93 69 00 	sts	0x0069, r25
 33c:	80 93 68 00 	sts	0x0068, r24
		}							
	}	
		
	if(pressed3 >= 400)
 340:	80 91 68 00 	lds	r24, 0x0068
 344:	90 91 69 00 	lds	r25, 0x0069
 348:	21 e0       	ldi	r18, 0x01	; 1
 34a:	80 39       	cpi	r24, 0x90	; 144
 34c:	92 07       	cpc	r25, r18
 34e:	a4 f0       	brlt	.+40     	; 0x378 <ScanButtonRight+0x64>
	{
		if(bit_is_clear(PIND,5))
 350:	85 9b       	sbis	0x10, 5	; 16
 352:	12 c0       	rjmp	.+36     	; 0x378 <ScanButtonRight+0x64>
			//Do Nothing
		}
		else
		{
			//PORTB ^= 1 << PINB0;
			if(i > 1)
 354:	80 91 60 00 	lds	r24, 0x0060
 358:	90 91 61 00 	lds	r25, 0x0061
 35c:	82 30       	cpi	r24, 0x02	; 2
 35e:	91 05       	cpc	r25, r1
 360:	2c f0       	brlt	.+10     	; 0x36c <ScanButtonRight+0x58>
			{
				i -= 1;
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	90 93 61 00 	sts	0x0061, r25
 368:	80 93 60 00 	sts	0x0060, r24
			}
			play();
 36c:	0e 94 13 02 	call	0x426	; 0x426 <play>
			pressed3 = 0;					
 370:	10 92 69 00 	sts	0x0069, r1
 374:	10 92 68 00 	sts	0x0068, r1
 378:	08 95       	ret

0000037a <ScanButtonLeft>:
}

void ScanButtonLeft()
{
	
	if(bit_is_clear(PIND, 6))
 37a:	86 99       	sbic	0x10, 6	; 16
 37c:	14 c0       	rjmp	.+40     	; 0x3a6 <ScanButtonLeft+0x2c>
	{
		if(pressed4 >= 1000)
 37e:	80 91 6a 00 	lds	r24, 0x006A
 382:	90 91 6b 00 	lds	r25, 0x006B
 386:	23 e0       	ldi	r18, 0x03	; 3
 388:	88 3e       	cpi	r24, 0xE8	; 232
 38a:	92 07       	cpc	r25, r18
 38c:	3c f0       	brlt	.+14     	; 0x39c <ScanButtonLeft+0x22>
		{
			pressed4 = 500;
 38e:	84 ef       	ldi	r24, 0xF4	; 244
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	90 93 6b 00 	sts	0x006B, r25
 396:	80 93 6a 00 	sts	0x006A, r24
 39a:	0d c0       	rjmp	.+26     	; 0x3b6 <ScanButtonLeft+0x3c>
		}
		else
		{
			pressed4++;
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	90 93 6b 00 	sts	0x006B, r25
 3a2:	80 93 6a 00 	sts	0x006A, r24
		}							
	}	
		
	if(pressed4 >= 400)
 3a6:	80 91 6a 00 	lds	r24, 0x006A
 3aa:	90 91 6b 00 	lds	r25, 0x006B
 3ae:	21 e0       	ldi	r18, 0x01	; 1
 3b0:	80 39       	cpi	r24, 0x90	; 144
 3b2:	92 07       	cpc	r25, r18
 3b4:	a4 f0       	brlt	.+40     	; 0x3de <ScanButtonLeft+0x64>
	{
		if(bit_is_clear(PIND,6))
 3b6:	86 9b       	sbis	0x10, 6	; 16
 3b8:	12 c0       	rjmp	.+36     	; 0x3de <ScanButtonLeft+0x64>
		}
		else
		{
			//PORTB ^= 1 << PINB0;
			
			if(i < 8)
 3ba:	80 91 60 00 	lds	r24, 0x0060
 3be:	90 91 61 00 	lds	r25, 0x0061
 3c2:	88 30       	cpi	r24, 0x08	; 8
 3c4:	91 05       	cpc	r25, r1
 3c6:	2c f4       	brge	.+10     	; 0x3d2 <ScanButtonLeft+0x58>
			{
				i +=1 ;
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	90 93 61 00 	sts	0x0061, r25
 3ce:	80 93 60 00 	sts	0x0060, r24
			}
			play();
 3d2:	0e 94 13 02 	call	0x426	; 0x426 <play>
			pressed4 = 0;					
 3d6:	10 92 6b 00 	sts	0x006B, r1
 3da:	10 92 6a 00 	sts	0x006A, r1
 3de:	08 95       	ret

000003e0 <turnOnRow>:
		}
	}
}

void turnOnRow(uint8_t row)
{
 3e0:	1f 93       	push	r17
 3e2:	18 2f       	mov	r17, r24
	resetRow();
 3e4:	0e 94 01 01 	call	0x202	; 0x202 <resetRow>
	PORTA |= 1 << row;
 3e8:	4b b3       	in	r20, 0x1b	; 27
 3ea:	21 e0       	ldi	r18, 0x01	; 1
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	c9 01       	movw	r24, r18
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <turnOnRow+0x16>
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	1a 95       	dec	r17
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <turnOnRow+0x12>
 3fa:	84 2b       	or	r24, r20
 3fc:	8b bb       	out	0x1b, r24	; 27
}
 3fe:	1f 91       	pop	r17
 400:	08 95       	ret

00000402 <turnOffCol>:

void turnOffCol(uint8_t col)
{
 402:	1f 93       	push	r17
 404:	18 2f       	mov	r17, r24
	resetCol();
 406:	0e 94 0a 01 	call	0x214	; 0x214 <resetCol>
	PORTB &= ~(1 << col);
 40a:	48 b3       	in	r20, 0x18	; 24
 40c:	21 e0       	ldi	r18, 0x01	; 1
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	c9 01       	movw	r24, r18
 412:	02 c0       	rjmp	.+4      	; 0x418 <turnOffCol+0x16>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	1a 95       	dec	r17
 41a:	e2 f7       	brpl	.-8      	; 0x414 <turnOffCol+0x12>
 41c:	80 95       	com	r24
 41e:	84 23       	and	r24, r20
 420:	88 bb       	out	0x18, r24	; 24
}
 422:	1f 91       	pop	r17
 424:	08 95       	ret

00000426 <play>:

void play()
{
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
	int thisI,thisJ;
	thisI = i-1;
	thisJ = j-1;
 42a:	c0 91 62 00 	lds	r28, 0x0062
 42e:	d0 91 63 00 	lds	r29, 0x0063
 432:	21 97       	sbiw	r28, 0x01	; 1
}

void play()
{
	int thisI,thisJ;
	thisI = i-1;
 434:	80 91 60 00 	lds	r24, 0x0060
	thisJ = j-1;
	turnOnRow(thisI);
 438:	81 50       	subi	r24, 0x01	; 1
 43a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <turnOnRow>
	turnOffCol(thisJ);
 43e:	8c 2f       	mov	r24, r28
 440:	0e 94 01 02 	call	0x402	; 0x402 <turnOffCol>
	
}
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <main>:

int main(void)
{
	init();
 44a:	0e 94 49 00 	call	0x92	; 0x92 <init>
	
	firstPlay(R1);
 44e:	87 e0       	ldi	r24, 0x07	; 7
 450:	0e 94 62 00 	call	0xc4	; 0xc4 <firstPlay>
	firstPlay(R2);
 454:	86 e0       	ldi	r24, 0x06	; 6
 456:	0e 94 62 00 	call	0xc4	; 0xc4 <firstPlay>
	firstPlay(R3);
 45a:	85 e0       	ldi	r24, 0x05	; 5
 45c:	0e 94 62 00 	call	0xc4	; 0xc4 <firstPlay>
	firstPlay(R4);
 460:	84 e0       	ldi	r24, 0x04	; 4
 462:	0e 94 62 00 	call	0xc4	; 0xc4 <firstPlay>
	firstPlay(R5);
 466:	83 e0       	ldi	r24, 0x03	; 3
 468:	0e 94 62 00 	call	0xc4	; 0xc4 <firstPlay>
	firstPlay(R6);
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	0e 94 62 00 	call	0xc4	; 0xc4 <firstPlay>
	firstPlay(R7);
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	0e 94 62 00 	call	0xc4	; 0xc4 <firstPlay>
	firstPlay(R8);
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	0e 94 62 00 	call	0xc4	; 0xc4 <firstPlay>
 47e:	8f e3       	ldi	r24, 0x3F	; 63
 480:	9d e0       	ldi	r25, 0x0D	; 13
 482:	a3 e0       	ldi	r26, 0x03	; 3
 484:	81 50       	subi	r24, 0x01	; 1
 486:	90 40       	sbci	r25, 0x00	; 0
 488:	a0 40       	sbci	r26, 0x00	; 0
 48a:	e1 f7       	brne	.-8      	; 0x484 <__stack+0x25>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <__stack+0x2f>
 48e:	00 00       	nop
	//--------------------------
	_delay_ms(1000);
	reset();
 490:	0e 94 13 01 	call	0x226	; 0x226 <reset>
	//--------------------------
	secondPlay(C1);
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	0e 94 b1 00 	call	0x162	; 0x162 <secondPlay>
	secondPlay(C2);
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	0e 94 b1 00 	call	0x162	; 0x162 <secondPlay>
	secondPlay(C3);
 4a0:	82 e0       	ldi	r24, 0x02	; 2
 4a2:	0e 94 b1 00 	call	0x162	; 0x162 <secondPlay>
	secondPlay(C4);
 4a6:	83 e0       	ldi	r24, 0x03	; 3
 4a8:	0e 94 b1 00 	call	0x162	; 0x162 <secondPlay>
	secondPlay(C5);
 4ac:	84 e0       	ldi	r24, 0x04	; 4
 4ae:	0e 94 b1 00 	call	0x162	; 0x162 <secondPlay>
	secondPlay(C6);
 4b2:	85 e0       	ldi	r24, 0x05	; 5
 4b4:	0e 94 b1 00 	call	0x162	; 0x162 <secondPlay>
	secondPlay(C7);
 4b8:	86 e0       	ldi	r24, 0x06	; 6
 4ba:	0e 94 b1 00 	call	0x162	; 0x162 <secondPlay>
	secondPlay(C8);
 4be:	87 e0       	ldi	r24, 0x07	; 7
 4c0:	0e 94 b1 00 	call	0x162	; 0x162 <secondPlay>
	
	DDRC &= ~(1 << PINC0);//Up
 4c4:	a0 98       	cbi	0x14, 0	; 20
	DDRD &= ~(1 << PIND7);//Down
 4c6:	8f 98       	cbi	0x11, 7	; 17
	DDRD &= ~(1 << PIND5);//Right
 4c8:	8d 98       	cbi	0x11, 5	; 17
	DDRD &= ~(1 << PIND6);//Left
 4ca:	8e 98       	cbi	0x11, 6	; 17
	
	PORTC |= 1 << PINC0;
 4cc:	a8 9a       	sbi	0x15, 0	; 21
	PORTD |= 1 << PIND7;
 4ce:	97 9a       	sbi	0x12, 7	; 18
	PORTD |= 1 << PIND5;
 4d0:	95 9a       	sbi	0x12, 5	; 18
	PORTD |= 1 << PIND6;
 4d2:	96 9a       	sbi	0x12, 6	; 18
		////Do That
	//}				
	while(1)
	{
		//TODO:: Please write your application code 
		ScanButtonUp();
 4d4:	0e 94 24 01 	call	0x248	; 0x248 <ScanButtonUp>
		ScanButtonDown();
 4d8:	0e 94 57 01 	call	0x2ae	; 0x2ae <ScanButtonDown>
		ScanButtonRight();
 4dc:	0e 94 8a 01 	call	0x314	; 0x314 <ScanButtonRight>
		ScanButtonLeft();
 4e0:	0e 94 bd 01 	call	0x37a	; 0x37a <ScanButtonLeft>
		
		play();
 4e4:	0e 94 13 02 	call	0x426	; 0x426 <play>
 4e8:	f5 cf       	rjmp	.-22     	; 0x4d4 <__stack+0x75>

000004ea <_exit>:
 4ea:	f8 94       	cli

000004ec <__stop_program>:
 4ec:	ff cf       	rjmp	.-2      	; 0x4ec <__stop_program>
