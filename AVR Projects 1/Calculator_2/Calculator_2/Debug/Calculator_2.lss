
Calculator_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00000c8a  00000d1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080009e  0080009e  00000d5c  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00000d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000183  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00001833  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000012d  00000000  00000000  00001853  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000620  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000242  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000999  00000000  00000000  000021e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000b0  00000000  00000000  00002b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000211  00000000  00000000  00002c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001ac  00000000  00000000  00002e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  00002fe9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e8       	ldi	r30, 0x8A	; 138
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 39       	cpi	r26, 0x9E	; 158
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e9       	ldi	r26, 0x9E	; 158
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3a       	cpi	r26, 0xAB	; 171
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b5 05 	call	0xb6a	; 0xb6a <main>
  8a:	0c 94 43 06 	jmp	0xc86	; 0xc86 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Peek_A_Boo>:

	DataDir_MrLCDsCrib = 0xFF; //0xFF means 0b11111111
}
void Peek_A_Boo()
{
	MrLCDsControl |= 1<<LightSwitch;
  92:	95 9a       	sbi	0x12, 5	; 18
	asm volatile ("nop");
  94:	00 00       	nop
	asm volatile ("nop");
  96:	00 00       	nop
	MrLCDsControl &= ~1<<LightSwitch;
  98:	82 b3       	in	r24, 0x12	; 18
  9a:	80 7c       	andi	r24, 0xC0	; 192
  9c:	82 bb       	out	0x12, r24	; 18
}
  9e:	08 95       	ret

000000a0 <Check_IF_MrLCD_isBusy>:
	}
}

void Check_IF_MrLCD_isBusy()
{
	DataDir_MrLCDsCrib = 0;
  a0:	17 ba       	out	0x17, r1	; 23
	MrLCDsControl |= 1<<ReadWrite;
  a2:	97 9a       	sbi	0x12, 7	; 18
	MrLCDsControl &= ~1<<BiPolarMood;
  a4:	82 b3       	in	r24, 0x12	; 18
  a6:	88 7f       	andi	r24, 0xF8	; 248
  a8:	82 bb       	out	0x12, r24	; 18

	while (MrLCDsCrib >= 0x80)
  aa:	c7 9b       	sbis	0x18, 7	; 24
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <Check_IF_MrLCD_isBusy+0x16>
	{
	Peek_A_Boo();
  ae:	0e 94 49 00 	call	0x92	; 0x92 <Peek_A_Boo>
{
	DataDir_MrLCDsCrib = 0;
	MrLCDsControl |= 1<<ReadWrite;
	MrLCDsControl &= ~1<<BiPolarMood;

	while (MrLCDsCrib >= 0x80)
  b2:	c7 99       	sbic	0x18, 7	; 24
  b4:	fc cf       	rjmp	.-8      	; 0xae <Check_IF_MrLCD_isBusy+0xe>
	{
	Peek_A_Boo();
	}

	DataDir_MrLCDsCrib = 0xFF; //0xFF means 0b11111111
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	87 bb       	out	0x17, r24	; 23
}
  ba:	08 95       	ret

000000bc <Send_A_Command>:
	asm volatile ("nop");
	MrLCDsControl &= ~1<<LightSwitch;
}

void Send_A_Command(unsigned char command)
{
  bc:	1f 93       	push	r17
  be:	18 2f       	mov	r17, r24
	Check_IF_MrLCD_isBusy();
  c0:	0e 94 50 00 	call	0xa0	; 0xa0 <Check_IF_MrLCD_isBusy>
	MrLCDsCrib = command;
  c4:	18 bb       	out	0x18, r17	; 24
	MrLCDsControl &= ~ ((1<<ReadWrite)|(1<<BiPolarMood));
  c6:	82 b3       	in	r24, 0x12	; 18
  c8:	8b 77       	andi	r24, 0x7B	; 123
  ca:	82 bb       	out	0x12, r24	; 18
	Peek_A_Boo();
  cc:	0e 94 49 00 	call	0x92	; 0x92 <Peek_A_Boo>
	MrLCDsCrib = 0;
  d0:	18 ba       	out	0x18, r1	; 24
}
  d2:	1f 91       	pop	r17
  d4:	08 95       	ret

000000d6 <cls>:
	Send_A_Command(0x80 + firstColumnPosition[y] + x);
}

void cls()
{
	Send_A_Command(0x01); //Clear Screen 0x01 = 00000001
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 5e 00 	call	0xbc	; 0xbc <Send_A_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	83 ef       	ldi	r24, 0xF3	; 243
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <cls+0xa>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <cls+0x10>
  e6:	00 00       	nop
	_delay_ms(2);
}
  e8:	08 95       	ret

000000ea <GotoLocation>:

char firstColumnPosition[4] = {0,64,20,84};

void GotoLocation(uint8_t x, uint8_t y)
{
	Send_A_Command(0x80 + firstColumnPosition[y] + x);
  ea:	80 58       	subi	r24, 0x80	; 128
  ec:	e6 2f       	mov	r30, r22
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	e8 56       	subi	r30, 0x68	; 104
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	90 81       	ld	r25, Z
  f6:	89 0f       	add	r24, r25
  f8:	0e 94 5e 00 	call	0xbc	; 0xbc <Send_A_Command>
}
  fc:	08 95       	ret

000000fe <Send_A_Character>:
	Peek_A_Boo();
	MrLCDsCrib = 0;
}

void Send_A_Character(unsigned char character)
{
  fe:	1f 93       	push	r17
 100:	18 2f       	mov	r17, r24
	Check_IF_MrLCD_isBusy();
 102:	0e 94 50 00 	call	0xa0	; 0xa0 <Check_IF_MrLCD_isBusy>
	MrLCDsCrib = character;
 106:	18 bb       	out	0x18, r17	; 24
	MrLCDsControl &= ~ (1<<ReadWrite);
 108:	97 98       	cbi	0x12, 7	; 18
	MrLCDsControl |= 1<<BiPolarMood;
 10a:	92 9a       	sbi	0x12, 2	; 18
	Peek_A_Boo();
 10c:	0e 94 49 00 	call	0x92	; 0x92 <Peek_A_Boo>
	MrLCDsCrib = 0;
 110:	18 ba       	out	0x18, r1	; 24
}
 112:	1f 91       	pop	r17
 114:	08 95       	ret

00000116 <Send_A_String>:

void Send_A_String(char *StringOfCharacters)
{
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	ec 01       	movw	r28, r24
	while(*StringOfCharacters > 0)
 11c:	88 81       	ld	r24, Y
 11e:	88 23       	and	r24, r24
 120:	31 f0       	breq	.+12     	; 0x12e <Send_A_String+0x18>
	MrLCDsControl |= 1<<BiPolarMood;
	Peek_A_Boo();
	MrLCDsCrib = 0;
}

void Send_A_String(char *StringOfCharacters)
 122:	21 96       	adiw	r28, 0x01	; 1
{
	while(*StringOfCharacters > 0)
	{
		Send_A_Character(*StringOfCharacters++);
 124:	0e 94 7f 00 	call	0xfe	; 0xfe <Send_A_Character>
	MrLCDsCrib = 0;
}

void Send_A_String(char *StringOfCharacters)
{
	while(*StringOfCharacters > 0)
 128:	89 91       	ld	r24, Y+
 12a:	88 23       	and	r24, r24
 12c:	d9 f7       	brne	.-10     	; 0x124 <Send_A_String+0xe>
	{
		Send_A_Character(*StringOfCharacters++);
	}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <DO>:
int result = 0;

int nextOperation = 0;

void DO()
{
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	df 93       	push	r29
 13a:	cf 93       	push	r28
 13c:	00 d0       	rcall	.+0      	; 0x13e <DO+0xa>
 13e:	00 d0       	rcall	.+0      	; 0x140 <DO+0xc>
 140:	0f 92       	push	r0
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
	
	if(nextOperation == 1)
 146:	80 91 a9 00 	lds	r24, 0x00A9
 14a:	90 91 aa 00 	lds	r25, 0x00AA
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	91 05       	cpc	r25, r1
 152:	31 f4       	brne	.+12     	; 0x160 <DO+0x2c>
	{
		cls();
 154:	0e 94 6b 00 	call	0xd6	; 0xd6 <cls>
		
		nextOperation = 0;
 158:	10 92 aa 00 	sts	0x00AA, r1
 15c:	10 92 a9 00 	sts	0x00A9, r1
	}	
	
	switch (blinkDuration)
 160:	80 91 9e 00 	lds	r24, 0x009E
 164:	88 30       	cpi	r24, 0x08	; 8
 166:	09 f4       	brne	.+2      	; 0x16a <DO+0x36>
 168:	ac c1       	rjmp	.+856    	; 0x4c2 <__stack+0x63>
 16a:	89 30       	cpi	r24, 0x09	; 9
 16c:	a8 f4       	brcc	.+42     	; 0x198 <DO+0x64>
 16e:	84 30       	cpi	r24, 0x04	; 4
 170:	09 f4       	brne	.+2      	; 0x174 <DO+0x40>
 172:	d7 c0       	rjmp	.+430    	; 0x322 <DO+0x1ee>
 174:	85 30       	cpi	r24, 0x05	; 5
 176:	48 f4       	brcc	.+18     	; 0x18a <DO+0x56>
 178:	82 30       	cpi	r24, 0x02	; 2
 17a:	c1 f1       	breq	.+112    	; 0x1ec <DO+0xb8>
 17c:	83 30       	cpi	r24, 0x03	; 3
 17e:	08 f0       	brcs	.+2      	; 0x182 <DO+0x4e>
 180:	bf c0       	rjmp	.+382    	; 0x300 <DO+0x1cc>
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	09 f0       	breq	.+2      	; 0x188 <DO+0x54>
 186:	53 c4       	rjmp	.+2214   	; 0xa2e <__stack+0x5cf>
 188:	20 c0       	rjmp	.+64     	; 0x1ca <DO+0x96>
 18a:	86 30       	cpi	r24, 0x06	; 6
 18c:	09 f4       	brne	.+2      	; 0x190 <DO+0x5c>
 18e:	31 c1       	rjmp	.+610    	; 0x3f2 <DO+0x2be>
 190:	87 30       	cpi	r24, 0x07	; 7
 192:	08 f0       	brcs	.+2      	; 0x196 <DO+0x62>
 194:	3f c1       	rjmp	.+638    	; 0x414 <DO+0x2e0>
 196:	d6 c0       	rjmp	.+428    	; 0x344 <DO+0x210>
 198:	8c 30       	cpi	r24, 0x0C	; 12
 19a:	09 f4       	brne	.+2      	; 0x19e <DO+0x6a>
 19c:	dc c2       	rjmp	.+1464   	; 0x756 <__stack+0x2f7>
 19e:	8d 30       	cpi	r24, 0x0D	; 13
 1a0:	38 f4       	brcc	.+14     	; 0x1b0 <DO+0x7c>
 1a2:	8a 30       	cpi	r24, 0x0A	; 10
 1a4:	09 f4       	brne	.+2      	; 0x1a8 <DO+0x74>
 1a6:	3b c2       	rjmp	.+1142   	; 0x61e <__stack+0x1bf>
 1a8:	8b 30       	cpi	r24, 0x0B	; 11
 1aa:	08 f0       	brcs	.+2      	; 0x1ae <DO+0x7a>
 1ac:	7d c2       	rjmp	.+1274   	; 0x6a8 <__stack+0x249>
 1ae:	e0 c1       	rjmp	.+960    	; 0x570 <__stack+0x111>
 1b0:	8e 30       	cpi	r24, 0x0E	; 14
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <DO+0x82>
 1b4:	7e c3       	rjmp	.+1788   	; 0x8b2 <__stack+0x453>
 1b6:	8e 30       	cpi	r24, 0x0E	; 14
 1b8:	08 f4       	brcc	.+2      	; 0x1bc <DO+0x88>
 1ba:	24 c3       	rjmp	.+1608   	; 0x804 <__stack+0x3a5>
 1bc:	8f 30       	cpi	r24, 0x0F	; 15
 1be:	09 f4       	brne	.+2      	; 0x1c2 <DO+0x8e>
 1c0:	89 c3       	rjmp	.+1810   	; 0x8d4 <__stack+0x475>
 1c2:	80 31       	cpi	r24, 0x10	; 16
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <DO+0x94>
 1c6:	33 c4       	rjmp	.+2150   	; 0xa2e <__stack+0x5cf>
 1c8:	dc c3       	rjmp	.+1976   	; 0x982 <__stack+0x523>
	{
		case 1:
			
			if(operation == 'n')
 1ca:	80 91 9c 00 	lds	r24, 0x009C
 1ce:	8e 36       	cpi	r24, 0x6E	; 110
 1d0:	09 f0       	breq	.+2      	; 0x1d4 <DO+0xa0>
 1d2:	2d c4       	rjmp	.+2138   	; 0xa2e <__stack+0x5cf>
			{
				operation = '-';
 1d4:	8d e2       	ldi	r24, 0x2D	; 45
 1d6:	80 93 9c 00 	sts	0x009C, r24
				Send_A_String(" - ");
 1da:	80 e6       	ldi	r24, 0x60	; 96
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 8b 00 	call	0x116	; 0x116 <Send_A_String>
				counter = 0;
 1e2:	10 92 a0 00 	sts	0x00A0, r1
 1e6:	10 92 9f 00 	sts	0x009F, r1
 1ea:	21 c4       	rjmp	.+2114   	; 0xa2e <__stack+0x5cf>
			}
			
			break;
		case 2:
			counter = 0;
 1ec:	10 92 a0 00 	sts	0x00A0, r1
 1f0:	10 92 9f 00 	sts	0x009F, r1
			
			nextOperation = 1;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	90 93 aa 00 	sts	0x00AA, r25
 1fc:	80 93 a9 00 	sts	0x00A9, r24
			Send_A_String(" = ");
 200:	84 e6       	ldi	r24, 0x64	; 100
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 8b 00 	call	0x116	; 0x116 <Send_A_String>
			switch(operation)
 208:	80 91 9c 00 	lds	r24, 0x009C
 20c:	8b 32       	cpi	r24, 0x2B	; 43
 20e:	71 f0       	breq	.+28     	; 0x22c <DO+0xf8>
 210:	8c 32       	cpi	r24, 0x2C	; 44
 212:	30 f4       	brcc	.+12     	; 0x220 <DO+0xec>
 214:	85 32       	cpi	r24, 0x25	; 37
 216:	b9 f1       	breq	.+110    	; 0x286 <DO+0x152>
 218:	8a 32       	cpi	r24, 0x2A	; 42
 21a:	09 f0       	breq	.+2      	; 0x21e <DO+0xea>
 21c:	56 c0       	rjmp	.+172    	; 0x2ca <DO+0x196>
 21e:	42 c0       	rjmp	.+132    	; 0x2a4 <DO+0x170>
 220:	8d 32       	cpi	r24, 0x2D	; 45
 222:	99 f0       	breq	.+38     	; 0x24a <DO+0x116>
 224:	8f 32       	cpi	r24, 0x2F	; 47
 226:	09 f0       	breq	.+2      	; 0x22a <DO+0xf6>
 228:	50 c0       	rjmp	.+160    	; 0x2ca <DO+0x196>
 22a:	1e c0       	rjmp	.+60     	; 0x268 <DO+0x134>
			{
				case '+':
				result = count1 + count2 ;
 22c:	20 91 a3 00 	lds	r18, 0x00A3
 230:	30 91 a4 00 	lds	r19, 0x00A4
 234:	80 91 a1 00 	lds	r24, 0x00A1
 238:	90 91 a2 00 	lds	r25, 0x00A2
 23c:	82 0f       	add	r24, r18
 23e:	93 1f       	adc	r25, r19
 240:	90 93 a8 00 	sts	0x00A8, r25
 244:	80 93 a7 00 	sts	0x00A7, r24
				break;
 248:	40 c0       	rjmp	.+128    	; 0x2ca <DO+0x196>
				case '-':
				result = count1 - count2 ;
 24a:	80 91 a1 00 	lds	r24, 0x00A1
 24e:	90 91 a2 00 	lds	r25, 0x00A2
 252:	20 91 a3 00 	lds	r18, 0x00A3
 256:	30 91 a4 00 	lds	r19, 0x00A4
 25a:	82 1b       	sub	r24, r18
 25c:	93 0b       	sbc	r25, r19
 25e:	90 93 a8 00 	sts	0x00A8, r25
 262:	80 93 a7 00 	sts	0x00A7, r24
				break;
 266:	31 c0       	rjmp	.+98     	; 0x2ca <DO+0x196>
				case '/':
				result = count1 / count2 ;
 268:	80 91 a1 00 	lds	r24, 0x00A1
 26c:	90 91 a2 00 	lds	r25, 0x00A2
 270:	60 91 a3 00 	lds	r22, 0x00A3
 274:	70 91 a4 00 	lds	r23, 0x00A4
 278:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__divmodhi4>
 27c:	70 93 a8 00 	sts	0x00A8, r23
 280:	60 93 a7 00 	sts	0x00A7, r22
				break;
 284:	22 c0       	rjmp	.+68     	; 0x2ca <DO+0x196>
				case '%':
				result = count1 % count2 ;
 286:	80 91 a1 00 	lds	r24, 0x00A1
 28a:	90 91 a2 00 	lds	r25, 0x00A2
 28e:	60 91 a3 00 	lds	r22, 0x00A3
 292:	70 91 a4 00 	lds	r23, 0x00A4
 296:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__divmodhi4>
 29a:	90 93 a8 00 	sts	0x00A8, r25
 29e:	80 93 a7 00 	sts	0x00A7, r24
				break;
 2a2:	13 c0       	rjmp	.+38     	; 0x2ca <DO+0x196>
				case '*':
				result = count1 * count2 ;
 2a4:	40 91 a3 00 	lds	r20, 0x00A3
 2a8:	50 91 a4 00 	lds	r21, 0x00A4
 2ac:	20 91 a1 00 	lds	r18, 0x00A1
 2b0:	30 91 a2 00 	lds	r19, 0x00A2
 2b4:	42 9f       	mul	r20, r18
 2b6:	c0 01       	movw	r24, r0
 2b8:	43 9f       	mul	r20, r19
 2ba:	90 0d       	add	r25, r0
 2bc:	52 9f       	mul	r21, r18
 2be:	90 0d       	add	r25, r0
 2c0:	11 24       	eor	r1, r1
 2c2:	90 93 a8 00 	sts	0x00A8, r25
 2c6:	80 93 a7 00 	sts	0x00A7, r24
					
					break;
			}*/
			
			char str[5];
			itoa(result,str,10);
 2ca:	80 91 a7 00 	lds	r24, 0x00A7
 2ce:	90 91 a8 00 	lds	r25, 0x00A8
 2d2:	8e 01       	movw	r16, r28
 2d4:	0f 5f       	subi	r16, 0xFF	; 255
 2d6:	1f 4f       	sbci	r17, 0xFF	; 255
 2d8:	b8 01       	movw	r22, r16
 2da:	4a e0       	ldi	r20, 0x0A	; 10
 2dc:	50 e0       	ldi	r21, 0x00	; 0
 2de:	0e 94 12 06 	call	0xc24	; 0xc24 <itoa>
			Send_A_String(str);
 2e2:	c8 01       	movw	r24, r16
 2e4:	0e 94 8b 00 	call	0x116	; 0x116 <Send_A_String>
			Send_A_String("count2 : ");
			itoa(count2,str,10);
			Send_A_String(str);
			*/
			
			operation = 'n';
 2e8:	8e e6       	ldi	r24, 0x6E	; 110
 2ea:	80 93 9c 00 	sts	0x009C, r24
			count1 = 0;
 2ee:	10 92 a2 00 	sts	0x00A2, r1
 2f2:	10 92 a1 00 	sts	0x00A1, r1
			count2 = 0;
 2f6:	10 92 a4 00 	sts	0x00A4, r1
 2fa:	10 92 a3 00 	sts	0x00A3, r1
			
			break;
 2fe:	97 c3       	rjmp	.+1838   	; 0xa2e <__stack+0x5cf>
		case 3:
			
			if(operation == 'n')
 300:	80 91 9c 00 	lds	r24, 0x009C
 304:	8e 36       	cpi	r24, 0x6E	; 110
 306:	09 f0       	breq	.+2      	; 0x30a <DO+0x1d6>
 308:	92 c3       	rjmp	.+1828   	; 0xa2e <__stack+0x5cf>
			{
				operation = '*';
 30a:	8a e2       	ldi	r24, 0x2A	; 42
 30c:	80 93 9c 00 	sts	0x009C, r24
				Send_A_String(" * ");
 310:	88 e6       	ldi	r24, 0x68	; 104
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 8b 00 	call	0x116	; 0x116 <Send_A_String>
				counter = 0;
 318:	10 92 a0 00 	sts	0x00A0, r1
 31c:	10 92 9f 00 	sts	0x009F, r1
 320:	86 c3       	rjmp	.+1804   	; 0xa2e <__stack+0x5cf>
			}
			
			break;
		case 4:
			
			if(operation == 'n')
 322:	80 91 9c 00 	lds	r24, 0x009C
 326:	8e 36       	cpi	r24, 0x6E	; 110
 328:	09 f0       	breq	.+2      	; 0x32c <DO+0x1f8>
 32a:	81 c3       	rjmp	.+1794   	; 0xa2e <__stack+0x5cf>
			{
				operation = '+';
 32c:	8b e2       	ldi	r24, 0x2B	; 43
 32e:	80 93 9c 00 	sts	0x009C, r24
				Send_A_String(" + ");
 332:	8c e6       	ldi	r24, 0x6C	; 108
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 8b 00 	call	0x116	; 0x116 <Send_A_String>
				counter = 0;
 33a:	10 92 a0 00 	sts	0x00A0, r1
 33e:	10 92 9f 00 	sts	0x009F, r1
 342:	75 c3       	rjmp	.+1770   	; 0xa2e <__stack+0x5cf>
			}
			
			break;
		case 5:
			if(operation == 'n')
 344:	80 91 9c 00 	lds	r24, 0x009C
 348:	8e 36       	cpi	r24, 0x6E	; 110
 34a:	19 f5       	brne	.+70     	; 0x392 <DO+0x25e>
			{
				if(counter != 0)
 34c:	80 91 9f 00 	lds	r24, 0x009F
 350:	90 91 a0 00 	lds	r25, 0x00A0
 354:	00 97       	sbiw	r24, 0x00	; 0
 356:	99 f0       	breq	.+38     	; 0x37e <DO+0x24a>
					count1 *= 10;
 358:	80 91 a1 00 	lds	r24, 0x00A1
 35c:	90 91 a2 00 	lds	r25, 0x00A2
 360:	9c 01       	movw	r18, r24
 362:	22 0f       	add	r18, r18
 364:	33 1f       	adc	r19, r19
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	82 0f       	add	r24, r18
 374:	93 1f       	adc	r25, r19
 376:	90 93 a2 00 	sts	0x00A2, r25
 37a:	80 93 a1 00 	sts	0x00A1, r24
				count1 += 6;
 37e:	80 91 a1 00 	lds	r24, 0x00A1
 382:	90 91 a2 00 	lds	r25, 0x00A2
 386:	06 96       	adiw	r24, 0x06	; 6
 388:	90 93 a2 00 	sts	0x00A2, r25
 38c:	80 93 a1 00 	sts	0x00A1, r24
 390:	22 c0       	rjmp	.+68     	; 0x3d6 <DO+0x2a2>
			}
			else
			{
				if(counter != 0)
 392:	80 91 9f 00 	lds	r24, 0x009F
 396:	90 91 a0 00 	lds	r25, 0x00A0
 39a:	00 97       	sbiw	r24, 0x00	; 0
 39c:	99 f0       	breq	.+38     	; 0x3c4 <DO+0x290>
					count2 *= 10;
 39e:	80 91 a3 00 	lds	r24, 0x00A3
 3a2:	90 91 a4 00 	lds	r25, 0x00A4
 3a6:	9c 01       	movw	r18, r24
 3a8:	22 0f       	add	r18, r18
 3aa:	33 1f       	adc	r19, r19
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	82 0f       	add	r24, r18
 3ba:	93 1f       	adc	r25, r19
 3bc:	90 93 a4 00 	sts	0x00A4, r25
 3c0:	80 93 a3 00 	sts	0x00A3, r24
				count2 += 6;
 3c4:	80 91 a3 00 	lds	r24, 0x00A3
 3c8:	90 91 a4 00 	lds	r25, 0x00A4
 3cc:	06 96       	adiw	r24, 0x06	; 6
 3ce:	90 93 a4 00 	sts	0x00A4, r25
 3d2:	80 93 a3 00 	sts	0x00A3, r24
			}
			Send_A_String("6");
 3d6:	80 e7       	ldi	r24, 0x70	; 112
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 8b 00 	call	0x116	; 0x116 <Send_A_String>
			counter++;
 3de:	80 91 9f 00 	lds	r24, 0x009F
 3e2:	90 91 a0 00 	lds	r25, 0x00A0
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	90 93 a0 00 	sts	0x00A0, r25
 3ec:	80 93 9f 00 	sts	0x009F, r24
			break;
 3f0:	1e c3       	rjmp	.+1596   	; 0xa2e <__stack+0x5cf>
		case 6:
			
			if(operation == 'n')
 3f2:	80 91 9c 00 	lds	r24, 0x009C
 3f6:	8e 36       	cpi	r24, 0x6E	; 110
 3f8:	09 f0       	breq	.+2      	; 0x3fc <DO+0x2c8>
 3fa:	19 c3       	rjmp	.+1586   	; 0xa2e <__stack+0x5cf>
			{
				operation = '%';
 3fc:	85 e2       	ldi	r24, 0x25	; 37
 3fe:	80 93 9c 00 	sts	0x009C, r24
				Send_A_String(" % ");
 402:	82 e7       	ldi	r24, 0x72	; 114
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 8b 00 	call	0x116	; 0x116 <Send_A_String>
				counter = 0;
 40a:	10 92 a0 00 	sts	0x00A0, r1
 40e:	10 92 9f 00 	sts	0x009F, r1
 412:	0d c3       	rjmp	.+1562   	; 0xa2e <__stack+0x5cf>
			}
			
			break;
		case 7:
			if(operation == 'n')
 414:	80 91 9c 00 	lds	r24, 0x009C
 418:	8e 36       	cpi	r24, 0x6E	; 110
 41a:	19 f5       	brne	.+70     	; 0x462 <__stack+0x3>
			{
				if(counter != 0)
 41c:	80 91 9f 00 	lds	r24, 0x009F
 420:	90 91 a0 00 	lds	r25, 0x00A0
 424:	00 97       	sbiw	r24, 0x00	; 0
 426:	99 f0       	breq	.+38     	; 0x44e <DO+0x31a>
					count1 *= 10;
 428:	80 91 a1 00 	lds	r24, 0x00A1
 42c:	90 91 a2 00 	lds	r25, 0x00A2
 430:	9c 01       	movw	r18, r24
 432:	22 0f       	add	r18, r18
 434:	33 1f       	adc	r19, r19
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	82 0f       	add	r24, r18
 444:	93 1f       	adc	r25, r19
 446:	90 93 a2 00 	sts	0x00A2, r25
 44a:	80 93 a1 00 	sts	0x00A1, r24
				count1 += 9;
 44e:	80 91 a1 00 	lds	r24, 0x00A1
 452:	90 91 a2 00 	lds	r25, 0x00A2
 456:	09 96       	adiw	r24, 0x09	; 9
 458:	90 93 a2 00 	sts	0x00A2, r25
 45c:	80 93 a1 00 	sts	0x00A1, r24
 460:	22 c0       	rjmp	.+68     	; 0x4a6 <__stack+0x47>
			}
			else
			{
				if(counter != 0)
 462:	80 91 9f 00 	lds	r24, 0x009F
 466:	90 91 a0 00 	lds	r25, 0x00A0
 46a:	00 97       	sbiw	r24, 0x00	; 0
 46c:	99 f0       	breq	.+38     	; 0x494 <__stack+0x35>
					count2 *= 10;
 46e:	80 91 a3 00 	lds	r24, 0x00A3
 472:	90 91 a4 00 	lds	r25, 0x00A4
 476:	9c 01       	movw	r18, r24
 478:	22 0f       	add	r18, r18
 47a:	33 1f       	adc	r19, r19
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	82 0f       	add	r24, r18
 48a:	93 1f       	adc	r25, r19
 48c:	90 93 a4 00 	sts	0x00A4, r25
 490:	80 93 a3 00 	sts	0x00A3, r24
				count2 += 9;
 494:	80 91 a3 00 	lds	r24, 0x00A3
 498:	90 91 a4 00 	lds	r25, 0x00A4
 49c:	09 96       	adiw	r24, 0x09	; 9
 49e:	90 93 a4 00 	sts	0x00A4, r25
 4a2:	80 93 a3 00 	sts	0x00A3, r24
			}
			Send_A_String("9");
 4a6:	86 e7       	ldi	r24, 0x76	; 118
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 8b 00 	call	0x116	; 0x116 <Send_A_String>
			counter++;
 4ae:	80 91 9f 00 	lds	r24, 0x009F
 4b2:	90 91 a0 00 	lds	r25, 0x00A0
 4b6:	01 96       	adiw	r24, 0x01	; 1
 4b8:	90 93 a0 00 	sts	0x00A0, r25
 4bc:	80 93 9f 00 	sts	0x009F, r24
			break;
 4c0:	b6 c2       	rjmp	.+1388   	; 0xa2e <__stack+0x5cf>
		case 8:
			if(operation == 'n')
 4c2:	80 91 9c 00 	lds	r24, 0x009C
 4c6:	8e 36       	cpi	r24, 0x6E	; 110
 4c8:	19 f5       	brne	.+70     	; 0x510 <__stack+0xb1>
			{
				if(counter != 0)
 4ca:	80 91 9f 00 	lds	r24, 0x009F
 4ce:	90 91 a0 00 	lds	r25, 0x00A0
 4d2:	00 97       	sbiw	r24, 0x00	; 0
 4d4:	99 f0       	breq	.+38     	; 0x4fc <__stack+0x9d>
					count1 *= 10;
 4d6:	80 91 a1 00 	lds	r24, 0x00A1
 4da:	90 91 a2 00 	lds	r25, 0x00A2
 4de:	9c 01       	movw	r18, r24
 4e0:	22 0f       	add	r18, r18
 4e2:	33 1f       	adc	r19, r19
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	82 0f       	add	r24, r18
 4f2:	93 1f       	adc	r25, r19
 4f4:	90 93 a2 00 	sts	0x00A2, r25
 4f8:	80 93 a1 00 	sts	0x00A1, r24
				count1 += 3;
 4fc:	80 91 a1 00 	lds	r24, 0x00A1
 500:	90 91 a2 00 	lds	r25, 0x00A2
 504:	03 96       	adiw	r24, 0x03	; 3
 506:	90 93 a2 00 	sts	0x00A2, r25
 50a:	80 93 a1 00 	sts	0x00A1, r24
 50e:	22 c0       	rjmp	.+68     	; 0x554 <__stack+0xf5>
			}
			else
			{
				if(counter != 0)
 510:	80 91 9f 00 	lds	r24, 0x009F
 514:	90 91 a0 00 	lds	r25, 0x00A0
 518:	00 97       	sbiw	r24, 0x00	; 0
 51a:	99 f0       	breq	.+38     	; 0x542 <__stack+0xe3>
					count2 *= 10;
 51c:	80 91 a3 00 	lds	r24, 0x00A3
 520:	90 91 a4 00 	lds	r25, 0x00A4
 524:	9c 01       	movw	r18, r24
 526:	22 0f       	add	r18, r18
 528:	33 1f       	adc	r19, r19
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	82 0f       	add	r24, r18
 538:	93 1f       	adc	r25, r19
 53a:	90 93 a4 00 	sts	0x00A4, r25
 53e:	80 93 a3 00 	sts	0x00A3, r24
				count2 += 3;
 542:	80 91 a3 00 	lds	r24, 0x00A3
 546:	90 91 a4 00 	lds	r25, 0x00A4
 54a:	03 96       	adiw	r24, 0x03	; 3
 54c:	90 93 a4 00 	sts	0x00A4, r25
 550:	80 93 a3 00 	sts	0x00A3, r24
			}
			Send_A_String("3");
 554:	88 e7       	ldi	r24, 0x78	; 120
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 8b 00 	call	0x116	; 0x116 <Send_A_String>
			counter++;
 55c:	80 91 9f 00 	lds	r24, 0x009F
 560:	90 91 a0 00 	lds	r25, 0x00A0
 564:	01 96       	adiw	r24, 0x01	; 1
 566:	90 93 a0 00 	sts	0x00A0, r25
 56a:	80 93 9f 00 	sts	0x009F, r24
			break;
 56e:	5f c2       	rjmp	.+1214   	; 0xa2e <__stack+0x5cf>
		case 9:
			if(operation == 'n')
 570:	80 91 9c 00 	lds	r24, 0x009C
 574:	8e 36       	cpi	r24, 0x6E	; 110
 576:	19 f5       	brne	.+70     	; 0x5be <__stack+0x15f>
			{
				if(counter != 0)
 578:	80 91 9f 00 	lds	r24, 0x009F
 57c:	90 91 a0 00 	lds	r25, 0x00A0
 580:	00 97       	sbiw	r24, 0x00	; 0
 582:	99 f0       	breq	.+38     	; 0x5aa <__stack+0x14b>
					count1 *= 10;
 584:	80 91 a1 00 	lds	r24, 0x00A1
 588:	90 91 a2 00 	lds	r25, 0x00A2
 58c:	9c 01       	movw	r18, r24
 58e:	22 0f       	add	r18, r18
 590:	33 1f       	adc	r19, r19
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	82 0f       	add	r24, r18
 5a0:	93 1f       	adc	r25, r19
 5a2:	90 93 a2 00 	sts	0x00A2, r25
 5a6:	80 93 a1 00 	sts	0x00A1, r24
				count1 += 5;
 5aa:	80 91 a1 00 	lds	r24, 0x00A1
 5ae:	90 91 a2 00 	lds	r25, 0x00A2
 5b2:	05 96       	adiw	r24, 0x05	; 5
 5b4:	90 93 a2 00 	sts	0x00A2, r25
 5b8:	80 93 a1 00 	sts	0x00A1, r24
 5bc:	22 c0       	rjmp	.+68     	; 0x602 <__stack+0x1a3>
			}
			else
			{
				if(counter != 0)
 5be:	80 91 9f 00 	lds	r24, 0x009F
 5c2:	90 91 a0 00 	lds	r25, 0x00A0
 5c6:	00 97       	sbiw	r24, 0x00	; 0
 5c8:	99 f0       	breq	.+38     	; 0x5f0 <__stack+0x191>
					count2 *= 10;
 5ca:	80 91 a3 00 	lds	r24, 0x00A3
 5ce:	90 91 a4 00 	lds	r25, 0x00A4
 5d2:	9c 01       	movw	r18, r24
 5d4:	22 0f       	add	r18, r18
 5d6:	33 1f       	adc	r19, r19
 5d8:	88 0f       	add	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	82 0f       	add	r24, r18
 5e6:	93 1f       	adc	r25, r19
 5e8:	90 93 a4 00 	sts	0x00A4, r25
 5ec:	80 93 a3 00 	sts	0x00A3, r24
				count2 += 5;
 5f0:	80 91 a3 00 	lds	r24, 0x00A3
 5f4:	90 91 a4 00 	lds	r25, 0x00A4
 5f8:	05 96       	adiw	r24, 0x05	; 5
 5fa:	90 93 a4 00 	sts	0x00A4, r25
 5fe:	80 93 a3 00 	sts	0x00A3, r24
			}
			Send_A_String("5");
 602:	8a e7       	ldi	r24, 0x7A	; 122
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 8b 00 	call	0x116	; 0x116 <Send_A_String>
			counter++;
 60a:	80 91 9f 00 	lds	r24, 0x009F
 60e:	90 91 a0 00 	lds	r25, 0x00A0
 612:	01 96       	adiw	r24, 0x01	; 1
 614:	90 93 a0 00 	sts	0x00A0, r25
 618:	80 93 9f 00 	sts	0x009F, r24
			break;
 61c:	08 c2       	rjmp	.+1040   	; 0xa2e <__stack+0x5cf>
		case 10:
			if(operation == 'n')
 61e:	80 91 9c 00 	lds	r24, 0x009C
 622:	8e 36       	cpi	r24, 0x6E	; 110
 624:	d1 f4       	brne	.+52     	; 0x65a <__stack+0x1fb>
			{
				if(counter != 0)
 626:	80 91 9f 00 	lds	r24, 0x009F
 62a:	90 91 a0 00 	lds	r25, 0x00A0
 62e:	00 97       	sbiw	r24, 0x00	; 0
 630:	69 f1       	breq	.+90     	; 0x68c <__stack+0x22d>
					count1 *= 10;
 632:	80 91 a1 00 	lds	r24, 0x00A1
 636:	90 91 a2 00 	lds	r25, 0x00A2
 63a:	9c 01       	movw	r18, r24
 63c:	22 0f       	add	r18, r18
 63e:	33 1f       	adc	r19, r19
 640:	88 0f       	add	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	88 0f       	add	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	88 0f       	add	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	82 0f       	add	r24, r18
 64e:	93 1f       	adc	r25, r19
 650:	90 93 a2 00 	sts	0x00A2, r25
 654:	80 93 a1 00 	sts	0x00A1, r24
 658:	19 c0       	rjmp	.+50     	; 0x68c <__stack+0x22d>
				count1 += 0;
			}
			else
			{
				if(counter != 0)
 65a:	80 91 9f 00 	lds	r24, 0x009F
 65e:	90 91 a0 00 	lds	r25, 0x00A0
 662:	00 97       	sbiw	r24, 0x00	; 0
 664:	99 f0       	breq	.+38     	; 0x68c <__stack+0x22d>
					count2 *= 10;
 666:	80 91 a3 00 	lds	r24, 0x00A3
 66a:	90 91 a4 00 	lds	r25, 0x00A4
 66e:	9c 01       	movw	r18, r24
 670:	22 0f       	add	r18, r18
 672:	33 1f       	adc	r19, r19
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	88 0f       	add	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	88 0f       	add	r24, r24
 67e:	99 1f       	adc	r25, r25
 680:	82 0f       	add	r24, r18
 682:	93 1f       	adc	r25, r19
 684:	90 93 a4 00 	sts	0x00A4, r25
 688:	80 93 a3 00 	sts	0x00A3, r24
				count2 += 0;
			}
			Send_A_String("0");
 68c:	8c e7       	ldi	r24, 0x7C	; 124
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0e 94 8b 00 	call	0x116	; 0x116 <Send_A_String>
			counter++;
 694:	80 91 9f 00 	lds	r24, 0x009F
 698:	90 91 a0 00 	lds	r25, 0x00A0
 69c:	01 96       	adiw	r24, 0x01	; 1
 69e:	90 93 a0 00 	sts	0x00A0, r25
 6a2:	80 93 9f 00 	sts	0x009F, r24
			break;
 6a6:	c3 c1       	rjmp	.+902    	; 0xa2e <__stack+0x5cf>
		case 11:
			if(operation == 'n')
 6a8:	80 91 9c 00 	lds	r24, 0x009C
 6ac:	8e 36       	cpi	r24, 0x6E	; 110
 6ae:	19 f5       	brne	.+70     	; 0x6f6 <__stack+0x297>
			{
				if(counter != 0)
 6b0:	80 91 9f 00 	lds	r24, 0x009F
 6b4:	90 91 a0 00 	lds	r25, 0x00A0
 6b8:	00 97       	sbiw	r24, 0x00	; 0
 6ba:	99 f0       	breq	.+38     	; 0x6e2 <__stack+0x283>
					count1 *= 10;
 6bc:	80 91 a1 00 	lds	r24, 0x00A1
 6c0:	90 91 a2 00 	lds	r25, 0x00A2
 6c4:	9c 01       	movw	r18, r24
 6c6:	22 0f       	add	r18, r18
 6c8:	33 1f       	adc	r19, r19
 6ca:	88 0f       	add	r24, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	88 0f       	add	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	88 0f       	add	r24, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	82 0f       	add	r24, r18
 6d8:	93 1f       	adc	r25, r19
 6da:	90 93 a2 00 	sts	0x00A2, r25
 6de:	80 93 a1 00 	sts	0x00A1, r24
				count1 += 8;
 6e2:	80 91 a1 00 	lds	r24, 0x00A1
 6e6:	90 91 a2 00 	lds	r25, 0x00A2
 6ea:	08 96       	adiw	r24, 0x08	; 8
 6ec:	90 93 a2 00 	sts	0x00A2, r25
 6f0:	80 93 a1 00 	sts	0x00A1, r24
 6f4:	22 c0       	rjmp	.+68     	; 0x73a <__stack+0x2db>
			}
			else
			{
				if(counter != 0)
 6f6:	80 91 9f 00 	lds	r24, 0x009F
 6fa:	90 91 a0 00 	lds	r25, 0x00A0
 6fe:	00 97       	sbiw	r24, 0x00	; 0
 700:	99 f0       	breq	.+38     	; 0x728 <__stack+0x2c9>
					count2 *= 10;
 702:	80 91 a3 00 	lds	r24, 0x00A3
 706:	90 91 a4 00 	lds	r25, 0x00A4
 70a:	9c 01       	movw	r18, r24
 70c:	22 0f       	add	r18, r18
 70e:	33 1f       	adc	r19, r19
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	88 0f       	add	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	82 0f       	add	r24, r18
 71e:	93 1f       	adc	r25, r19
 720:	90 93 a4 00 	sts	0x00A4, r25
 724:	80 93 a3 00 	sts	0x00A3, r24
				count2 += 8;
 728:	80 91 a3 00 	lds	r24, 0x00A3
 72c:	90 91 a4 00 	lds	r25, 0x00A4
 730:	08 96       	adiw	r24, 0x08	; 8
 732:	90 93 a4 00 	sts	0x00A4, r25
 736:	80 93 a3 00 	sts	0x00A3, r24
			}
			Send_A_String("8");
 73a:	8e e7       	ldi	r24, 0x7E	; 126
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 8b 00 	call	0x116	; 0x116 <Send_A_String>
			counter++;
 742:	80 91 9f 00 	lds	r24, 0x009F
 746:	90 91 a0 00 	lds	r25, 0x00A0
 74a:	01 96       	adiw	r24, 0x01	; 1
 74c:	90 93 a0 00 	sts	0x00A0, r25
 750:	80 93 9f 00 	sts	0x009F, r24
			break;
 754:	6c c1       	rjmp	.+728    	; 0xa2e <__stack+0x5cf>
		case 12:
			if(operation == 'n')
 756:	80 91 9c 00 	lds	r24, 0x009C
 75a:	8e 36       	cpi	r24, 0x6E	; 110
 75c:	19 f5       	brne	.+70     	; 0x7a4 <__stack+0x345>
			{
				if(counter != 0)
 75e:	80 91 9f 00 	lds	r24, 0x009F
 762:	90 91 a0 00 	lds	r25, 0x00A0
 766:	00 97       	sbiw	r24, 0x00	; 0
 768:	99 f0       	breq	.+38     	; 0x790 <__stack+0x331>
					count1 *= 10;
 76a:	80 91 a1 00 	lds	r24, 0x00A1
 76e:	90 91 a2 00 	lds	r25, 0x00A2
 772:	9c 01       	movw	r18, r24
 774:	22 0f       	add	r18, r18
 776:	33 1f       	adc	r19, r19
 778:	88 0f       	add	r24, r24
 77a:	99 1f       	adc	r25, r25
 77c:	88 0f       	add	r24, r24
 77e:	99 1f       	adc	r25, r25
 780:	88 0f       	add	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	82 0f       	add	r24, r18
 786:	93 1f       	adc	r25, r19
 788:	90 93 a2 00 	sts	0x00A2, r25
 78c:	80 93 a1 00 	sts	0x00A1, r24
				count1 += 2;
 790:	80 91 a1 00 	lds	r24, 0x00A1
 794:	90 91 a2 00 	lds	r25, 0x00A2
 798:	02 96       	adiw	r24, 0x02	; 2
 79a:	90 93 a2 00 	sts	0x00A2, r25
 79e:	80 93 a1 00 	sts	0x00A1, r24
 7a2:	22 c0       	rjmp	.+68     	; 0x7e8 <__stack+0x389>
			}
			else
			{
				if(counter != 0)
 7a4:	80 91 9f 00 	lds	r24, 0x009F
 7a8:	90 91 a0 00 	lds	r25, 0x00A0
 7ac:	00 97       	sbiw	r24, 0x00	; 0
 7ae:	99 f0       	breq	.+38     	; 0x7d6 <__stack+0x377>
					count2 *= 10;
 7b0:	80 91 a3 00 	lds	r24, 0x00A3
 7b4:	90 91 a4 00 	lds	r25, 0x00A4
 7b8:	9c 01       	movw	r18, r24
 7ba:	22 0f       	add	r18, r18
 7bc:	33 1f       	adc	r19, r19
 7be:	88 0f       	add	r24, r24
 7c0:	99 1f       	adc	r25, r25
 7c2:	88 0f       	add	r24, r24
 7c4:	99 1f       	adc	r25, r25
 7c6:	88 0f       	add	r24, r24
 7c8:	99 1f       	adc	r25, r25
 7ca:	82 0f       	add	r24, r18
 7cc:	93 1f       	adc	r25, r19
 7ce:	90 93 a4 00 	sts	0x00A4, r25
 7d2:	80 93 a3 00 	sts	0x00A3, r24
				count2 += 2;
 7d6:	80 91 a3 00 	lds	r24, 0x00A3
 7da:	90 91 a4 00 	lds	r25, 0x00A4
 7de:	02 96       	adiw	r24, 0x02	; 2
 7e0:	90 93 a4 00 	sts	0x00A4, r25
 7e4:	80 93 a3 00 	sts	0x00A3, r24
			}
			Send_A_String("2");
 7e8:	80 e8       	ldi	r24, 0x80	; 128
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	0e 94 8b 00 	call	0x116	; 0x116 <Send_A_String>
			counter++;
 7f0:	80 91 9f 00 	lds	r24, 0x009F
 7f4:	90 91 a0 00 	lds	r25, 0x00A0
 7f8:	01 96       	adiw	r24, 0x01	; 1
 7fa:	90 93 a0 00 	sts	0x00A0, r25
 7fe:	80 93 9f 00 	sts	0x009F, r24
			break;
 802:	15 c1       	rjmp	.+554    	; 0xa2e <__stack+0x5cf>
		case 13:
			if(operation == 'n')
 804:	80 91 9c 00 	lds	r24, 0x009C
 808:	8e 36       	cpi	r24, 0x6E	; 110
 80a:	19 f5       	brne	.+70     	; 0x852 <__stack+0x3f3>
			{
				if(counter != 0)
 80c:	80 91 9f 00 	lds	r24, 0x009F
 810:	90 91 a0 00 	lds	r25, 0x00A0
 814:	00 97       	sbiw	r24, 0x00	; 0
 816:	99 f0       	breq	.+38     	; 0x83e <__stack+0x3df>
					count1 *= 10;
 818:	80 91 a1 00 	lds	r24, 0x00A1
 81c:	90 91 a2 00 	lds	r25, 0x00A2
 820:	9c 01       	movw	r18, r24
 822:	22 0f       	add	r18, r18
 824:	33 1f       	adc	r19, r19
 826:	88 0f       	add	r24, r24
 828:	99 1f       	adc	r25, r25
 82a:	88 0f       	add	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	88 0f       	add	r24, r24
 830:	99 1f       	adc	r25, r25
 832:	82 0f       	add	r24, r18
 834:	93 1f       	adc	r25, r19
 836:	90 93 a2 00 	sts	0x00A2, r25
 83a:	80 93 a1 00 	sts	0x00A1, r24
				count1 += 4;
 83e:	80 91 a1 00 	lds	r24, 0x00A1
 842:	90 91 a2 00 	lds	r25, 0x00A2
 846:	04 96       	adiw	r24, 0x04	; 4
 848:	90 93 a2 00 	sts	0x00A2, r25
 84c:	80 93 a1 00 	sts	0x00A1, r24
 850:	22 c0       	rjmp	.+68     	; 0x896 <__stack+0x437>
			}
			else
			{
				if(counter != 0)
 852:	80 91 9f 00 	lds	r24, 0x009F
 856:	90 91 a0 00 	lds	r25, 0x00A0
 85a:	00 97       	sbiw	r24, 0x00	; 0
 85c:	99 f0       	breq	.+38     	; 0x884 <__stack+0x425>
					count2 *= 10;
 85e:	80 91 a3 00 	lds	r24, 0x00A3
 862:	90 91 a4 00 	lds	r25, 0x00A4
 866:	9c 01       	movw	r18, r24
 868:	22 0f       	add	r18, r18
 86a:	33 1f       	adc	r19, r19
 86c:	88 0f       	add	r24, r24
 86e:	99 1f       	adc	r25, r25
 870:	88 0f       	add	r24, r24
 872:	99 1f       	adc	r25, r25
 874:	88 0f       	add	r24, r24
 876:	99 1f       	adc	r25, r25
 878:	82 0f       	add	r24, r18
 87a:	93 1f       	adc	r25, r19
 87c:	90 93 a4 00 	sts	0x00A4, r25
 880:	80 93 a3 00 	sts	0x00A3, r24
				count2 += 4;
 884:	80 91 a3 00 	lds	r24, 0x00A3
 888:	90 91 a4 00 	lds	r25, 0x00A4
 88c:	04 96       	adiw	r24, 0x04	; 4
 88e:	90 93 a4 00 	sts	0x00A4, r25
 892:	80 93 a3 00 	sts	0x00A3, r24
			}
			Send_A_String("4");
 896:	82 e8       	ldi	r24, 0x82	; 130
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	0e 94 8b 00 	call	0x116	; 0x116 <Send_A_String>
			counter++;
 89e:	80 91 9f 00 	lds	r24, 0x009F
 8a2:	90 91 a0 00 	lds	r25, 0x00A0
 8a6:	01 96       	adiw	r24, 0x01	; 1
 8a8:	90 93 a0 00 	sts	0x00A0, r25
 8ac:	80 93 9f 00 	sts	0x009F, r24
			break;
 8b0:	be c0       	rjmp	.+380    	; 0xa2e <__stack+0x5cf>
		case 14:
			if(operation == 'n')
 8b2:	80 91 9c 00 	lds	r24, 0x009C
 8b6:	8e 36       	cpi	r24, 0x6E	; 110
 8b8:	09 f0       	breq	.+2      	; 0x8bc <__stack+0x45d>
 8ba:	b9 c0       	rjmp	.+370    	; 0xa2e <__stack+0x5cf>
			{
				operation = '/';
 8bc:	8f e2       	ldi	r24, 0x2F	; 47
 8be:	80 93 9c 00 	sts	0x009C, r24
				Send_A_String(" / ");
 8c2:	84 e8       	ldi	r24, 0x84	; 132
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	0e 94 8b 00 	call	0x116	; 0x116 <Send_A_String>
				counter = 0;
 8ca:	10 92 a0 00 	sts	0x00A0, r1
 8ce:	10 92 9f 00 	sts	0x009F, r1
 8d2:	ad c0       	rjmp	.+346    	; 0xa2e <__stack+0x5cf>
			}			
			
			
			break;
		case 15:
			if(operation == 'n')
 8d4:	80 91 9c 00 	lds	r24, 0x009C
 8d8:	8e 36       	cpi	r24, 0x6E	; 110
 8da:	19 f5       	brne	.+70     	; 0x922 <__stack+0x4c3>
			{
				if(counter != 0)
 8dc:	80 91 9f 00 	lds	r24, 0x009F
 8e0:	90 91 a0 00 	lds	r25, 0x00A0
 8e4:	00 97       	sbiw	r24, 0x00	; 0
 8e6:	99 f0       	breq	.+38     	; 0x90e <__stack+0x4af>
					count1 *= 10;
 8e8:	80 91 a1 00 	lds	r24, 0x00A1
 8ec:	90 91 a2 00 	lds	r25, 0x00A2
 8f0:	9c 01       	movw	r18, r24
 8f2:	22 0f       	add	r18, r18
 8f4:	33 1f       	adc	r19, r19
 8f6:	88 0f       	add	r24, r24
 8f8:	99 1f       	adc	r25, r25
 8fa:	88 0f       	add	r24, r24
 8fc:	99 1f       	adc	r25, r25
 8fe:	88 0f       	add	r24, r24
 900:	99 1f       	adc	r25, r25
 902:	82 0f       	add	r24, r18
 904:	93 1f       	adc	r25, r19
 906:	90 93 a2 00 	sts	0x00A2, r25
 90a:	80 93 a1 00 	sts	0x00A1, r24
				count1 += 7;
 90e:	80 91 a1 00 	lds	r24, 0x00A1
 912:	90 91 a2 00 	lds	r25, 0x00A2
 916:	07 96       	adiw	r24, 0x07	; 7
 918:	90 93 a2 00 	sts	0x00A2, r25
 91c:	80 93 a1 00 	sts	0x00A1, r24
 920:	22 c0       	rjmp	.+68     	; 0x966 <__stack+0x507>
			}
			else
			{
				if(counter != 0)
 922:	80 91 9f 00 	lds	r24, 0x009F
 926:	90 91 a0 00 	lds	r25, 0x00A0
 92a:	00 97       	sbiw	r24, 0x00	; 0
 92c:	99 f0       	breq	.+38     	; 0x954 <__stack+0x4f5>
					count2 *= 10;
 92e:	80 91 a3 00 	lds	r24, 0x00A3
 932:	90 91 a4 00 	lds	r25, 0x00A4
 936:	9c 01       	movw	r18, r24
 938:	22 0f       	add	r18, r18
 93a:	33 1f       	adc	r19, r19
 93c:	88 0f       	add	r24, r24
 93e:	99 1f       	adc	r25, r25
 940:	88 0f       	add	r24, r24
 942:	99 1f       	adc	r25, r25
 944:	88 0f       	add	r24, r24
 946:	99 1f       	adc	r25, r25
 948:	82 0f       	add	r24, r18
 94a:	93 1f       	adc	r25, r19
 94c:	90 93 a4 00 	sts	0x00A4, r25
 950:	80 93 a3 00 	sts	0x00A3, r24
				count2 += 7;
 954:	80 91 a3 00 	lds	r24, 0x00A3
 958:	90 91 a4 00 	lds	r25, 0x00A4
 95c:	07 96       	adiw	r24, 0x07	; 7
 95e:	90 93 a4 00 	sts	0x00A4, r25
 962:	80 93 a3 00 	sts	0x00A3, r24
			}
			Send_A_String("7");
 966:	88 e8       	ldi	r24, 0x88	; 136
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	0e 94 8b 00 	call	0x116	; 0x116 <Send_A_String>
			counter++;
 96e:	80 91 9f 00 	lds	r24, 0x009F
 972:	90 91 a0 00 	lds	r25, 0x00A0
 976:	01 96       	adiw	r24, 0x01	; 1
 978:	90 93 a0 00 	sts	0x00A0, r25
 97c:	80 93 9f 00 	sts	0x009F, r24
			break;
 980:	56 c0       	rjmp	.+172    	; 0xa2e <__stack+0x5cf>
		case 16:
			if(operation == 'n')
 982:	80 91 9c 00 	lds	r24, 0x009C
 986:	8e 36       	cpi	r24, 0x6E	; 110
 988:	19 f5       	brne	.+70     	; 0x9d0 <__stack+0x571>
			{
				if(counter != 0)
 98a:	80 91 9f 00 	lds	r24, 0x009F
 98e:	90 91 a0 00 	lds	r25, 0x00A0
 992:	00 97       	sbiw	r24, 0x00	; 0
 994:	99 f0       	breq	.+38     	; 0x9bc <__stack+0x55d>
					count1 *= 10;
 996:	80 91 a1 00 	lds	r24, 0x00A1
 99a:	90 91 a2 00 	lds	r25, 0x00A2
 99e:	9c 01       	movw	r18, r24
 9a0:	22 0f       	add	r18, r18
 9a2:	33 1f       	adc	r19, r19
 9a4:	88 0f       	add	r24, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	88 0f       	add	r24, r24
 9aa:	99 1f       	adc	r25, r25
 9ac:	88 0f       	add	r24, r24
 9ae:	99 1f       	adc	r25, r25
 9b0:	82 0f       	add	r24, r18
 9b2:	93 1f       	adc	r25, r19
 9b4:	90 93 a2 00 	sts	0x00A2, r25
 9b8:	80 93 a1 00 	sts	0x00A1, r24
				count1 += 1;
 9bc:	80 91 a1 00 	lds	r24, 0x00A1
 9c0:	90 91 a2 00 	lds	r25, 0x00A2
 9c4:	01 96       	adiw	r24, 0x01	; 1
 9c6:	90 93 a2 00 	sts	0x00A2, r25
 9ca:	80 93 a1 00 	sts	0x00A1, r24
 9ce:	22 c0       	rjmp	.+68     	; 0xa14 <__stack+0x5b5>
			}
			else
			{
				if(counter != 0)
 9d0:	80 91 9f 00 	lds	r24, 0x009F
 9d4:	90 91 a0 00 	lds	r25, 0x00A0
 9d8:	00 97       	sbiw	r24, 0x00	; 0
 9da:	99 f0       	breq	.+38     	; 0xa02 <__stack+0x5a3>
					count2 *= 10;
 9dc:	80 91 a3 00 	lds	r24, 0x00A3
 9e0:	90 91 a4 00 	lds	r25, 0x00A4
 9e4:	9c 01       	movw	r18, r24
 9e6:	22 0f       	add	r18, r18
 9e8:	33 1f       	adc	r19, r19
 9ea:	88 0f       	add	r24, r24
 9ec:	99 1f       	adc	r25, r25
 9ee:	88 0f       	add	r24, r24
 9f0:	99 1f       	adc	r25, r25
 9f2:	88 0f       	add	r24, r24
 9f4:	99 1f       	adc	r25, r25
 9f6:	82 0f       	add	r24, r18
 9f8:	93 1f       	adc	r25, r19
 9fa:	90 93 a4 00 	sts	0x00A4, r25
 9fe:	80 93 a3 00 	sts	0x00A3, r24
				count2 += 1;
 a02:	80 91 a3 00 	lds	r24, 0x00A3
 a06:	90 91 a4 00 	lds	r25, 0x00A4
 a0a:	01 96       	adiw	r24, 0x01	; 1
 a0c:	90 93 a4 00 	sts	0x00A4, r25
 a10:	80 93 a3 00 	sts	0x00A3, r24
			}
			Send_A_String("1");
 a14:	8a e8       	ldi	r24, 0x8A	; 138
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	0e 94 8b 00 	call	0x116	; 0x116 <Send_A_String>
			counter++;
 a1c:	80 91 9f 00 	lds	r24, 0x009F
 a20:	90 91 a0 00 	lds	r25, 0x00A0
 a24:	01 96       	adiw	r24, 0x01	; 1
 a26:	90 93 a0 00 	sts	0x00A0, r25
 a2a:	80 93 9f 00 	sts	0x009F, r24
 a2e:	87 ea       	ldi	r24, 0xA7	; 167
 a30:	91 e6       	ldi	r25, 0x61	; 97
 a32:	01 97       	sbiw	r24, 0x01	; 1
 a34:	f1 f7       	brne	.-4      	; 0xa32 <__stack+0x5d3>
 a36:	00 c0       	rjmp	.+0      	; 0xa38 <__stack+0x5d9>
 a38:	00 00       	nop
	
	
	
	
	_delay_ms(100);
}
 a3a:	0f 90       	pop	r0
 a3c:	0f 90       	pop	r0
 a3e:	0f 90       	pop	r0
 a40:	0f 90       	pop	r0
 a42:	0f 90       	pop	r0
 a44:	cf 91       	pop	r28
 a46:	df 91       	pop	r29
 a48:	1f 91       	pop	r17
 a4a:	0f 91       	pop	r16
 a4c:	08 95       	ret

00000a4e <KeypadScan>:
void KeypadScan()
{
	if( KeypadPortValue == 0b11110000 )
 a4e:	89 b3       	in	r24, 0x19	; 25
 a50:	80 3f       	cpi	r24, 0xF0	; 240
 a52:	09 f4       	brne	.+2      	; 0xa56 <KeypadScan+0x8>
 a54:	89 c0       	rjmp	.+274    	; 0xb68 <KeypadScan+0x11a>
 a56:	83 ed       	ldi	r24, 0xD3	; 211
 a58:	90 e3       	ldi	r25, 0x30	; 48
 a5a:	01 97       	sbiw	r24, 0x01	; 1
 a5c:	f1 f7       	brne	.-4      	; 0xa5a <KeypadScan+0xc>
 a5e:	00 c0       	rjmp	.+0      	; 0xa60 <KeypadScan+0x12>
 a60:	00 00       	nop

	_delay_ms(50);
	
	//Scan The Keypad

	uint8_t KeyPressCode = KeypadPortValue;
 a62:	89 b3       	in	r24, 0x19	; 25

	KeypadDirectionRegister ^= 0b11111111;
 a64:	9a b3       	in	r25, 0x1a	; 26
 a66:	90 95       	com	r25
 a68:	9a bb       	out	0x1a, r25	; 26
	KeypadPortControl ^= 0b11111111;
 a6a:	9b b3       	in	r25, 0x1b	; 27
 a6c:	90 95       	com	r25
 a6e:	9b bb       	out	0x1b, r25	; 27
	
	asm volatile("nop");
 a70:	00 00       	nop
	asm volatile("nop");
 a72:	00 00       	nop
	
	KeyPressCode |= KeypadPortValue;
 a74:	99 b3       	in	r25, 0x19	; 25
 a76:	89 2b       	or	r24, r25

	

	switch(KeyPressCode)
 a78:	8e 3b       	cpi	r24, 0xBE	; 190
 a7a:	d1 f1       	breq	.+116    	; 0xaf0 <KeypadScan+0xa2>
 a7c:	8f 3b       	cpi	r24, 0xBF	; 191
 a7e:	b8 f4       	brcc	.+46     	; 0xaae <KeypadScan+0x60>
 a80:	8e 37       	cpi	r24, 0x7E	; 126
 a82:	d1 f1       	breq	.+116    	; 0xaf8 <KeypadScan+0xaa>
 a84:	8f 37       	cpi	r24, 0x7F	; 127
 a86:	50 f4       	brcc	.+20     	; 0xa9c <KeypadScan+0x4e>
 a88:	8b 37       	cpi	r24, 0x7B	; 123
 a8a:	09 f4       	brne	.+2      	; 0xa8e <KeypadScan+0x40>
 a8c:	55 c0       	rjmp	.+170    	; 0xb38 <KeypadScan+0xea>
 a8e:	8d 37       	cpi	r24, 0x7D	; 125
 a90:	09 f4       	brne	.+2      	; 0xa94 <KeypadScan+0x46>
 a92:	42 c0       	rjmp	.+132    	; 0xb18 <KeypadScan+0xca>
 a94:	87 37       	cpi	r24, 0x77	; 119
 a96:	09 f0       	breq	.+2      	; 0xa9a <KeypadScan+0x4c>
 a98:	63 c0       	rjmp	.+198    	; 0xb60 <KeypadScan+0x112>
 a9a:	5e c0       	rjmp	.+188    	; 0xb58 <KeypadScan+0x10a>
 a9c:	8b 3b       	cpi	r24, 0xBB	; 187
 a9e:	09 f4       	brne	.+2      	; 0xaa2 <KeypadScan+0x54>
 aa0:	47 c0       	rjmp	.+142    	; 0xb30 <KeypadScan+0xe2>
 aa2:	8d 3b       	cpi	r24, 0xBD	; 189
 aa4:	a9 f1       	breq	.+106    	; 0xb10 <KeypadScan+0xc2>
 aa6:	87 3b       	cpi	r24, 0xB7	; 183
 aa8:	09 f0       	breq	.+2      	; 0xaac <KeypadScan+0x5e>
 aaa:	5a c0       	rjmp	.+180    	; 0xb60 <KeypadScan+0x112>
 aac:	51 c0       	rjmp	.+162    	; 0xb50 <KeypadScan+0x102>
 aae:	8e 3d       	cpi	r24, 0xDE	; 222
 ab0:	d9 f0       	breq	.+54     	; 0xae8 <KeypadScan+0x9a>
 ab2:	8f 3d       	cpi	r24, 0xDF	; 223
 ab4:	40 f4       	brcc	.+16     	; 0xac6 <KeypadScan+0x78>
 ab6:	8b 3d       	cpi	r24, 0xDB	; 219
 ab8:	b9 f1       	breq	.+110    	; 0xb28 <KeypadScan+0xda>
 aba:	8d 3d       	cpi	r24, 0xDD	; 221
 abc:	29 f1       	breq	.+74     	; 0xb08 <KeypadScan+0xba>
 abe:	87 3d       	cpi	r24, 0xD7	; 215
 ac0:	09 f0       	breq	.+2      	; 0xac4 <KeypadScan+0x76>
 ac2:	4e c0       	rjmp	.+156    	; 0xb60 <KeypadScan+0x112>
 ac4:	41 c0       	rjmp	.+130    	; 0xb48 <KeypadScan+0xfa>
 ac6:	8b 3e       	cpi	r24, 0xEB	; 235
 ac8:	59 f1       	breq	.+86     	; 0xb20 <KeypadScan+0xd2>
 aca:	8c 3e       	cpi	r24, 0xEC	; 236
 acc:	20 f4       	brcc	.+8      	; 0xad6 <KeypadScan+0x88>
 ace:	87 3e       	cpi	r24, 0xE7	; 231
 ad0:	09 f0       	breq	.+2      	; 0xad4 <KeypadScan+0x86>
 ad2:	46 c0       	rjmp	.+140    	; 0xb60 <KeypadScan+0x112>
 ad4:	35 c0       	rjmp	.+106    	; 0xb40 <KeypadScan+0xf2>
 ad6:	8d 3e       	cpi	r24, 0xED	; 237
 ad8:	99 f0       	breq	.+38     	; 0xb00 <KeypadScan+0xb2>
 ada:	8e 3e       	cpi	r24, 0xEE	; 238
 adc:	09 f0       	breq	.+2      	; 0xae0 <KeypadScan+0x92>
 ade:	40 c0       	rjmp	.+128    	; 0xb60 <KeypadScan+0x112>
	{
		case 0b11101110 :
		blinkDuration = 1;
 ae0:	81 e0       	ldi	r24, 0x01	; 1
 ae2:	80 93 9e 00 	sts	0x009E, r24
		break;
 ae6:	3e c0       	rjmp	.+124    	; 0xb64 <KeypadScan+0x116>
		case 0b11011110 :
		blinkDuration = 2;
 ae8:	82 e0       	ldi	r24, 0x02	; 2
 aea:	80 93 9e 00 	sts	0x009E, r24
		break;
 aee:	3a c0       	rjmp	.+116    	; 0xb64 <KeypadScan+0x116>
		case 0b10111110 :
		blinkDuration = 3;
 af0:	83 e0       	ldi	r24, 0x03	; 3
 af2:	80 93 9e 00 	sts	0x009E, r24
		break;
 af6:	36 c0       	rjmp	.+108    	; 0xb64 <KeypadScan+0x116>
		case 0b01111110 :
		blinkDuration = 4;
 af8:	84 e0       	ldi	r24, 0x04	; 4
 afa:	80 93 9e 00 	sts	0x009E, r24
		break;
 afe:	32 c0       	rjmp	.+100    	; 0xb64 <KeypadScan+0x116>
		case 0b11101101 :
		blinkDuration = 5;
 b00:	85 e0       	ldi	r24, 0x05	; 5
 b02:	80 93 9e 00 	sts	0x009E, r24
		break;
 b06:	2e c0       	rjmp	.+92     	; 0xb64 <KeypadScan+0x116>
		case 0b11011101 :
		blinkDuration = 6;
 b08:	86 e0       	ldi	r24, 0x06	; 6
 b0a:	80 93 9e 00 	sts	0x009E, r24
		break;
 b0e:	2a c0       	rjmp	.+84     	; 0xb64 <KeypadScan+0x116>
		case 0b10111101 :
		blinkDuration = 7;
 b10:	87 e0       	ldi	r24, 0x07	; 7
 b12:	80 93 9e 00 	sts	0x009E, r24
		break;
 b16:	26 c0       	rjmp	.+76     	; 0xb64 <KeypadScan+0x116>
		case 0b01111101 :
		blinkDuration = 8;
 b18:	88 e0       	ldi	r24, 0x08	; 8
 b1a:	80 93 9e 00 	sts	0x009E, r24
		break;
 b1e:	22 c0       	rjmp	.+68     	; 0xb64 <KeypadScan+0x116>
		case 0b11101011 :
		blinkDuration = 9;
 b20:	89 e0       	ldi	r24, 0x09	; 9
 b22:	80 93 9e 00 	sts	0x009E, r24
		break;
 b26:	1e c0       	rjmp	.+60     	; 0xb64 <KeypadScan+0x116>
		case 0b11011011 :
		blinkDuration = 10;
 b28:	8a e0       	ldi	r24, 0x0A	; 10
 b2a:	80 93 9e 00 	sts	0x009E, r24
		break;
 b2e:	1a c0       	rjmp	.+52     	; 0xb64 <KeypadScan+0x116>
		case 0b10111011 :
		blinkDuration = 11;
 b30:	8b e0       	ldi	r24, 0x0B	; 11
 b32:	80 93 9e 00 	sts	0x009E, r24
		break;
 b36:	16 c0       	rjmp	.+44     	; 0xb64 <KeypadScan+0x116>
		case 0b01111011 :
		blinkDuration = 12;
 b38:	8c e0       	ldi	r24, 0x0C	; 12
 b3a:	80 93 9e 00 	sts	0x009E, r24
		break;
 b3e:	12 c0       	rjmp	.+36     	; 0xb64 <KeypadScan+0x116>
		case 0b11100111 :
		blinkDuration = 13;
 b40:	8d e0       	ldi	r24, 0x0D	; 13
 b42:	80 93 9e 00 	sts	0x009E, r24
		break;
 b46:	0e c0       	rjmp	.+28     	; 0xb64 <KeypadScan+0x116>
		case 0b11010111 :
		blinkDuration = 14;
 b48:	8e e0       	ldi	r24, 0x0E	; 14
 b4a:	80 93 9e 00 	sts	0x009E, r24
		break;
 b4e:	0a c0       	rjmp	.+20     	; 0xb64 <KeypadScan+0x116>
		case 0b10110111 :
		blinkDuration = 15;
 b50:	8f e0       	ldi	r24, 0x0F	; 15
 b52:	80 93 9e 00 	sts	0x009E, r24
		break;
 b56:	06 c0       	rjmp	.+12     	; 0xb64 <KeypadScan+0x116>
		case 0b01110111 :
		blinkDuration = 16;
 b58:	80 e1       	ldi	r24, 0x10	; 16
 b5a:	80 93 9e 00 	sts	0x009E, r24
 b5e:	02 c0       	rjmp	.+4      	; 0xb64 <KeypadScan+0x116>
		break;

	}
	
	
	if(KeyPressCode < 0b11111111 )
 b60:	8f 3f       	cpi	r24, 0xFF	; 255
 b62:	11 f0       	breq	.+4      	; 0xb68 <KeypadScan+0x11a>
	{
		DO();
 b64:	0e 94 9a 00 	call	0x134	; 0x134 <DO>
 b68:	08 95       	ret

00000b6a <main>:
}


int main(void)
{
	KeypadDirectionRegister = 0b00001111;
 b6a:	8f e0       	ldi	r24, 0x0F	; 15
 b6c:	8a bb       	out	0x1a, r24	; 26
	KeypadPortControl = 0b11110000;
 b6e:	80 ef       	ldi	r24, 0xF0	; 240
 b70:	8b bb       	out	0x1b, r24	; 27
	
	
	DataDir_MrLCDsControl |= 1<<LightSwitch | 1<<ReadWrite | 1<<BiPolarMood;
 b72:	81 b3       	in	r24, 0x11	; 17
 b74:	84 6a       	ori	r24, 0xA4	; 164
 b76:	81 bb       	out	0x11, r24	; 17
 b78:	85 ea       	ldi	r24, 0xA5	; 165
 b7a:	9e e0       	ldi	r25, 0x0E	; 14
 b7c:	01 97       	sbiw	r24, 0x01	; 1
 b7e:	f1 f7       	brne	.-4      	; 0xb7c <main+0x12>
 b80:	00 c0       	rjmp	.+0      	; 0xb82 <main+0x18>
 b82:	00 00       	nop
	_delay_ms(15);

	Send_A_Command(0x01); //Clear Screen 0x01 = 00000001
 b84:	81 e0       	ldi	r24, 0x01	; 1
 b86:	0e 94 5e 00 	call	0xbc	; 0xbc <Send_A_Command>
 b8a:	a3 ef       	ldi	r26, 0xF3	; 243
 b8c:	b1 e0       	ldi	r27, 0x01	; 1
 b8e:	11 97       	sbiw	r26, 0x01	; 1
 b90:	f1 f7       	brne	.-4      	; 0xb8e <main+0x24>
 b92:	00 c0       	rjmp	.+0      	; 0xb94 <main+0x2a>
 b94:	00 00       	nop
	_delay_ms(2);
	Send_A_Command(0x38);
 b96:	88 e3       	ldi	r24, 0x38	; 56
 b98:	0e 94 5e 00 	call	0xbc	; 0xbc <Send_A_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b9c:	b0 e1       	ldi	r27, 0x10	; 16
 b9e:	ba 95       	dec	r27
 ba0:	f1 f7       	brne	.-4      	; 0xb9e <main+0x34>
 ba2:	00 c0       	rjmp	.+0      	; 0xba4 <main+0x3a>
	_delay_us(50);
	Send_A_Command(0b00001110);
 ba4:	8e e0       	ldi	r24, 0x0E	; 14
 ba6:	0e 94 5e 00 	call	0xbc	; 0xbc <Send_A_Command>
 baa:	80 e1       	ldi	r24, 0x10	; 16
 bac:	8a 95       	dec	r24
 bae:	f1 f7       	brne	.-4      	; 0xbac <main+0x42>
 bb0:	00 c0       	rjmp	.+0      	; 0xbb2 <main+0x48>
	_delay_us(50);

	Send_A_String("Welcome ...");
 bb2:	8c e8       	ldi	r24, 0x8C	; 140
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	0e 94 8b 00 	call	0x116	; 0x116 <Send_A_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 bba:	8f e3       	ldi	r24, 0x3F	; 63
 bbc:	9d e0       	ldi	r25, 0x0D	; 13
 bbe:	a3 e0       	ldi	r26, 0x03	; 3
 bc0:	81 50       	subi	r24, 0x01	; 1
 bc2:	90 40       	sbci	r25, 0x00	; 0
 bc4:	a0 40       	sbci	r26, 0x00	; 0
 bc6:	e1 f7       	brne	.-8      	; 0xbc0 <main+0x56>
 bc8:	00 c0       	rjmp	.+0      	; 0xbca <main+0x60>
 bca:	00 00       	nop
	_delay_ms(1000);
	cls();
 bcc:	0e 94 6b 00 	call	0xd6	; 0xd6 <cls>

	while(1)
	{
		KeypadScan();
 bd0:	0e 94 27 05 	call	0xa4e	; 0xa4e <KeypadScan>
 bd4:	fd cf       	rjmp	.-6      	; 0xbd0 <main+0x66>

00000bd6 <__divmodhi4>:
 bd6:	97 fb       	bst	r25, 7
 bd8:	09 2e       	mov	r0, r25
 bda:	07 26       	eor	r0, r23
 bdc:	0a d0       	rcall	.+20     	; 0xbf2 <__divmodhi4_neg1>
 bde:	77 fd       	sbrc	r23, 7
 be0:	04 d0       	rcall	.+8      	; 0xbea <__divmodhi4_neg2>
 be2:	0c d0       	rcall	.+24     	; 0xbfc <__udivmodhi4>
 be4:	06 d0       	rcall	.+12     	; 0xbf2 <__divmodhi4_neg1>
 be6:	00 20       	and	r0, r0
 be8:	1a f4       	brpl	.+6      	; 0xbf0 <__divmodhi4_exit>

00000bea <__divmodhi4_neg2>:
 bea:	70 95       	com	r23
 bec:	61 95       	neg	r22
 bee:	7f 4f       	sbci	r23, 0xFF	; 255

00000bf0 <__divmodhi4_exit>:
 bf0:	08 95       	ret

00000bf2 <__divmodhi4_neg1>:
 bf2:	f6 f7       	brtc	.-4      	; 0xbf0 <__divmodhi4_exit>
 bf4:	90 95       	com	r25
 bf6:	81 95       	neg	r24
 bf8:	9f 4f       	sbci	r25, 0xFF	; 255
 bfa:	08 95       	ret

00000bfc <__udivmodhi4>:
 bfc:	aa 1b       	sub	r26, r26
 bfe:	bb 1b       	sub	r27, r27
 c00:	51 e1       	ldi	r21, 0x11	; 17
 c02:	07 c0       	rjmp	.+14     	; 0xc12 <__udivmodhi4_ep>

00000c04 <__udivmodhi4_loop>:
 c04:	aa 1f       	adc	r26, r26
 c06:	bb 1f       	adc	r27, r27
 c08:	a6 17       	cp	r26, r22
 c0a:	b7 07       	cpc	r27, r23
 c0c:	10 f0       	brcs	.+4      	; 0xc12 <__udivmodhi4_ep>
 c0e:	a6 1b       	sub	r26, r22
 c10:	b7 0b       	sbc	r27, r23

00000c12 <__udivmodhi4_ep>:
 c12:	88 1f       	adc	r24, r24
 c14:	99 1f       	adc	r25, r25
 c16:	5a 95       	dec	r21
 c18:	a9 f7       	brne	.-22     	; 0xc04 <__udivmodhi4_loop>
 c1a:	80 95       	com	r24
 c1c:	90 95       	com	r25
 c1e:	bc 01       	movw	r22, r24
 c20:	cd 01       	movw	r24, r26
 c22:	08 95       	ret

00000c24 <itoa>:
 c24:	fb 01       	movw	r30, r22
 c26:	9f 01       	movw	r18, r30
 c28:	e8 94       	clt
 c2a:	42 30       	cpi	r20, 0x02	; 2
 c2c:	c4 f0       	brlt	.+48     	; 0xc5e <itoa+0x3a>
 c2e:	45 32       	cpi	r20, 0x25	; 37
 c30:	b4 f4       	brge	.+44     	; 0xc5e <itoa+0x3a>
 c32:	4a 30       	cpi	r20, 0x0A	; 10
 c34:	29 f4       	brne	.+10     	; 0xc40 <itoa+0x1c>
 c36:	97 fb       	bst	r25, 7
 c38:	1e f4       	brtc	.+6      	; 0xc40 <itoa+0x1c>
 c3a:	90 95       	com	r25
 c3c:	81 95       	neg	r24
 c3e:	9f 4f       	sbci	r25, 0xFF	; 255
 c40:	64 2f       	mov	r22, r20
 c42:	77 27       	eor	r23, r23
 c44:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__udivmodhi4>
 c48:	80 5d       	subi	r24, 0xD0	; 208
 c4a:	8a 33       	cpi	r24, 0x3A	; 58
 c4c:	0c f0       	brlt	.+2      	; 0xc50 <itoa+0x2c>
 c4e:	89 5d       	subi	r24, 0xD9	; 217
 c50:	81 93       	st	Z+, r24
 c52:	cb 01       	movw	r24, r22
 c54:	00 97       	sbiw	r24, 0x00	; 0
 c56:	a1 f7       	brne	.-24     	; 0xc40 <itoa+0x1c>
 c58:	16 f4       	brtc	.+4      	; 0xc5e <itoa+0x3a>
 c5a:	5d e2       	ldi	r21, 0x2D	; 45
 c5c:	51 93       	st	Z+, r21
 c5e:	10 82       	st	Z, r1
 c60:	c9 01       	movw	r24, r18
 c62:	0c 94 33 06 	jmp	0xc66	; 0xc66 <strrev>

00000c66 <strrev>:
 c66:	dc 01       	movw	r26, r24
 c68:	fc 01       	movw	r30, r24
 c6a:	67 2f       	mov	r22, r23
 c6c:	71 91       	ld	r23, Z+
 c6e:	77 23       	and	r23, r23
 c70:	e1 f7       	brne	.-8      	; 0xc6a <strrev+0x4>
 c72:	32 97       	sbiw	r30, 0x02	; 2
 c74:	04 c0       	rjmp	.+8      	; 0xc7e <strrev+0x18>
 c76:	7c 91       	ld	r23, X
 c78:	6d 93       	st	X+, r22
 c7a:	70 83       	st	Z, r23
 c7c:	62 91       	ld	r22, -Z
 c7e:	ae 17       	cp	r26, r30
 c80:	bf 07       	cpc	r27, r31
 c82:	c8 f3       	brcs	.-14     	; 0xc76 <strrev+0x10>
 c84:	08 95       	ret

00000c86 <_exit>:
 c86:	f8 94       	cli

00000c88 <__stop_program>:
 c88:	ff cf       	rjmp	.-2      	; 0xc88 <__stop_program>
