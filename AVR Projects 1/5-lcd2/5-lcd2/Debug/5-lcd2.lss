
5-lcd2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  0000038e  00000422  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000a8  008000a8  0000046a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000ea  00000000  00000000  00000bef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000557  00000000  00000000  00000cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000026d  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005fe  00000000  00000000  0000149d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c0  00000000  00000000  00001a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001c6  00000000  00000000  00001b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002b5  00000000  00000000  00001d22  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  00001fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  0000200f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3a       	cpi	r26, 0xA8	; 168
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 ea       	ldi	r26, 0xA8	; 168
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3a       	cpi	r26, 0xAC	; 172
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 95 01 	call	0x32a	; 0x32a <main>
  8a:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KeypadScan>:
void Send_A_String(char *string);


void KeypadScan()
{
	if( KeypadPortValue == 0b11110000 )
  92:	83 b3       	in	r24, 0x13	; 19
  94:	80 3f       	cpi	r24, 0xF0	; 240
  96:	09 f4       	brne	.+2      	; 0x9a <KeypadScan+0x8>
  98:	80 c0       	rjmp	.+256    	; 0x19a <KeypadScan+0x108>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	83 ed       	ldi	r24, 0xD3	; 211
  9c:	90 e3       	ldi	r25, 0x30	; 48
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <KeypadScan+0xc>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <KeypadScan+0x12>
  a4:	00 00       	nop

	_delay_ms(50);
	
	//Scan The Keypad

	uint8_t KeyPressCode = KeypadPortValue;
  a6:	83 b3       	in	r24, 0x13	; 19

	KeypadDirectionRegister ^= 0b11111111;
  a8:	94 b3       	in	r25, 0x14	; 20
  aa:	90 95       	com	r25
  ac:	94 bb       	out	0x14, r25	; 20
	KeypadPortControl ^= 0b11111111;
  ae:	95 b3       	in	r25, 0x15	; 21
  b0:	90 95       	com	r25
  b2:	95 bb       	out	0x15, r25	; 21
	
	asm volatile("nop");
  b4:	00 00       	nop
	asm volatile("nop");
  b6:	00 00       	nop
	
	KeyPressCode |= KeypadPortValue;
  b8:	93 b3       	in	r25, 0x13	; 19
  ba:	89 2b       	or	r24, r25

	uint8_t blinkDuration = 0;

	switch(KeyPressCode)
  bc:	8e 3b       	cpi	r24, 0xBE	; 190
  be:	81 f1       	breq	.+96     	; 0x120 <KeypadScan+0x8e>
  c0:	8f 3b       	cpi	r24, 0xBF	; 191
  c2:	a0 f4       	brcc	.+40     	; 0xec <KeypadScan+0x5a>
  c4:	8e 37       	cpi	r24, 0x7E	; 126
  c6:	71 f1       	breq	.+92     	; 0x124 <KeypadScan+0x92>
  c8:	8f 37       	cpi	r24, 0x7F	; 127
  ca:	40 f4       	brcc	.+16     	; 0xdc <KeypadScan+0x4a>
  cc:	8b 37       	cpi	r24, 0x7B	; 123
  ce:	d1 f1       	breq	.+116    	; 0x144 <KeypadScan+0xb2>
  d0:	8d 37       	cpi	r24, 0x7D	; 125
  d2:	81 f1       	breq	.+96     	; 0x134 <KeypadScan+0xa2>
  d4:	87 37       	cpi	r24, 0x77	; 119
  d6:	09 f0       	breq	.+2      	; 0xda <KeypadScan+0x48>
  d8:	60 c0       	rjmp	.+192    	; 0x19a <KeypadScan+0x108>
  da:	3c c0       	rjmp	.+120    	; 0x154 <KeypadScan+0xc2>
  dc:	8b 3b       	cpi	r24, 0xBB	; 187
  de:	81 f1       	breq	.+96     	; 0x140 <KeypadScan+0xae>
  e0:	8d 3b       	cpi	r24, 0xBD	; 189
  e2:	31 f1       	breq	.+76     	; 0x130 <KeypadScan+0x9e>
  e4:	87 3b       	cpi	r24, 0xB7	; 183
  e6:	09 f0       	breq	.+2      	; 0xea <KeypadScan+0x58>
  e8:	58 c0       	rjmp	.+176    	; 0x19a <KeypadScan+0x108>
  ea:	32 c0       	rjmp	.+100    	; 0x150 <KeypadScan+0xbe>
  ec:	8e 3d       	cpi	r24, 0xDE	; 222
  ee:	09 f4       	brne	.+2      	; 0xf2 <KeypadScan+0x60>
  f0:	4f c0       	rjmp	.+158    	; 0x190 <KeypadScan+0xfe>
  f2:	8f 3d       	cpi	r24, 0xDF	; 223
  f4:	40 f4       	brcc	.+16     	; 0x106 <KeypadScan+0x74>
  f6:	8b 3d       	cpi	r24, 0xDB	; 219
  f8:	09 f1       	breq	.+66     	; 0x13c <KeypadScan+0xaa>
  fa:	8d 3d       	cpi	r24, 0xDD	; 221
  fc:	b9 f0       	breq	.+46     	; 0x12c <KeypadScan+0x9a>
  fe:	87 3d       	cpi	r24, 0xD7	; 215
 100:	09 f0       	breq	.+2      	; 0x104 <KeypadScan+0x72>
 102:	4b c0       	rjmp	.+150    	; 0x19a <KeypadScan+0x108>
 104:	23 c0       	rjmp	.+70     	; 0x14c <KeypadScan+0xba>
 106:	8b 3e       	cpi	r24, 0xEB	; 235
 108:	b9 f0       	breq	.+46     	; 0x138 <KeypadScan+0xa6>
 10a:	8c 3e       	cpi	r24, 0xEC	; 236
 10c:	20 f4       	brcc	.+8      	; 0x116 <KeypadScan+0x84>
 10e:	87 3e       	cpi	r24, 0xE7	; 231
 110:	09 f0       	breq	.+2      	; 0x114 <KeypadScan+0x82>
 112:	43 c0       	rjmp	.+134    	; 0x19a <KeypadScan+0x108>
 114:	19 c0       	rjmp	.+50     	; 0x148 <KeypadScan+0xb6>
 116:	8d 3e       	cpi	r24, 0xED	; 237
 118:	39 f0       	breq	.+14     	; 0x128 <KeypadScan+0x96>
 11a:	8e 3e       	cpi	r24, 0xEE	; 238
 11c:	f1 f5       	brne	.+124    	; 0x19a <KeypadScan+0x108>
 11e:	36 c0       	rjmp	.+108    	; 0x18c <KeypadScan+0xfa>
		break;
		case 0b11011110 :
		blinkDuration = 2;
		break;
		case 0b10111110 :
		blinkDuration = 3;
 120:	23 e0       	ldi	r18, 0x03	; 3
		break;
 122:	37 c0       	rjmp	.+110    	; 0x192 <KeypadScan+0x100>
		case 0b01111110 :
		blinkDuration = 4;
 124:	24 e0       	ldi	r18, 0x04	; 4
		break;
 126:	35 c0       	rjmp	.+106    	; 0x192 <KeypadScan+0x100>
		case 0b11101101 :
		blinkDuration = 5;
 128:	25 e0       	ldi	r18, 0x05	; 5
		break;
 12a:	33 c0       	rjmp	.+102    	; 0x192 <KeypadScan+0x100>
		case 0b11011101 :
		blinkDuration = 6;
 12c:	26 e0       	ldi	r18, 0x06	; 6
		break;
 12e:	31 c0       	rjmp	.+98     	; 0x192 <KeypadScan+0x100>
		case 0b10111101 :
		blinkDuration = 7;
 130:	27 e0       	ldi	r18, 0x07	; 7
		break;
 132:	2f c0       	rjmp	.+94     	; 0x192 <KeypadScan+0x100>
		case 0b01111101 :
		blinkDuration = 8;
 134:	28 e0       	ldi	r18, 0x08	; 8
		break;
 136:	2d c0       	rjmp	.+90     	; 0x192 <KeypadScan+0x100>
		case 0b11101011 :
		blinkDuration = 9;
 138:	29 e0       	ldi	r18, 0x09	; 9
		break;
 13a:	2b c0       	rjmp	.+86     	; 0x192 <KeypadScan+0x100>
		case 0b11011011 :
		blinkDuration = 10;
 13c:	2a e0       	ldi	r18, 0x0A	; 10
		break;
 13e:	29 c0       	rjmp	.+82     	; 0x192 <KeypadScan+0x100>
		case 0b10111011 :
		blinkDuration = 11;
 140:	2b e0       	ldi	r18, 0x0B	; 11
		break;
 142:	27 c0       	rjmp	.+78     	; 0x192 <KeypadScan+0x100>
		case 0b01111011 :
		blinkDuration = 12;
 144:	2c e0       	ldi	r18, 0x0C	; 12
		break;
 146:	25 c0       	rjmp	.+74     	; 0x192 <KeypadScan+0x100>
		case 0b11100111 :
		blinkDuration = 13;
 148:	2d e0       	ldi	r18, 0x0D	; 13
		break;
 14a:	23 c0       	rjmp	.+70     	; 0x192 <KeypadScan+0x100>
		case 0b11010111 :
		blinkDuration = 14;
 14c:	2e e0       	ldi	r18, 0x0E	; 14
		break;
 14e:	21 c0       	rjmp	.+66     	; 0x192 <KeypadScan+0x100>
		case 0b10110111 :
		blinkDuration = 15;
 150:	2f e0       	ldi	r18, 0x0F	; 15
		break;
 152:	1f c0       	rjmp	.+62     	; 0x192 <KeypadScan+0x100>
		case 0b01110111 :
		blinkDuration = 16;
 154:	20 e1       	ldi	r18, 0x10	; 16
		break;
 156:	1d c0       	rjmp	.+58     	; 0x192 <KeypadScan+0x100>
	}
	
	
	if(KeyPressCode < 0b11111111 )
	{
		for(int i=0;i<blinkDuration;i++)
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTC ^= 1 << PINC0;//LED PORT
 15c:	41 e0       	ldi	r20, 0x01	; 1
 15e:	55 b3       	in	r21, 0x15	; 21
 160:	54 27       	eor	r21, r20
 162:	55 bb       	out	0x15, r21	; 21
 164:	e7 ea       	ldi	r30, 0xA7	; 167
 166:	f1 e6       	ldi	r31, 0x61	; 97
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <KeypadScan+0xd6>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <KeypadScan+0xdc>
 16e:	00 00       	nop
			_delay_ms(100);
			PORTC ^= 1 << PINC0;//LED PORT
 170:	55 b3       	in	r21, 0x15	; 21
 172:	54 27       	eor	r21, r20
 174:	55 bb       	out	0x15, r21	; 21
 176:	e7 ea       	ldi	r30, 0xA7	; 167
 178:	f1 e6       	ldi	r31, 0x61	; 97
 17a:	31 97       	sbiw	r30, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <KeypadScan+0xe8>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <KeypadScan+0xee>
 180:	00 00       	nop
	}
	
	
	if(KeyPressCode < 0b11111111 )
	{
		for(int i=0;i<blinkDuration;i++)
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	82 17       	cp	r24, r18
 186:	93 07       	cpc	r25, r19
 188:	54 f3       	brlt	.-44     	; 0x15e <KeypadScan+0xcc>
 18a:	08 95       	ret
	uint8_t blinkDuration = 0;

	switch(KeyPressCode)
	{
		case 0b11101110 :
		blinkDuration = 1;
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	01 c0       	rjmp	.+2      	; 0x192 <KeypadScan+0x100>
		break;
		case 0b11011110 :
		blinkDuration = 2;
 190:	22 e0       	ldi	r18, 0x02	; 2
	}
	
	
	if(KeyPressCode < 0b11111111 )
	{
		for(int i=0;i<blinkDuration;i++)
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	12 16       	cp	r1, r18
 196:	13 06       	cpc	r1, r19
 198:	fc f2       	brlt	.-66     	; 0x158 <KeypadScan+0xc6>
 19a:	08 95       	ret

0000019c <Peek_A_Boo>:
	DataDir_MrLCDsCrib = 0xFF; //0xFF means 0b11111111
}

void Peek_A_Boo()
{
	MrLCDsControl |= 1<<LightSwitch;
 19c:	95 9a       	sbi	0x12, 5	; 18
	asm volatile ("nop");
 19e:	00 00       	nop
	asm volatile ("nop");
 1a0:	00 00       	nop
	MrLCDsControl &= ~1<<LightSwitch;
 1a2:	82 b3       	in	r24, 0x12	; 18
 1a4:	80 7c       	andi	r24, 0xC0	; 192
 1a6:	82 bb       	out	0x12, r24	; 18
}
 1a8:	08 95       	ret

000001aa <Check_IF_MrLCD_isBusy>:
*/


void Check_IF_MrLCD_isBusy()
{
	DataDir_MrLCDsCrib = 0;
 1aa:	17 ba       	out	0x17, r1	; 23
	MrLCDsControl |= 1<<ReadWrite;
 1ac:	97 9a       	sbi	0x12, 7	; 18
	MrLCDsControl &= ~1<<BiPolarMood;
 1ae:	82 b3       	in	r24, 0x12	; 18
 1b0:	88 7f       	andi	r24, 0xF8	; 248
 1b2:	82 bb       	out	0x12, r24	; 18

	while (MrLCDsCrib >= 0x80)
 1b4:	c7 9b       	sbis	0x18, 7	; 24
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <Check_IF_MrLCD_isBusy+0x16>
	{
		Peek_A_Boo();
 1b8:	0e 94 ce 00 	call	0x19c	; 0x19c <Peek_A_Boo>
{
	DataDir_MrLCDsCrib = 0;
	MrLCDsControl |= 1<<ReadWrite;
	MrLCDsControl &= ~1<<BiPolarMood;

	while (MrLCDsCrib >= 0x80)
 1bc:	c7 99       	sbic	0x18, 7	; 24
 1be:	fc cf       	rjmp	.-8      	; 0x1b8 <Check_IF_MrLCD_isBusy+0xe>
	{
		Peek_A_Boo();
	}
	DataDir_MrLCDsCrib = 0xFF; //0xFF means 0b11111111
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	87 bb       	out	0x17, r24	; 23
}
 1c4:	08 95       	ret

000001c6 <Send_A_Command>:
	asm volatile ("nop");
	MrLCDsControl &= ~1<<LightSwitch;
}

void Send_A_Command(unsigned char command)
{
 1c6:	1f 93       	push	r17
 1c8:	18 2f       	mov	r17, r24
	Check_IF_MrLCD_isBusy();
 1ca:	0e 94 d5 00 	call	0x1aa	; 0x1aa <Check_IF_MrLCD_isBusy>
	MrLCDsCrib = command;
 1ce:	18 bb       	out	0x18, r17	; 24
	MrLCDsControl &= ~ ((1<<ReadWrite)|(1<<BiPolarMood));
 1d0:	82 b3       	in	r24, 0x12	; 18
 1d2:	8b 77       	andi	r24, 0x7B	; 123
 1d4:	82 bb       	out	0x12, r24	; 18
	Peek_A_Boo();
 1d6:	0e 94 ce 00 	call	0x19c	; 0x19c <Peek_A_Boo>
	MrLCDsCrib = 0;
 1da:	18 ba       	out	0x18, r1	; 24
}
 1dc:	1f 91       	pop	r17
 1de:	08 95       	ret

000001e0 <GotoLocation>:
	}
}

void GotoLocation(uint8_t x, uint8_t y)
{
	Send_A_Command(0x80 + firstColumnPosition[y] + x);
 1e0:	80 58       	subi	r24, 0x80	; 128
 1e2:	e6 2f       	mov	r30, r22
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	ed 55       	subi	r30, 0x5D	; 93
 1e8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ea:	90 81       	ld	r25, Z
 1ec:	89 0f       	add	r24, r25
 1ee:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Send_A_Command>
}
 1f2:	08 95       	ret

000001f4 <Send_A_Character>:
	Peek_A_Boo();
	MrLCDsCrib = 0;
}

void Send_A_Character(unsigned char character)
{
 1f4:	1f 93       	push	r17
 1f6:	18 2f       	mov	r17, r24
	Check_IF_MrLCD_isBusy();
 1f8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <Check_IF_MrLCD_isBusy>
	MrLCDsCrib = character;
 1fc:	18 bb       	out	0x18, r17	; 24
	MrLCDsControl &= ~ (1<<ReadWrite);
 1fe:	97 98       	cbi	0x12, 7	; 18
	MrLCDsControl |= 1<<BiPolarMood;
 200:	92 9a       	sbi	0x12, 2	; 18
	Peek_A_Boo();
 202:	0e 94 ce 00 	call	0x19c	; 0x19c <Peek_A_Boo>
	MrLCDsCrib = 0;
 206:	18 ba       	out	0x18, r1	; 24
}
 208:	1f 91       	pop	r17
 20a:	08 95       	ret

0000020c <Send_A_String>:
void Send_A_String(char *Str)
{
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	ec 01       	movw	r28, r24
	while(*Str > 0)
 212:	88 81       	ld	r24, Y
 214:	88 23       	and	r24, r24
 216:	31 f0       	breq	.+12     	; 0x224 <Send_A_String+0x18>
	MrLCDsControl &= ~ (1<<ReadWrite);
	MrLCDsControl |= 1<<BiPolarMood;
	Peek_A_Boo();
	MrLCDsCrib = 0;
}
void Send_A_String(char *Str)
 218:	21 96       	adiw	r28, 0x01	; 1
{
	while(*Str > 0)
	{
		Send_A_Character(*Str++);
 21a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Send_A_Character>
	Peek_A_Boo();
	MrLCDsCrib = 0;
}
void Send_A_String(char *Str)
{
	while(*Str > 0)
 21e:	89 91       	ld	r24, Y+
 220:	88 23       	and	r24, r24
 222:	d9 f7       	brne	.-10     	; 0x21a <Send_A_String+0xe>
	{
		Send_A_Character(*Str++);
	}
}
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <print>:
}



void print()
{
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
	if (on == 0)
 22e:	80 91 aa 00 	lds	r24, 0x00AA
 232:	90 91 ab 00 	lds	r25, 0x00AB
 236:	00 97       	sbiw	r24, 0x00	; 0
 238:	b9 f4       	brne	.+46     	; 0x268 <print+0x3e>
	{
		//on = 1;//you should not change on here and in ScanButton is enough
		//cls();
		GotoLocation(0,0);
 23a:	c0 ef       	ldi	r28, 0xF0	; 240
 23c:	d0 e0       	ldi	r29, 0x00	; 0
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	fe 01       	movw	r30, r28
 248:	09 95       	icall
		Send_A_String("                 ");
 24a:	80 e6       	ldi	r24, 0x60	; 96
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 06 01 	call	0x20c	; 0x20c <Send_A_String>
		GotoLocation(0,0);
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	fe 01       	movw	r30, r28
 25c:	09 95       	icall
		Send_A_String("Lamp Turned OFF!");
 25e:	82 e7       	ldi	r24, 0x72	; 114
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 06 01 	call	0x20c	; 0x20c <Send_A_String>
 266:	19 c0       	rjmp	.+50     	; 0x29a <print+0x70>
	}
	else if(on == 1)
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	91 05       	cpc	r25, r1
 26c:	b1 f4       	brne	.+44     	; 0x29a <print+0x70>
	{
		//on = 0;//you should not change on here and in ScanButton in enough
		//cls();
		GotoLocation(0,0);
 26e:	c0 ef       	ldi	r28, 0xF0	; 240
 270:	d0 e0       	ldi	r29, 0x00	; 0
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	fe 01       	movw	r30, r28
 27c:	09 95       	icall
		Send_A_String("                 ");
 27e:	80 e6       	ldi	r24, 0x60	; 96
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 06 01 	call	0x20c	; 0x20c <Send_A_String>
		GotoLocation(0,0);
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	fe 01       	movw	r30, r28
 290:	09 95       	icall
		Send_A_String("Lamp Turned ON!");
 292:	83 e8       	ldi	r24, 0x83	; 131
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 06 01 	call	0x20c	; 0x20c <Send_A_String>
	}

}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <ScanButton>:

void ScanButton()
{
	
	
	if(bit_is_clear(PINC, 1))
 2a0:	99 99       	sbic	0x13, 1	; 19
 2a2:	14 c0       	rjmp	.+40     	; 0x2cc <ScanButton+0x2c>
	{
		if(pressed >= 1000)
 2a4:	80 91 a8 00 	lds	r24, 0x00A8
 2a8:	90 91 a9 00 	lds	r25, 0x00A9
 2ac:	23 e0       	ldi	r18, 0x03	; 3
 2ae:	88 3e       	cpi	r24, 0xE8	; 232
 2b0:	92 07       	cpc	r25, r18
 2b2:	3c f0       	brlt	.+14     	; 0x2c2 <ScanButton+0x22>
		{
			pressed = 500;
 2b4:	84 ef       	ldi	r24, 0xF4	; 244
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	90 93 a9 00 	sts	0x00A9, r25
 2bc:	80 93 a8 00 	sts	0x00A8, r24
 2c0:	0d c0       	rjmp	.+26     	; 0x2dc <ScanButton+0x3c>
		}
		else
		{
			pressed++;
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	90 93 a9 00 	sts	0x00A9, r25
 2c8:	80 93 a8 00 	sts	0x00A8, r24
		}							
	}	
		
	if(pressed >= 400)
 2cc:	80 91 a8 00 	lds	r24, 0x00A8
 2d0:	90 91 a9 00 	lds	r25, 0x00A9
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	80 39       	cpi	r24, 0x90	; 144
 2d8:	92 07       	cpc	r25, r18
 2da:	14 f1       	brlt	.+68     	; 0x320 <ScanButton+0x80>
	{
		if(bit_is_clear(PINC,1))
 2dc:	99 9b       	sbis	0x13, 1	; 19
 2de:	20 c0       	rjmp	.+64     	; 0x320 <ScanButton+0x80>
		{
			//Do Nothing
		}
		else
		{
			PORTC ^= 1 << PINC0;
 2e0:	95 b3       	in	r25, 0x15	; 21
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	89 27       	eor	r24, r25
 2e6:	85 bb       	out	0x15, r24	; 21
			
			if(on == 0)
 2e8:	80 91 aa 00 	lds	r24, 0x00AA
 2ec:	90 91 ab 00 	lds	r25, 0x00AB
 2f0:	00 97       	sbiw	r24, 0x00	; 0
 2f2:	49 f4       	brne	.+18     	; 0x306 <ScanButton+0x66>
			{
				on = 1;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	90 93 ab 00 	sts	0x00AB, r25
 2fc:	80 93 aa 00 	sts	0x00AA, r24
				print();
 300:	0e 94 15 01 	call	0x22a	; 0x22a <print>
 304:	09 c0       	rjmp	.+18     	; 0x318 <ScanButton+0x78>
		    }
			else if (on == 1)
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	91 05       	cpc	r25, r1
 30a:	31 f4       	brne	.+12     	; 0x318 <ScanButton+0x78>
			{
				on = 0;
 30c:	10 92 ab 00 	sts	0x00AB, r1
 310:	10 92 aa 00 	sts	0x00AA, r1
				print();
 314:	0e 94 15 01 	call	0x22a	; 0x22a <print>
			}			
				
			//printed = 0;
			
			pressed = 0;					
 318:	10 92 a9 00 	sts	0x00A9, r1
 31c:	10 92 a8 00 	sts	0x00A8, r1
 320:	08 95       	ret

00000322 <cls>:
	Send_A_Command(0x80 + firstColumnPosition[y] + x);
}

void cls()
{
	Send_A_Command(0x01);
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Send_A_Command>
}
 328:	08 95       	ret

0000032a <main>:

int main(void)
{
	KeypadDirectionRegister = 0b00001111;
 32a:	8f e0       	ldi	r24, 0x0F	; 15
 32c:	84 bb       	out	0x14, r24	; 20
	KeypadPortControl = 0b11110000;
 32e:	80 ef       	ldi	r24, 0xF0	; 240
 330:	85 bb       	out	0x15, r24	; 21
	
	DDRC |= 1 << PINC0;
 332:	a0 9a       	sbi	0x14, 0	; 20
	DDRC &= ~(1 << PINC1);
 334:	a1 98       	cbi	0x14, 1	; 20
	PORTC |= 1 << PINC1;
 336:	a9 9a       	sbi	0x15, 1	; 21
	//PORTB ^= 1 << PINB0;
	
	DataDir_MrLCDsControl |= 1<<LightSwitch | 1<<ReadWrite | 1<<BiPolarMood;
 338:	81 b3       	in	r24, 0x11	; 17
 33a:	84 6a       	ori	r24, 0xA4	; 164
 33c:	81 bb       	out	0x11, r24	; 17
 33e:	85 ea       	ldi	r24, 0xA5	; 165
 340:	9e e0       	ldi	r25, 0x0E	; 14
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <main+0x18>
 346:	00 c0       	rjmp	.+0      	; 0x348 <main+0x1e>
 348:	00 00       	nop
	_delay_ms(15);

	Send_A_Command(0x01); //Clear Screen 0x01 = 00000001
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Send_A_Command>
 350:	83 ef       	ldi	r24, 0xF3	; 243
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <main+0x2a>
 358:	00 c0       	rjmp	.+0      	; 0x35a <main+0x30>
 35a:	00 00       	nop
	_delay_ms(2);
	Send_A_Command(0x38);
 35c:	88 e3       	ldi	r24, 0x38	; 56
 35e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Send_A_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 362:	90 e1       	ldi	r25, 0x10	; 16
 364:	9a 95       	dec	r25
 366:	f1 f7       	brne	.-4      	; 0x364 <main+0x3a>
 368:	00 c0       	rjmp	.+0      	; 0x36a <main+0x40>
	_delay_us(50);
	Send_A_Command(0b00001111);//last 1 is for blinking cursor
 36a:	8f e0       	ldi	r24, 0x0F	; 15
 36c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Send_A_Command>
 370:	80 e1       	ldi	r24, 0x10	; 16
 372:	8a 95       	dec	r24
 374:	f1 f7       	brne	.-4      	; 0x372 <main+0x48>
 376:	00 c0       	rjmp	.+0      	; 0x378 <main+0x4e>
	Send_A_Character(0x6F); //o
	//blink();
	Send_A_Character(0x6D); //m
	//blink();
	*/
	Send_A_String("Welcome to AVR!");
 378:	83 e9       	ldi	r24, 0x93	; 147
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 06 01 	call	0x20c	; 0x20c <Send_A_String>

	while(1)
	{
		KeypadScan();
 380:	0e 94 49 00 	call	0x92	; 0x92 <KeypadScan>
		ScanButton();
 384:	0e 94 50 01 	call	0x2a0	; 0x2a0 <ScanButton>
 388:	fb cf       	rjmp	.-10     	; 0x380 <main+0x56>

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
