
433Mhz_Tx_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000097  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000008a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000005a  00000000  00000000  000008c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001f9  00000000  00000000  0000091d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000163  00000000  00000000  00000b16  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000274  00000000  00000000  00000c79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000013a  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a1  00000000  00000000  0000108a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  0000112b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_Init>:
#define LEDOFF 0x22//switch led off command

void USART_Init(void)
{
	//Set baud rate
	UBRRL=(uint8_t)UBRRVAL;		//low byte
  6c:	83 e3       	ldi	r24, 0x33	; 51
  6e:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);	//high byte
  70:	10 bc       	out	0x20, r1	; 32
	//Set data frame format: asynchronous mode,no parity, 1 stop bit, 8 bit size
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|
  72:	86 e8       	ldi	r24, 0x86	; 134
  74:	80 bd       	out	0x20, r24	; 32
		(0<<USBS)|(0<<UCSZ2)|(1<<UCSZ1)|(1<<UCSZ0);	
	//Enable Transmitter and Receiver and Interrupt on receive complete
	UCSRB=(1<<TXEN);
  76:	88 e0       	ldi	r24, 0x08	; 8
  78:	8a b9       	out	0x0a, r24	; 10
}
  7a:	08 95       	ret

0000007c <USART_vSendByte>:
void USART_vSendByte(uint8_t u8Data)
{
    // Wait if a byte is being transmitted
    while((UCSRA&(1<<UDRE)) == 0);
  7c:	5d 9b       	sbis	0x0b, 5	; 11
  7e:	fe cf       	rjmp	.-4      	; 0x7c <USART_vSendByte>
    // Transmit data
    UDR = u8Data; 
  80:	8c b9       	out	0x0c, r24	; 12
}
  82:	08 95       	ret

00000084 <Send_Packet>:
void Send_Packet(uint8_t addr, uint8_t cmd)
{
  84:	0f 93       	push	r16
  86:	1f 93       	push	r17
  88:	18 2f       	mov	r17, r24
  8a:	06 2f       	mov	r16, r22
	USART_vSendByte(SYNC);//send synchro byte	
  8c:	8a ea       	ldi	r24, 0xAA	; 170
  8e:	0e 94 3e 00 	call	0x7c	; 0x7c <USART_vSendByte>
	USART_vSendByte(addr);//send receiver address
  92:	81 2f       	mov	r24, r17
  94:	0e 94 3e 00 	call	0x7c	; 0x7c <USART_vSendByte>
	USART_vSendByte(cmd);//send increment command
  98:	80 2f       	mov	r24, r16
  9a:	0e 94 3e 00 	call	0x7c	; 0x7c <USART_vSendByte>
	USART_vSendByte((addr+cmd));//send checksum
  9e:	80 2f       	mov	r24, r16
  a0:	81 0f       	add	r24, r17
  a2:	0e 94 3e 00 	call	0x7c	; 0x7c <USART_vSendByte>
}
  a6:	1f 91       	pop	r17
  a8:	0f 91       	pop	r16
  aa:	08 95       	ret

000000ac <delayms>:
void delayms(uint8_t t)//delay in ms
{
	uint8_t i;
	for(i=0;i<t;i++)
  ac:	88 23       	and	r24, r24
  ae:	51 f0       	breq	.+20     	; 0xc4 <delayms+0x18>
  b0:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	e9 ef       	ldi	r30, 0xF9	; 249
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <delayms+0xa>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <delayms+0x10>
  bc:	00 00       	nop
  be:	9f 5f       	subi	r25, 0xFF	; 255
  c0:	98 17       	cp	r25, r24
  c2:	b8 f3       	brcs	.-18     	; 0xb2 <delayms+0x6>
  c4:	08 95       	ret

000000c6 <main>:
		_delay_ms(1);
}
int main(void)
{
	USART_Init();
  c6:	0e 94 36 00 	call	0x6c	; 0x6c <USART_Init>
	while(1)
	{
		//endless transmission
		//send command to switch led ON
		Send_Packet(RADDR, LEDON);
  ca:	84 e4       	ldi	r24, 0x44	; 68
  cc:	61 e1       	ldi	r22, 0x11	; 17
  ce:	0e 94 42 00 	call	0x84	; 0x84 <Send_Packet>
		delayms(100);
  d2:	84 e6       	ldi	r24, 0x64	; 100
  d4:	0e 94 56 00 	call	0xac	; 0xac <delayms>
		//send command to switch led ON
		Send_Packet(RADDR, LEDOFF);
  d8:	84 e4       	ldi	r24, 0x44	; 68
  da:	62 e2       	ldi	r22, 0x22	; 34
  dc:	0e 94 42 00 	call	0x84	; 0x84 <Send_Packet>
		delayms(100);
  e0:	84 e6       	ldi	r24, 0x64	; 100
  e2:	0e 94 56 00 	call	0xac	; 0xac <delayms>
  e6:	f1 cf       	rjmp	.-30     	; 0xca <main+0x4>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
