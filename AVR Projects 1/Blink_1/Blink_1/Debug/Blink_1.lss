
Blink_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000000fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000097  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  0000085f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000025  00000000  00000000  0000087f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001ae  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000011b  00000000  00000000  00000a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ef  00000000  00000000  00000b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ff  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000038  00000000  00000000  00000e8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <blink>:
#include <avr/io.h>
#include <util/delay.h>

void blink()
{
	PORTB ^= 1 << PINB0;
  6c:	98 b3       	in	r25, 0x18	; 24
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	98 27       	eor	r25, r24
  72:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	2f e3       	ldi	r18, 0x3F	; 63
  76:	3d e0       	ldi	r19, 0x0D	; 13
  78:	43 e0       	ldi	r20, 0x03	; 3
  7a:	21 50       	subi	r18, 0x01	; 1
  7c:	30 40       	sbci	r19, 0x00	; 0
  7e:	40 40       	sbci	r20, 0x00	; 0
  80:	e1 f7       	brne	.-8      	; 0x7a <blink+0xe>
  82:	00 c0       	rjmp	.+0      	; 0x84 <blink+0x18>
  84:	00 00       	nop
	_delay_ms(1000);
	PORTB ^= 1 << PINB0;
  86:	98 b3       	in	r25, 0x18	; 24
  88:	89 27       	eor	r24, r25
  8a:	88 bb       	out	0x18, r24	; 24
  8c:	87 ea       	ldi	r24, 0xA7	; 167
  8e:	91 e6       	ldi	r25, 0x61	; 97
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <blink+0x24>
  94:	00 c0       	rjmp	.+0      	; 0x96 <blink+0x2a>
  96:	00 00       	nop
	_delay_ms(100);
}
  98:	08 95       	ret

0000009a <main>:

int main(void)
{
	DDRB |= 1 << PINB0;
  9a:	b8 9a       	sbi	0x17, 0	; 23
	
    while(1)
    {
        //TODO:: Please write your application code 
		blink();
  9c:	0e 94 36 00 	call	0x6c	; 0x6c <blink>
  a0:	fd cf       	rjmp	.-6      	; 0x9c <main+0x2>

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
