
3-Switch1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000100  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000097  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000863  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  00000883  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000009d  00000000  00000000  0000089e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000005d  00000000  00000000  0000093b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000016d  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000b08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000aa  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  00000bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000002b  00000000  00000000  00000c12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 54 00 	jmp	0xa8	; 0xa8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <avr/io.h>

int main(void)
{
    DDRB |= 1 << PINB0;
  6c:	b8 9a       	sbi	0x17, 0	; 23
	DDRB &= ~(1 << PINB1);
  6e:	b9 98       	cbi	0x17, 1	; 23
	
	PORTB |= 1 << PINB1;
  70:	c1 9a       	sbi	0x18, 1	; 24
	int pressed = 0;
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
	
		if(bit_is_clear(PINB, 1))
		{
			if(pressed >= 1000)
			{
				pressed = 500;
  76:	44 ef       	ldi	r20, 0xF4	; 244
  78:	51 e0       	ldi	r21, 0x01	; 1
			{
				//Do Nothing
			}
			else
			{
				PORTB ^= 1 << PINB0;
  7a:	61 e0       	ldi	r22, 0x01	; 1
				pressed = 0;					
  7c:	20 e0       	ldi	r18, 0x00	; 0
  7e:	30 e0       	ldi	r19, 0x00	; 0
		
		//KeypadScan();
		
		
	
		if(bit_is_clear(PINB, 1))
  80:	b1 99       	sbic	0x16, 1	; 22
  82:	05 c0       	rjmp	.+10     	; 0x8e <main+0x22>
		{
			if(pressed >= 1000)
  84:	73 e0       	ldi	r23, 0x03	; 3
  86:	88 3e       	cpi	r24, 0xE8	; 232
  88:	97 07       	cpc	r25, r23
  8a:	34 f4       	brge	.+12     	; 0x98 <main+0x2c>
			{
				pressed = 500;
			}
			else
			{
				pressed++;
  8c:	01 96       	adiw	r24, 0x01	; 1
			}							
		}	
		
		if(pressed >= 400)
  8e:	71 e0       	ldi	r23, 0x01	; 1
  90:	80 39       	cpi	r24, 0x90	; 144
  92:	97 07       	cpc	r25, r23
  94:	ac f3       	brlt	.-22     	; 0x80 <main+0x14>
  96:	01 c0       	rjmp	.+2      	; 0x9a <main+0x2e>
	
		if(bit_is_clear(PINB, 1))
		{
			if(pressed >= 1000)
			{
				pressed = 500;
  98:	ca 01       	movw	r24, r20
			}							
		}	
		
		if(pressed >= 400)
		{
			if(bit_is_clear(PINB,1))
  9a:	b1 9b       	sbis	0x16, 1	; 22
  9c:	f1 cf       	rjmp	.-30     	; 0x80 <main+0x14>
			{
				//Do Nothing
			}
			else
			{
				PORTB ^= 1 << PINB0;
  9e:	88 b3       	in	r24, 0x18	; 24
  a0:	86 27       	eor	r24, r22
  a2:	88 bb       	out	0x18, r24	; 24
				pressed = 0;					
  a4:	c9 01       	movw	r24, r18
  a6:	ec cf       	rjmp	.-40     	; 0x80 <main+0x14>

000000a8 <_exit>:
  a8:	f8 94       	cli

000000aa <__stop_program>:
  aa:	ff cf       	rjmp	.-2      	; 0xaa <__stop_program>
