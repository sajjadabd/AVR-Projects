
AnalogPWMLCD3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000086a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000086a  000008de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001e54  00000000  00000000  000008e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000076b  00000000  00000000  00002738  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00002ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000d2  00000000  00000000  00002ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000724  00000000  00000000  00002f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000027c  00000000  00000000  000036b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000742  00000000  00000000  00003935  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00004078  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000022c  00000000  00000000  00004148  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003da  00000000  00000000  00004374  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  0000474e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00004786  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a3 01 	call	0x346	; 0x346 <main>
  7a:	0c 94 33 04 	jmp	0x866	; 0x866 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_CmdWrite>:
// RW --> PIND7 // Read Write
// EN --> PIND5 // ENABLE

void LCD_CmdWrite( char a)
{
	if(a & 0x80) data_bus|=(1<<d7); else data_bus&= ~(1<<d7);
  82:	88 23       	and	r24, r24
  84:	14 f4       	brge	.+4      	; 0x8a <LCD_CmdWrite+0x8>
  86:	aa 9a       	sbi	0x15, 2	; 21
  88:	01 c0       	rjmp	.+2      	; 0x8c <LCD_CmdWrite+0xa>
  8a:	aa 98       	cbi	0x15, 2	; 21
	if(a & 0x40) data_bus|=(1<<d6); else data_bus&= ~(1<<d6);
  8c:	86 ff       	sbrs	r24, 6
  8e:	02 c0       	rjmp	.+4      	; 0x94 <LCD_CmdWrite+0x12>
  90:	ab 9a       	sbi	0x15, 3	; 21
  92:	01 c0       	rjmp	.+2      	; 0x96 <LCD_CmdWrite+0x14>
  94:	ab 98       	cbi	0x15, 3	; 21
	if(a & 0x20) data_bus|=(1<<d5); else data_bus&= ~(1<<d5);
  96:	85 ff       	sbrs	r24, 5
  98:	02 c0       	rjmp	.+4      	; 0x9e <LCD_CmdWrite+0x1c>
  9a:	ac 9a       	sbi	0x15, 4	; 21
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <LCD_CmdWrite+0x1e>
  9e:	ac 98       	cbi	0x15, 4	; 21
	if(a & 0x10) data_bus|=(1<<d4); else data_bus&= ~(1<<d4);
  a0:	84 ff       	sbrs	r24, 4
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <LCD_CmdWrite+0x26>
  a4:	ad 9a       	sbi	0x15, 5	; 21
  a6:	01 c0       	rjmp	.+2      	; 0xaa <LCD_CmdWrite+0x28>
  a8:	ad 98       	cbi	0x15, 5	; 21
	control_bus &=~(1<<rs);control_bus |=(1<<en);
  aa:	af 98       	cbi	0x15, 7	; 21
  ac:	ae 9a       	sbi	0x15, 6	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	e3 ef       	ldi	r30, 0xF3	; 243
  b0:	f1 e0       	ldi	r31, 0x01	; 1
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <LCD_CmdWrite+0x30>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <LCD_CmdWrite+0x36>
  b8:	00 00       	nop
	_delay_ms(2);
	control_bus &=~(1<<en);
  ba:	ae 98       	cbi	0x15, 6	; 21
  bc:	e3 ef       	ldi	r30, 0xF3	; 243
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <LCD_CmdWrite+0x3e>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <LCD_CmdWrite+0x44>
  c6:	00 00       	nop
	
	_delay_ms(2);
	
	if(a & 0x08) data_bus|=(1<<d7); else data_bus&= ~(1<<d7);
  c8:	83 ff       	sbrs	r24, 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <LCD_CmdWrite+0x4e>
  cc:	aa 9a       	sbi	0x15, 2	; 21
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <LCD_CmdWrite+0x50>
  d0:	aa 98       	cbi	0x15, 2	; 21
	if(a & 0x04) data_bus|=(1<<d6); else data_bus&= ~(1<<d6);
  d2:	82 ff       	sbrs	r24, 2
  d4:	02 c0       	rjmp	.+4      	; 0xda <LCD_CmdWrite+0x58>
  d6:	ab 9a       	sbi	0x15, 3	; 21
  d8:	01 c0       	rjmp	.+2      	; 0xdc <LCD_CmdWrite+0x5a>
  da:	ab 98       	cbi	0x15, 3	; 21
	if(a & 0x02) data_bus|=(1<<d5); else data_bus&= ~(1<<d5);
  dc:	81 ff       	sbrs	r24, 1
  de:	02 c0       	rjmp	.+4      	; 0xe4 <LCD_CmdWrite+0x62>
  e0:	ac 9a       	sbi	0x15, 4	; 21
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <LCD_CmdWrite+0x64>
  e4:	ac 98       	cbi	0x15, 4	; 21
	if(a & 0x01) data_bus|=(1<<d4); else data_bus&= ~(1<<d4);
  e6:	80 ff       	sbrs	r24, 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <LCD_CmdWrite+0x6c>
  ea:	ad 9a       	sbi	0x15, 5	; 21
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <LCD_CmdWrite+0x6e>
  ee:	ad 98       	cbi	0x15, 5	; 21
	control_bus &=~(1<<rs);control_bus |=(1<<en);
  f0:	af 98       	cbi	0x15, 7	; 21
  f2:	ae 9a       	sbi	0x15, 6	; 21
  f4:	83 ef       	ldi	r24, 0xF3	; 243
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_CmdWrite+0x76>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_CmdWrite+0x7c>
  fe:	00 00       	nop
	_delay_ms(2);
	control_bus &=~(1<<en);
 100:	ae 98       	cbi	0x15, 6	; 21
 102:	e3 ef       	ldi	r30, 0xF3	; 243
 104:	f1 e0       	ldi	r31, 0x01	; 1
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_CmdWrite+0x84>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_CmdWrite+0x8a>
 10c:	00 00       	nop
	
	_delay_ms(2);
}
 10e:	08 95       	ret

00000110 <LCD_DataWrite>:


void LCD_DataWrite( char a)
{
	
	if(a & 0x80) data_bus|=(1<<d7); else data_bus&= ~(1<<d7);
 110:	88 23       	and	r24, r24
 112:	14 f4       	brge	.+4      	; 0x118 <LCD_DataWrite+0x8>
 114:	aa 9a       	sbi	0x15, 2	; 21
 116:	01 c0       	rjmp	.+2      	; 0x11a <LCD_DataWrite+0xa>
 118:	aa 98       	cbi	0x15, 2	; 21
	if(a & 0x40) data_bus|=(1<<d6); else data_bus&= ~(1<<d6);
 11a:	86 ff       	sbrs	r24, 6
 11c:	02 c0       	rjmp	.+4      	; 0x122 <LCD_DataWrite+0x12>
 11e:	ab 9a       	sbi	0x15, 3	; 21
 120:	01 c0       	rjmp	.+2      	; 0x124 <LCD_DataWrite+0x14>
 122:	ab 98       	cbi	0x15, 3	; 21
	if(a & 0x20) data_bus|=(1<<d5); else data_bus&= ~(1<<d5);
 124:	85 ff       	sbrs	r24, 5
 126:	02 c0       	rjmp	.+4      	; 0x12c <LCD_DataWrite+0x1c>
 128:	ac 9a       	sbi	0x15, 4	; 21
 12a:	01 c0       	rjmp	.+2      	; 0x12e <LCD_DataWrite+0x1e>
 12c:	ac 98       	cbi	0x15, 4	; 21
	if(a & 0x10) data_bus|=(1<<d4); else data_bus&= ~(1<<d4);
 12e:	84 ff       	sbrs	r24, 4
 130:	02 c0       	rjmp	.+4      	; 0x136 <LCD_DataWrite+0x26>
 132:	ad 9a       	sbi	0x15, 5	; 21
 134:	01 c0       	rjmp	.+2      	; 0x138 <LCD_DataWrite+0x28>
 136:	ad 98       	cbi	0x15, 5	; 21
	control_bus |=(1<<rs)|(1<<en);
 138:	95 b3       	in	r25, 0x15	; 21
 13a:	90 6c       	ori	r25, 0xC0	; 192
 13c:	95 bb       	out	0x15, r25	; 21
 13e:	e3 ef       	ldi	r30, 0xF3	; 243
 140:	f1 e0       	ldi	r31, 0x01	; 1
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_DataWrite+0x32>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_DataWrite+0x38>
 148:	00 00       	nop
	_delay_ms(2);
	control_bus &=~(1<<en);
 14a:	ae 98       	cbi	0x15, 6	; 21
 14c:	e3 ef       	ldi	r30, 0xF3	; 243
 14e:	f1 e0       	ldi	r31, 0x01	; 1
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_DataWrite+0x40>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_DataWrite+0x46>
 156:	00 00       	nop
	_delay_ms(2);
	
	if(a & 0x08) data_bus|=(1<<d7); else data_bus&= ~(1<<d7);
 158:	83 ff       	sbrs	r24, 3
 15a:	02 c0       	rjmp	.+4      	; 0x160 <LCD_DataWrite+0x50>
 15c:	aa 9a       	sbi	0x15, 2	; 21
 15e:	01 c0       	rjmp	.+2      	; 0x162 <LCD_DataWrite+0x52>
 160:	aa 98       	cbi	0x15, 2	; 21
	if(a & 0x04) data_bus|=(1<<d6); else data_bus&= ~(1<<d6);
 162:	82 ff       	sbrs	r24, 2
 164:	02 c0       	rjmp	.+4      	; 0x16a <LCD_DataWrite+0x5a>
 166:	ab 9a       	sbi	0x15, 3	; 21
 168:	01 c0       	rjmp	.+2      	; 0x16c <LCD_DataWrite+0x5c>
 16a:	ab 98       	cbi	0x15, 3	; 21
	if(a & 0x02) data_bus|=(1<<d5); else data_bus&= ~(1<<d5);
 16c:	81 ff       	sbrs	r24, 1
 16e:	02 c0       	rjmp	.+4      	; 0x174 <LCD_DataWrite+0x64>
 170:	ac 9a       	sbi	0x15, 4	; 21
 172:	01 c0       	rjmp	.+2      	; 0x176 <LCD_DataWrite+0x66>
 174:	ac 98       	cbi	0x15, 4	; 21
	if(a & 0x01) data_bus|=(1<<d4); else data_bus&= ~(1<<d4);
 176:	80 ff       	sbrs	r24, 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <LCD_DataWrite+0x6e>
 17a:	ad 9a       	sbi	0x15, 5	; 21
 17c:	01 c0       	rjmp	.+2      	; 0x180 <LCD_DataWrite+0x70>
 17e:	ad 98       	cbi	0x15, 5	; 21
	control_bus |=(1<<rs)|(1<<en);
 180:	85 b3       	in	r24, 0x15	; 21
 182:	80 6c       	ori	r24, 0xC0	; 192
 184:	85 bb       	out	0x15, r24	; 21
 186:	83 ef       	ldi	r24, 0xF3	; 243
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD_DataWrite+0x7a>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD_DataWrite+0x80>
 190:	00 00       	nop
	_delay_ms(2);
	control_bus &=~(1<<en);
 192:	ae 98       	cbi	0x15, 6	; 21
 194:	e3 ef       	ldi	r30, 0xF3	; 243
 196:	f1 e0       	ldi	r31, 0x01	; 1
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_DataWrite+0x88>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_DataWrite+0x8e>
 19e:	00 00       	nop
	_delay_ms(2);
	
}
 1a0:	08 95       	ret

000001a2 <cls>:


void cls()
{
	LCD_CmdWrite(0x01); // clear display
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
	LCD_CmdWrite(0x80); // force cursor to begin at line1
 1a8:	80 e8       	ldi	r24, 0x80	; 128
 1aa:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
}
 1ae:	08 95       	ret

000001b0 <LCD_Init>:


void LCD_Init()
{
	controlbus_direction |= ((1<<rs)|(1<<en));
 1b0:	84 b3       	in	r24, 0x14	; 20
 1b2:	80 6c       	ori	r24, 0xC0	; 192
 1b4:	84 bb       	out	0x14, r24	; 20
	databus_direction |= ((1<<d7)|(1<<d6)|(1<<d5)|(1<<d4));
 1b6:	84 b3       	in	r24, 0x14	; 20
 1b8:	8c 63       	ori	r24, 0x3C	; 60
 1ba:	84 bb       	out	0x14, r24	; 20
 1bc:	83 ef       	ldi	r24, 0xF3	; 243
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCD_Init+0x10>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCD_Init+0x16>
 1c6:	00 00       	nop
	_delay_ms(2);
	LCD_CmdWrite(0x01); // clear display
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
	LCD_CmdWrite(0x02); // back to home	
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
	LCD_CmdWrite(0x28); // 4bit,2line,5x7 pixel
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
	LCD_CmdWrite(0x06); // entry mode,cursor increments by cursor shift
 1da:	86 e0       	ldi	r24, 0x06	; 6
 1dc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
	LCD_CmdWrite(0x0c); // display ON,cursor OFF
 1e0:	8c e0       	ldi	r24, 0x0C	; 12
 1e2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
	LCD_CmdWrite(0x80); // force cursor to begin at line1
 1e6:	80 e8       	ldi	r24, 0x80	; 128
 1e8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>

}
 1ec:	08 95       	ret

000001ee <LCD_Disp>:

void LCD_Disp(const char *p)
{
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ec 01       	movw	r28, r24
	while(*p!='\0')
 1f4:	88 81       	ld	r24, Y
 1f6:	88 23       	and	r24, r24
 1f8:	61 f0       	breq	.+24     	; 0x212 <LCD_Disp+0x24>
	LCD_CmdWrite(0x0c); // display ON,cursor OFF
	LCD_CmdWrite(0x80); // force cursor to begin at line1

}

void LCD_Disp(const char *p)
 1fa:	21 96       	adiw	r28, 0x01	; 1
{
	while(*p!='\0')
	{
		LCD_DataWrite(*p);
 1fc:	0e 94 88 00 	call	0x110	; 0x110 <LCD_DataWrite>
 200:	83 ef       	ldi	r24, 0xF3	; 243
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <LCD_Disp+0x16>
 208:	00 c0       	rjmp	.+0      	; 0x20a <LCD_Disp+0x1c>
 20a:	00 00       	nop

}

void LCD_Disp(const char *p)
{
	while(*p!='\0')
 20c:	89 91       	ld	r24, Y+
 20e:	88 23       	and	r24, r24
 210:	a9 f7       	brne	.-22     	; 0x1fc <LCD_Disp+0xe>
	{
		LCD_DataWrite(*p);
		p++; _delay_ms(2);
	}
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <LCD_setCursor>:

void LCD_setCursor(int a, int b)
{
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	8c 01       	movw	r16, r24
	int i=0;
	switch(b)
 222:	61 30       	cpi	r22, 0x01	; 1
 224:	71 05       	cpc	r23, r1
 226:	91 f0       	breq	.+36     	; 0x24c <LCD_setCursor+0x34>
 228:	62 30       	cpi	r22, 0x02	; 2
 22a:	71 05       	cpc	r23, r1
 22c:	24 f4       	brge	.+8      	; 0x236 <LCD_setCursor+0x1e>
 22e:	61 15       	cp	r22, r1
 230:	71 05       	cpc	r23, r1
 232:	41 f0       	breq	.+16     	; 0x244 <LCD_setCursor+0x2c>
 234:	16 c0       	rjmp	.+44     	; 0x262 <LCD_setCursor+0x4a>
 236:	62 30       	cpi	r22, 0x02	; 2
 238:	71 05       	cpc	r23, r1
 23a:	61 f0       	breq	.+24     	; 0x254 <LCD_setCursor+0x3c>
 23c:	63 30       	cpi	r22, 0x03	; 3
 23e:	71 05       	cpc	r23, r1
 240:	81 f4       	brne	.+32     	; 0x262 <LCD_setCursor+0x4a>
 242:	0c c0       	rjmp	.+24     	; 0x25c <LCD_setCursor+0x44>
	{
		case 0:LCD_CmdWrite(0x80);break;
 244:	80 e8       	ldi	r24, 0x80	; 128
 246:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
 24a:	0b c0       	rjmp	.+22     	; 0x262 <LCD_setCursor+0x4a>
		case 1:LCD_CmdWrite(0xC0);break;
 24c:	80 ec       	ldi	r24, 0xC0	; 192
 24e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
 252:	07 c0       	rjmp	.+14     	; 0x262 <LCD_setCursor+0x4a>
		case 2:LCD_CmdWrite(0x94);break;
 254:	84 e9       	ldi	r24, 0x94	; 148
 256:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
 25a:	03 c0       	rjmp	.+6      	; 0x262 <LCD_setCursor+0x4a>
		case 3:LCD_CmdWrite(0xd4);break;
 25c:	84 ed       	ldi	r24, 0xD4	; 212
 25e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
	}
	for(i=0;i<a;i++)
 262:	10 16       	cp	r1, r16
 264:	11 06       	cpc	r1, r17
 266:	4c f4       	brge	.+18     	; 0x27a <LCD_setCursor+0x62>
 268:	c0 e0       	ldi	r28, 0x00	; 0
 26a:	d0 e0       	ldi	r29, 0x00	; 0
		LCD_CmdWrite(0x14);
 26c:	84 e1       	ldi	r24, 0x14	; 20
 26e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
		case 0:LCD_CmdWrite(0x80);break;
		case 1:LCD_CmdWrite(0xC0);break;
		case 2:LCD_CmdWrite(0x94);break;
		case 3:LCD_CmdWrite(0xd4);break;
	}
	for(i=0;i<a;i++)
 272:	21 96       	adiw	r28, 0x01	; 1
 274:	c0 17       	cp	r28, r16
 276:	d1 07       	cpc	r29, r17
 278:	cc f3       	brlt	.-14     	; 0x26c <LCD_setCursor+0x54>
		LCD_CmdWrite(0x14);
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	08 95       	ret

00000284 <map>:


//map(val, 0, 1023, 0, 255);
uint16_t map(uint16_t input,uint16_t input_start,uint16_t input_end,uint16_t output_start,uint16_t output_end)
{
 284:	8f 92       	push	r8
 286:	9f 92       	push	r9
 288:	af 92       	push	r10
 28a:	bf 92       	push	r11
 28c:	cf 92       	push	r12
 28e:	df 92       	push	r13
 290:	ef 92       	push	r14
 292:	ff 92       	push	r15
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	6b 01       	movw	r12, r22
 29e:	ea 01       	movw	r28, r20
 2a0:	49 01       	movw	r8, r18
	float output = input;
 2a2:	bc 01       	movw	r22, r24
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__floatunsisf>
 2ac:	f6 2e       	mov	r15, r22
 2ae:	e7 2e       	mov	r14, r23
 2b0:	b8 2e       	mov	r11, r24
 2b2:	a9 2e       	mov	r10, r25
	uint16_t input_range = input_end - input_start;
 2b4:	cc 19       	sub	r28, r12
 2b6:	dd 09       	sbc	r29, r13
	uint16_t output_range = output_end - output_start;

	//output = (input - input_start)*output_range / input_range + output_start;
	//output = (input*255) / 1023;
	output /= (float)input_range;
 2b8:	be 01       	movw	r22, r28
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__floatunsisf>
 2c2:	9b 01       	movw	r18, r22
 2c4:	ac 01       	movw	r20, r24
 2c6:	6f 2d       	mov	r22, r15
 2c8:	7e 2d       	mov	r23, r14
 2ca:	8b 2d       	mov	r24, r11
 2cc:	9a 2d       	mov	r25, r10
 2ce:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__divsf3>
 2d2:	e6 2e       	mov	r14, r22
 2d4:	f7 2e       	mov	r15, r23
 2d6:	d8 2e       	mov	r13, r24
 2d8:	c9 2e       	mov	r12, r25
//map(val, 0, 1023, 0, 255);
uint16_t map(uint16_t input,uint16_t input_start,uint16_t input_end,uint16_t output_start,uint16_t output_end)
{
	float output = input;
	uint16_t input_range = input_end - input_start;
	uint16_t output_range = output_end - output_start;
 2da:	08 19       	sub	r16, r8
 2dc:	19 09       	sbc	r17, r9

	//output = (input - input_start)*output_range / input_range + output_start;
	//output = (input*255) / 1023;
	output /= (float)input_range;
	output *= output_range;
 2de:	b8 01       	movw	r22, r16
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__floatunsisf>
 2e8:	2e 2d       	mov	r18, r14
 2ea:	3f 2d       	mov	r19, r15
 2ec:	4d 2d       	mov	r20, r13
 2ee:	5c 2d       	mov	r21, r12
 2f0:	0e 94 8b 03 	call	0x716	; 0x716 <__mulsf3>
	
	return output;
 2f4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__fixunssfsi>
}
 2f8:	86 2f       	mov	r24, r22
 2fa:	97 2f       	mov	r25, r23
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	ff 90       	pop	r15
 306:	ef 90       	pop	r14
 308:	df 90       	pop	r13
 30a:	cf 90       	pop	r12
 30c:	bf 90       	pop	r11
 30e:	af 90       	pop	r10
 310:	9f 90       	pop	r9
 312:	8f 90       	pop	r8
 314:	08 95       	ret

00000316 <initPWM>:

void initPWM()
{
	TCCR0 |= 1 << WGM00 | 1 << WGM01 | 1 << CS00 | 1 << COM01;
 316:	83 b7       	in	r24, 0x33	; 51
 318:	89 66       	ori	r24, 0x69	; 105
 31a:	83 bf       	out	0x33, r24	; 51
	//DDRC |= (1 << PC5) | (1 << PC4);
	
	//DDRD |= 1 << PIND4;
	
	//DDRD |= 1 << PINB3;
}
 31c:	08 95       	ret

0000031e <setPWMOutput>:

void setPWMOutput(int duty)
{
	// D3   D5    D6   B3
	OCR0 = duty;
 31e:	8c bf       	out	0x3c, r24	; 60
	//INT1 = duty;
	//D3
	//OCR1B = duty;
	//OCR1A = duty;
	//ICP1 = duty;
}
 320:	08 95       	ret

00000322 <adc_init>:

// initialize adc
void adc_init()
{
    // AREF = AVcc
    ADMUX = (1<<REFS0);
 322:	80 e4       	ldi	r24, 0x40	; 64
 324:	87 b9       	out	0x07, r24	; 7
 
    // ADC Enable and prescaler of 128
    // 16000000/128 = 125000
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 326:	87 e8       	ldi	r24, 0x87	; 135
 328:	86 b9       	out	0x06, r24	; 6
}
 32a:	08 95       	ret

0000032c <adc_read>:
{
    // select the corresponding channel 0~7
    // ANDing with '7' will always keep the value
    // of 'ch' between 0 and 7
    ch &= 0b00000111;  // AND operation with 7
    ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
 32c:	97 b1       	in	r25, 0x07	; 7
uint16_t adc_read(uint8_t ch)
{
    // select the corresponding channel 0~7
    // ANDing with '7' will always keep the value
    // of 'ch' between 0 and 7
    ch &= 0b00000111;  // AND operation with 7
 32e:	87 70       	andi	r24, 0x07	; 7
    ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
 330:	98 7f       	andi	r25, 0xF8	; 248
 332:	98 2b       	or	r25, r24
 334:	97 b9       	out	0x07, r25	; 7
 
    // start single conversion
    // write '1' to ADSC
    ADCSRA |= (1<<ADSC);
 336:	36 9a       	sbi	0x06, 6	; 6
 
    // wait for conversion to complete
    // ADSC becomes '0' again
    // till then, run loop continuously
    while(ADCSRA & (1<<ADSC));
 338:	36 99       	sbic	0x06, 6	; 6
 33a:	fe cf       	rjmp	.-4      	; 0x338 <adc_read+0xc>
 
    return (ADC);
 33c:	24 b1       	in	r18, 0x04	; 4
 33e:	35 b1       	in	r19, 0x05	; 5
}
 340:	82 2f       	mov	r24, r18
 342:	93 2f       	mov	r25, r19
 344:	08 95       	ret

00000346 <main>:
	_delay_ms(2);
}
*/
 
int main()
{
 346:	2f 92       	push	r2
 348:	3f 92       	push	r3
 34a:	4f 92       	push	r4
 34c:	5f 92       	push	r5
 34e:	6f 92       	push	r6
 350:	7f 92       	push	r7
 352:	8f 92       	push	r8
 354:	9f 92       	push	r9
 356:	af 92       	push	r10
 358:	bf 92       	push	r11
 35a:	cf 92       	push	r12
 35c:	df 92       	push	r13
 35e:	ef 92       	push	r14
 360:	ff 92       	push	r15
 362:	0f 93       	push	r16
 364:	1f 93       	push	r17
 366:	df 93       	push	r29
 368:	cf 93       	push	r28
 36a:	00 d0       	rcall	.+0      	; 0x36c <main+0x26>
 36c:	00 d0       	rcall	.+0      	; 0x36e <main+0x28>
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
	//disable JTAG
	MCUCSR = (1 << JTD);
 372:	80 e8       	ldi	r24, 0x80	; 128
 374:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1 << JTD);
 376:	84 bf       	out	0x34, r24	; 52
    char int_buffer[10];
    //DDRC = 0x01;           // to connect led to PC0
	//DDRB |= 1 << PINB3;
	//initPWM();
    // initialize adc and lcd
    adc_init();
 378:	0e 94 91 01 	call	0x322	; 0x322 <adc_init>
    //lcd_gotoxy(0,1);
    //lcd_puts("right ADC = ");
	
	
	//initializing LCD
	LCD_Init();
 37c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_Init>
 380:	83 ed       	ldi	r24, 0xD3	; 211
 382:	90 e3       	ldi	r25, 0x30	; 48
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <main+0x3e>
 388:	00 c0       	rjmp	.+0      	; 0x38a <main+0x44>
 38a:	00 00       	nop
	//disable JTAG
	MCUCSR = (1 << JTD);
	MCUCSR = (1 << JTD);

	uint16_t temp0 = 0;
	uint16_t temp1 = 0;
 38c:	44 24       	eor	r4, r4
 38e:	55 24       	eor	r5, r5
{
	//disable JTAG
	MCUCSR = (1 << JTD);
	MCUCSR = (1 << JTD);

	uint16_t temp0 = 0;
 390:	22 24       	eor	r2, r2
 392:	33 24       	eor	r3, r3
		{
			temp0 = adc_result0;
			
			cls();
			
			itoa(adc_result0, positionString, 10); // convert integer to string
 394:	7e 01       	movw	r14, r28
 396:	08 94       	sec
 398:	e1 1c       	adc	r14, r1
 39a:	f1 1c       	adc	r15, r1
			//Send_A_String(positionString);
			//Send_A_String("/");
			LCD_Disp(positionString);
			LCD_Disp("/");
 39c:	0f 2e       	mov	r0, r31
 39e:	f0 e6       	ldi	r31, 0x60	; 96
 3a0:	8f 2e       	mov	r8, r31
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	9f 2e       	mov	r9, r31
 3a6:	f0 2d       	mov	r31, r0
 
    _delay_ms(50);
 
    while(1)
    {
        adc_result0 = adc_read(0);      // read adc value at PA0
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	0e 94 96 01 	call	0x32c	; 0x32c <adc_read>
 3ae:	6c 01       	movw	r12, r24
		
		//adc_result0 *= 255; // the problem is here can not calculate number*255 (overload happen)
		//adc_result0 /= 1023;
		adc0 = map(adc_result0,0,1023,0,255);
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	4f ef       	ldi	r20, 0xFF	; 255
 3b6:	53 e0       	ldi	r21, 0x03	; 3
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	0f ef       	ldi	r16, 0xFF	; 255
 3be:	10 e0       	ldi	r17, 0x00	; 0
 3c0:	0e 94 42 01 	call	0x284	; 0x284 <map>
 3c4:	3c 01       	movw	r6, r24
		
		adc_result1 = adc_read(1);      // read adc value at PA1
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 96 01 	call	0x32c	; 0x32c <adc_read>
 3cc:	5c 01       	movw	r10, r24
		
		//adc_result1 *= 255; // the problem is here can not calculate number*255 (overload happen)
		//adc_result1 /= 1023;
		
		adc1 = map(adc_result1,0,1023,0,255);
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	4f ef       	ldi	r20, 0xFF	; 255
 3d4:	53 e0       	ldi	r21, 0x03	; 3
 3d6:	20 e0       	ldi	r18, 0x00	; 0
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	0e 94 42 01 	call	0x284	; 0x284 <map>
 3de:	8c 01       	movw	r16, r24
		
		if ( adc_result0 != temp0 )
 3e0:	c2 14       	cp	r12, r2
 3e2:	d3 04       	cpc	r13, r3
 3e4:	99 f1       	breq	.+102    	; 0x44c <main+0x106>
		{
			temp0 = adc_result0;
			
			cls();
 3e6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <cls>
			
			itoa(adc_result0, positionString, 10); // convert integer to string
 3ea:	c6 01       	movw	r24, r12
 3ec:	b7 01       	movw	r22, r14
 3ee:	4a e0       	ldi	r20, 0x0A	; 10
 3f0:	50 e0       	ldi	r21, 0x00	; 0
 3f2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <itoa>
			//Send_A_String(positionString);
			//Send_A_String("/");
			LCD_Disp(positionString);
 3f6:	c7 01       	movw	r24, r14
 3f8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_Disp>
			LCD_Disp("/");
 3fc:	c4 01       	movw	r24, r8
 3fe:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_Disp>
			itoa(adc_result1, positionString, 10);
 402:	c5 01       	movw	r24, r10
 404:	b7 01       	movw	r22, r14
 406:	4a e0       	ldi	r20, 0x0A	; 10
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <itoa>
			//Send_A_String(positionString);
			LCD_Disp(positionString);
 40e:	c7 01       	movw	r24, r14
 410:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_Disp>
			
			//GotoMrLCDsLocation(64, 0);
			//LCD_setCursor(1,0); // this means x = 1 , y = 0
			LCD_setCursor(0,1); // this means x = 0 , y = 1
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	61 e0       	ldi	r22, 0x01	; 1
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_setCursor>
			
			
			itoa(adc0, positionString, 10); // convert integer to string
 420:	c3 01       	movw	r24, r6
 422:	b7 01       	movw	r22, r14
 424:	4a e0       	ldi	r20, 0x0A	; 10
 426:	50 e0       	ldi	r21, 0x00	; 0
 428:	0e 94 ee 03 	call	0x7dc	; 0x7dc <itoa>
			//Send_A_String(positionString);
			//Send_A_String("/");
			LCD_Disp(positionString);
 42c:	c7 01       	movw	r24, r14
 42e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_Disp>
			LCD_Disp("/");
 432:	c4 01       	movw	r24, r8
 434:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_Disp>
			itoa(adc1, positionString, 10);
 438:	c8 01       	movw	r24, r16
 43a:	b7 01       	movw	r22, r14
 43c:	4a e0       	ldi	r20, 0x0A	; 10
 43e:	50 e0       	ldi	r21, 0x00	; 0
 440:	0e 94 ee 03 	call	0x7dc	; 0x7dc <itoa>
			//Send_A_String(positionString);
			LCD_Disp(positionString);
 444:	c7 01       	movw	r24, r14
 446:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_Disp>
		
		adc1 = map(adc_result1,0,1023,0,255);
		
		if ( adc_result0 != temp0 )
		{
			temp0 = adc_result0;
 44a:	16 01       	movw	r2, r12
			itoa(adc1, positionString, 10);
			//Send_A_String(positionString);
			LCD_Disp(positionString);
		}			

		if ( adc_result1 != temp1 )
 44c:	a4 14       	cp	r10, r4
 44e:	b5 04       	cpc	r11, r5
 450:	99 f1       	breq	.+102    	; 0x4b8 <__stack+0x59>
		{
			temp1 = adc_result1;
			
			cls();
 452:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <cls>
			
			itoa(adc_result0, positionString, 10); // convert integer to string
 456:	c6 01       	movw	r24, r12
 458:	b7 01       	movw	r22, r14
 45a:	4a e0       	ldi	r20, 0x0A	; 10
 45c:	50 e0       	ldi	r21, 0x00	; 0
 45e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <itoa>
			//Send_A_String(positionString);
			//Send_A_String("/");
			LCD_Disp(positionString);
 462:	c7 01       	movw	r24, r14
 464:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_Disp>
			LCD_Disp("/");
 468:	c4 01       	movw	r24, r8
 46a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_Disp>
			itoa(adc_result1, positionString, 10);
 46e:	c5 01       	movw	r24, r10
 470:	b7 01       	movw	r22, r14
 472:	4a e0       	ldi	r20, 0x0A	; 10
 474:	50 e0       	ldi	r21, 0x00	; 0
 476:	0e 94 ee 03 	call	0x7dc	; 0x7dc <itoa>
			//Send_A_String(positionString);
			LCD_Disp(positionString);
 47a:	c7 01       	movw	r24, r14
 47c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_Disp>
			
			//GotoMrLCDsLocation(64, 0);
			//LCD_setCursor(1,0); // this means x = 1 , y = 0
			LCD_setCursor(0,1); // this means x = 0 , y = 1
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	61 e0       	ldi	r22, 0x01	; 1
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_setCursor>
			
			itoa(adc0, positionString, 10); // convert integer to string
 48c:	c3 01       	movw	r24, r6
 48e:	b7 01       	movw	r22, r14
 490:	4a e0       	ldi	r20, 0x0A	; 10
 492:	50 e0       	ldi	r21, 0x00	; 0
 494:	0e 94 ee 03 	call	0x7dc	; 0x7dc <itoa>
			//Send_A_String(positionString);
			//Send_A_String("/");
			LCD_Disp(positionString);
 498:	c7 01       	movw	r24, r14
 49a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_Disp>
			LCD_Disp("/");
 49e:	c4 01       	movw	r24, r8
 4a0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_Disp>
			itoa(adc1, positionString, 10);
 4a4:	c8 01       	movw	r24, r16
 4a6:	b7 01       	movw	r22, r14
 4a8:	4a e0       	ldi	r20, 0x0A	; 10
 4aa:	50 e0       	ldi	r21, 0x00	; 0
 4ac:	0e 94 ee 03 	call	0x7dc	; 0x7dc <itoa>
			//Send_A_String(positionString);
			LCD_Disp(positionString);
 4b0:	c7 01       	movw	r24, r14
 4b2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_Disp>
			LCD_Disp(positionString);
		}			

		if ( adc_result1 != temp1 )
		{
			temp1 = adc_result1;
 4b6:	25 01       	movw	r4, r10
 4b8:	87 ea       	ldi	r24, 0xA7	; 167
 4ba:	91 e6       	ldi	r25, 0x61	; 97
 4bc:	01 97       	sbiw	r24, 0x01	; 1
 4be:	f1 f7       	brne	.-4      	; 0x4bc <__stack+0x5d>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <__stack+0x63>
 4c2:	00 00       	nop
 4c4:	83 ed       	ldi	r24, 0xD3	; 211
 4c6:	90 e3       	ldi	r25, 0x30	; 48
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <__stack+0x69>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <__stack+0x6f>
 4ce:	00 00       	nop
 
        //itoa(adc_result1, int_buffer, 10);
        //lcd_gotoxy(12,1);
        //lcd_puts(int_buffer);
        
    }
 4d0:	6b cf       	rjmp	.-298    	; 0x3a8 <main+0x62>

000004d2 <__divsf3>:
 4d2:	0c d0       	rcall	.+24     	; 0x4ec <__divsf3x>
 4d4:	e6 c0       	rjmp	.+460    	; 0x6a2 <__fp_round>
 4d6:	de d0       	rcall	.+444    	; 0x694 <__fp_pscB>
 4d8:	40 f0       	brcs	.+16     	; 0x4ea <__divsf3+0x18>
 4da:	d5 d0       	rcall	.+426    	; 0x686 <__fp_pscA>
 4dc:	30 f0       	brcs	.+12     	; 0x4ea <__divsf3+0x18>
 4de:	21 f4       	brne	.+8      	; 0x4e8 <__divsf3+0x16>
 4e0:	5f 3f       	cpi	r21, 0xFF	; 255
 4e2:	19 f0       	breq	.+6      	; 0x4ea <__divsf3+0x18>
 4e4:	c7 c0       	rjmp	.+398    	; 0x674 <__fp_inf>
 4e6:	51 11       	cpse	r21, r1
 4e8:	10 c1       	rjmp	.+544    	; 0x70a <__fp_szero>
 4ea:	ca c0       	rjmp	.+404    	; 0x680 <__fp_nan>

000004ec <__divsf3x>:
 4ec:	eb d0       	rcall	.+470    	; 0x6c4 <__fp_split3>
 4ee:	98 f3       	brcs	.-26     	; 0x4d6 <__divsf3+0x4>

000004f0 <__divsf3_pse>:
 4f0:	99 23       	and	r25, r25
 4f2:	c9 f3       	breq	.-14     	; 0x4e6 <__divsf3+0x14>
 4f4:	55 23       	and	r21, r21
 4f6:	b1 f3       	breq	.-20     	; 0x4e4 <__divsf3+0x12>
 4f8:	95 1b       	sub	r25, r21
 4fa:	55 0b       	sbc	r21, r21
 4fc:	bb 27       	eor	r27, r27
 4fe:	aa 27       	eor	r26, r26
 500:	62 17       	cp	r22, r18
 502:	73 07       	cpc	r23, r19
 504:	84 07       	cpc	r24, r20
 506:	38 f0       	brcs	.+14     	; 0x516 <__divsf3_pse+0x26>
 508:	9f 5f       	subi	r25, 0xFF	; 255
 50a:	5f 4f       	sbci	r21, 0xFF	; 255
 50c:	22 0f       	add	r18, r18
 50e:	33 1f       	adc	r19, r19
 510:	44 1f       	adc	r20, r20
 512:	aa 1f       	adc	r26, r26
 514:	a9 f3       	breq	.-22     	; 0x500 <__divsf3_pse+0x10>
 516:	33 d0       	rcall	.+102    	; 0x57e <__divsf3_pse+0x8e>
 518:	0e 2e       	mov	r0, r30
 51a:	3a f0       	brmi	.+14     	; 0x52a <__divsf3_pse+0x3a>
 51c:	e0 e8       	ldi	r30, 0x80	; 128
 51e:	30 d0       	rcall	.+96     	; 0x580 <__divsf3_pse+0x90>
 520:	91 50       	subi	r25, 0x01	; 1
 522:	50 40       	sbci	r21, 0x00	; 0
 524:	e6 95       	lsr	r30
 526:	00 1c       	adc	r0, r0
 528:	ca f7       	brpl	.-14     	; 0x51c <__divsf3_pse+0x2c>
 52a:	29 d0       	rcall	.+82     	; 0x57e <__divsf3_pse+0x8e>
 52c:	fe 2f       	mov	r31, r30
 52e:	27 d0       	rcall	.+78     	; 0x57e <__divsf3_pse+0x8e>
 530:	66 0f       	add	r22, r22
 532:	77 1f       	adc	r23, r23
 534:	88 1f       	adc	r24, r24
 536:	bb 1f       	adc	r27, r27
 538:	26 17       	cp	r18, r22
 53a:	37 07       	cpc	r19, r23
 53c:	48 07       	cpc	r20, r24
 53e:	ab 07       	cpc	r26, r27
 540:	b0 e8       	ldi	r27, 0x80	; 128
 542:	09 f0       	breq	.+2      	; 0x546 <__divsf3_pse+0x56>
 544:	bb 0b       	sbc	r27, r27
 546:	80 2d       	mov	r24, r0
 548:	bf 01       	movw	r22, r30
 54a:	ff 27       	eor	r31, r31
 54c:	93 58       	subi	r25, 0x83	; 131
 54e:	5f 4f       	sbci	r21, 0xFF	; 255
 550:	2a f0       	brmi	.+10     	; 0x55c <__divsf3_pse+0x6c>
 552:	9e 3f       	cpi	r25, 0xFE	; 254
 554:	51 05       	cpc	r21, r1
 556:	68 f0       	brcs	.+26     	; 0x572 <__divsf3_pse+0x82>
 558:	8d c0       	rjmp	.+282    	; 0x674 <__fp_inf>
 55a:	d7 c0       	rjmp	.+430    	; 0x70a <__fp_szero>
 55c:	5f 3f       	cpi	r21, 0xFF	; 255
 55e:	ec f3       	brlt	.-6      	; 0x55a <__divsf3_pse+0x6a>
 560:	98 3e       	cpi	r25, 0xE8	; 232
 562:	dc f3       	brlt	.-10     	; 0x55a <__divsf3_pse+0x6a>
 564:	86 95       	lsr	r24
 566:	77 95       	ror	r23
 568:	67 95       	ror	r22
 56a:	b7 95       	ror	r27
 56c:	f7 95       	ror	r31
 56e:	9f 5f       	subi	r25, 0xFF	; 255
 570:	c9 f7       	brne	.-14     	; 0x564 <__divsf3_pse+0x74>
 572:	88 0f       	add	r24, r24
 574:	91 1d       	adc	r25, r1
 576:	96 95       	lsr	r25
 578:	87 95       	ror	r24
 57a:	97 f9       	bld	r25, 7
 57c:	08 95       	ret
 57e:	e1 e0       	ldi	r30, 0x01	; 1
 580:	66 0f       	add	r22, r22
 582:	77 1f       	adc	r23, r23
 584:	88 1f       	adc	r24, r24
 586:	bb 1f       	adc	r27, r27
 588:	62 17       	cp	r22, r18
 58a:	73 07       	cpc	r23, r19
 58c:	84 07       	cpc	r24, r20
 58e:	ba 07       	cpc	r27, r26
 590:	20 f0       	brcs	.+8      	; 0x59a <__divsf3_pse+0xaa>
 592:	62 1b       	sub	r22, r18
 594:	73 0b       	sbc	r23, r19
 596:	84 0b       	sbc	r24, r20
 598:	ba 0b       	sbc	r27, r26
 59a:	ee 1f       	adc	r30, r30
 59c:	88 f7       	brcc	.-30     	; 0x580 <__divsf3_pse+0x90>
 59e:	e0 95       	com	r30
 5a0:	08 95       	ret

000005a2 <__fixunssfsi>:
 5a2:	98 d0       	rcall	.+304    	; 0x6d4 <__fp_splitA>
 5a4:	88 f0       	brcs	.+34     	; 0x5c8 <__fixunssfsi+0x26>
 5a6:	9f 57       	subi	r25, 0x7F	; 127
 5a8:	90 f0       	brcs	.+36     	; 0x5ce <__fixunssfsi+0x2c>
 5aa:	b9 2f       	mov	r27, r25
 5ac:	99 27       	eor	r25, r25
 5ae:	b7 51       	subi	r27, 0x17	; 23
 5b0:	a0 f0       	brcs	.+40     	; 0x5da <__fixunssfsi+0x38>
 5b2:	d1 f0       	breq	.+52     	; 0x5e8 <__fixunssfsi+0x46>
 5b4:	66 0f       	add	r22, r22
 5b6:	77 1f       	adc	r23, r23
 5b8:	88 1f       	adc	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	1a f0       	brmi	.+6      	; 0x5c4 <__fixunssfsi+0x22>
 5be:	ba 95       	dec	r27
 5c0:	c9 f7       	brne	.-14     	; 0x5b4 <__fixunssfsi+0x12>
 5c2:	12 c0       	rjmp	.+36     	; 0x5e8 <__fixunssfsi+0x46>
 5c4:	b1 30       	cpi	r27, 0x01	; 1
 5c6:	81 f0       	breq	.+32     	; 0x5e8 <__fixunssfsi+0x46>
 5c8:	9f d0       	rcall	.+318    	; 0x708 <__fp_zero>
 5ca:	b1 e0       	ldi	r27, 0x01	; 1
 5cc:	08 95       	ret
 5ce:	9c c0       	rjmp	.+312    	; 0x708 <__fp_zero>
 5d0:	67 2f       	mov	r22, r23
 5d2:	78 2f       	mov	r23, r24
 5d4:	88 27       	eor	r24, r24
 5d6:	b8 5f       	subi	r27, 0xF8	; 248
 5d8:	39 f0       	breq	.+14     	; 0x5e8 <__fixunssfsi+0x46>
 5da:	b9 3f       	cpi	r27, 0xF9	; 249
 5dc:	cc f3       	brlt	.-14     	; 0x5d0 <__fixunssfsi+0x2e>
 5de:	86 95       	lsr	r24
 5e0:	77 95       	ror	r23
 5e2:	67 95       	ror	r22
 5e4:	b3 95       	inc	r27
 5e6:	d9 f7       	brne	.-10     	; 0x5de <__fixunssfsi+0x3c>
 5e8:	3e f4       	brtc	.+14     	; 0x5f8 <__fixunssfsi+0x56>
 5ea:	90 95       	com	r25
 5ec:	80 95       	com	r24
 5ee:	70 95       	com	r23
 5f0:	61 95       	neg	r22
 5f2:	7f 4f       	sbci	r23, 0xFF	; 255
 5f4:	8f 4f       	sbci	r24, 0xFF	; 255
 5f6:	9f 4f       	sbci	r25, 0xFF	; 255
 5f8:	08 95       	ret

000005fa <__floatunsisf>:
 5fa:	e8 94       	clt
 5fc:	09 c0       	rjmp	.+18     	; 0x610 <__floatsisf+0x12>

000005fe <__floatsisf>:
 5fe:	97 fb       	bst	r25, 7
 600:	3e f4       	brtc	.+14     	; 0x610 <__floatsisf+0x12>
 602:	90 95       	com	r25
 604:	80 95       	com	r24
 606:	70 95       	com	r23
 608:	61 95       	neg	r22
 60a:	7f 4f       	sbci	r23, 0xFF	; 255
 60c:	8f 4f       	sbci	r24, 0xFF	; 255
 60e:	9f 4f       	sbci	r25, 0xFF	; 255
 610:	99 23       	and	r25, r25
 612:	a9 f0       	breq	.+42     	; 0x63e <__floatsisf+0x40>
 614:	f9 2f       	mov	r31, r25
 616:	96 e9       	ldi	r25, 0x96	; 150
 618:	bb 27       	eor	r27, r27
 61a:	93 95       	inc	r25
 61c:	f6 95       	lsr	r31
 61e:	87 95       	ror	r24
 620:	77 95       	ror	r23
 622:	67 95       	ror	r22
 624:	b7 95       	ror	r27
 626:	f1 11       	cpse	r31, r1
 628:	f8 cf       	rjmp	.-16     	; 0x61a <__floatsisf+0x1c>
 62a:	fa f4       	brpl	.+62     	; 0x66a <__floatsisf+0x6c>
 62c:	bb 0f       	add	r27, r27
 62e:	11 f4       	brne	.+4      	; 0x634 <__floatsisf+0x36>
 630:	60 ff       	sbrs	r22, 0
 632:	1b c0       	rjmp	.+54     	; 0x66a <__floatsisf+0x6c>
 634:	6f 5f       	subi	r22, 0xFF	; 255
 636:	7f 4f       	sbci	r23, 0xFF	; 255
 638:	8f 4f       	sbci	r24, 0xFF	; 255
 63a:	9f 4f       	sbci	r25, 0xFF	; 255
 63c:	16 c0       	rjmp	.+44     	; 0x66a <__floatsisf+0x6c>
 63e:	88 23       	and	r24, r24
 640:	11 f0       	breq	.+4      	; 0x646 <__floatsisf+0x48>
 642:	96 e9       	ldi	r25, 0x96	; 150
 644:	11 c0       	rjmp	.+34     	; 0x668 <__floatsisf+0x6a>
 646:	77 23       	and	r23, r23
 648:	21 f0       	breq	.+8      	; 0x652 <__floatsisf+0x54>
 64a:	9e e8       	ldi	r25, 0x8E	; 142
 64c:	87 2f       	mov	r24, r23
 64e:	76 2f       	mov	r23, r22
 650:	05 c0       	rjmp	.+10     	; 0x65c <__floatsisf+0x5e>
 652:	66 23       	and	r22, r22
 654:	71 f0       	breq	.+28     	; 0x672 <__floatsisf+0x74>
 656:	96 e8       	ldi	r25, 0x86	; 134
 658:	86 2f       	mov	r24, r22
 65a:	70 e0       	ldi	r23, 0x00	; 0
 65c:	60 e0       	ldi	r22, 0x00	; 0
 65e:	2a f0       	brmi	.+10     	; 0x66a <__floatsisf+0x6c>
 660:	9a 95       	dec	r25
 662:	66 0f       	add	r22, r22
 664:	77 1f       	adc	r23, r23
 666:	88 1f       	adc	r24, r24
 668:	da f7       	brpl	.-10     	; 0x660 <__floatsisf+0x62>
 66a:	88 0f       	add	r24, r24
 66c:	96 95       	lsr	r25
 66e:	87 95       	ror	r24
 670:	97 f9       	bld	r25, 7
 672:	08 95       	ret

00000674 <__fp_inf>:
 674:	97 f9       	bld	r25, 7
 676:	9f 67       	ori	r25, 0x7F	; 127
 678:	80 e8       	ldi	r24, 0x80	; 128
 67a:	70 e0       	ldi	r23, 0x00	; 0
 67c:	60 e0       	ldi	r22, 0x00	; 0
 67e:	08 95       	ret

00000680 <__fp_nan>:
 680:	9f ef       	ldi	r25, 0xFF	; 255
 682:	80 ec       	ldi	r24, 0xC0	; 192
 684:	08 95       	ret

00000686 <__fp_pscA>:
 686:	00 24       	eor	r0, r0
 688:	0a 94       	dec	r0
 68a:	16 16       	cp	r1, r22
 68c:	17 06       	cpc	r1, r23
 68e:	18 06       	cpc	r1, r24
 690:	09 06       	cpc	r0, r25
 692:	08 95       	ret

00000694 <__fp_pscB>:
 694:	00 24       	eor	r0, r0
 696:	0a 94       	dec	r0
 698:	12 16       	cp	r1, r18
 69a:	13 06       	cpc	r1, r19
 69c:	14 06       	cpc	r1, r20
 69e:	05 06       	cpc	r0, r21
 6a0:	08 95       	ret

000006a2 <__fp_round>:
 6a2:	09 2e       	mov	r0, r25
 6a4:	03 94       	inc	r0
 6a6:	00 0c       	add	r0, r0
 6a8:	11 f4       	brne	.+4      	; 0x6ae <__fp_round+0xc>
 6aa:	88 23       	and	r24, r24
 6ac:	52 f0       	brmi	.+20     	; 0x6c2 <__fp_round+0x20>
 6ae:	bb 0f       	add	r27, r27
 6b0:	40 f4       	brcc	.+16     	; 0x6c2 <__fp_round+0x20>
 6b2:	bf 2b       	or	r27, r31
 6b4:	11 f4       	brne	.+4      	; 0x6ba <__fp_round+0x18>
 6b6:	60 ff       	sbrs	r22, 0
 6b8:	04 c0       	rjmp	.+8      	; 0x6c2 <__fp_round+0x20>
 6ba:	6f 5f       	subi	r22, 0xFF	; 255
 6bc:	7f 4f       	sbci	r23, 0xFF	; 255
 6be:	8f 4f       	sbci	r24, 0xFF	; 255
 6c0:	9f 4f       	sbci	r25, 0xFF	; 255
 6c2:	08 95       	ret

000006c4 <__fp_split3>:
 6c4:	57 fd       	sbrc	r21, 7
 6c6:	90 58       	subi	r25, 0x80	; 128
 6c8:	44 0f       	add	r20, r20
 6ca:	55 1f       	adc	r21, r21
 6cc:	59 f0       	breq	.+22     	; 0x6e4 <__fp_splitA+0x10>
 6ce:	5f 3f       	cpi	r21, 0xFF	; 255
 6d0:	71 f0       	breq	.+28     	; 0x6ee <__fp_splitA+0x1a>
 6d2:	47 95       	ror	r20

000006d4 <__fp_splitA>:
 6d4:	88 0f       	add	r24, r24
 6d6:	97 fb       	bst	r25, 7
 6d8:	99 1f       	adc	r25, r25
 6da:	61 f0       	breq	.+24     	; 0x6f4 <__fp_splitA+0x20>
 6dc:	9f 3f       	cpi	r25, 0xFF	; 255
 6de:	79 f0       	breq	.+30     	; 0x6fe <__fp_splitA+0x2a>
 6e0:	87 95       	ror	r24
 6e2:	08 95       	ret
 6e4:	12 16       	cp	r1, r18
 6e6:	13 06       	cpc	r1, r19
 6e8:	14 06       	cpc	r1, r20
 6ea:	55 1f       	adc	r21, r21
 6ec:	f2 cf       	rjmp	.-28     	; 0x6d2 <__fp_split3+0xe>
 6ee:	46 95       	lsr	r20
 6f0:	f1 df       	rcall	.-30     	; 0x6d4 <__fp_splitA>
 6f2:	08 c0       	rjmp	.+16     	; 0x704 <__fp_splitA+0x30>
 6f4:	16 16       	cp	r1, r22
 6f6:	17 06       	cpc	r1, r23
 6f8:	18 06       	cpc	r1, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	f1 cf       	rjmp	.-30     	; 0x6e0 <__fp_splitA+0xc>
 6fe:	86 95       	lsr	r24
 700:	71 05       	cpc	r23, r1
 702:	61 05       	cpc	r22, r1
 704:	08 94       	sec
 706:	08 95       	ret

00000708 <__fp_zero>:
 708:	e8 94       	clt

0000070a <__fp_szero>:
 70a:	bb 27       	eor	r27, r27
 70c:	66 27       	eor	r22, r22
 70e:	77 27       	eor	r23, r23
 710:	cb 01       	movw	r24, r22
 712:	97 f9       	bld	r25, 7
 714:	08 95       	ret

00000716 <__mulsf3>:
 716:	0b d0       	rcall	.+22     	; 0x72e <__mulsf3x>
 718:	c4 cf       	rjmp	.-120    	; 0x6a2 <__fp_round>
 71a:	b5 df       	rcall	.-150    	; 0x686 <__fp_pscA>
 71c:	28 f0       	brcs	.+10     	; 0x728 <__mulsf3+0x12>
 71e:	ba df       	rcall	.-140    	; 0x694 <__fp_pscB>
 720:	18 f0       	brcs	.+6      	; 0x728 <__mulsf3+0x12>
 722:	95 23       	and	r25, r21
 724:	09 f0       	breq	.+2      	; 0x728 <__mulsf3+0x12>
 726:	a6 cf       	rjmp	.-180    	; 0x674 <__fp_inf>
 728:	ab cf       	rjmp	.-170    	; 0x680 <__fp_nan>
 72a:	11 24       	eor	r1, r1
 72c:	ee cf       	rjmp	.-36     	; 0x70a <__fp_szero>

0000072e <__mulsf3x>:
 72e:	ca df       	rcall	.-108    	; 0x6c4 <__fp_split3>
 730:	a0 f3       	brcs	.-24     	; 0x71a <__mulsf3+0x4>

00000732 <__mulsf3_pse>:
 732:	95 9f       	mul	r25, r21
 734:	d1 f3       	breq	.-12     	; 0x72a <__mulsf3+0x14>
 736:	95 0f       	add	r25, r21
 738:	50 e0       	ldi	r21, 0x00	; 0
 73a:	55 1f       	adc	r21, r21
 73c:	62 9f       	mul	r22, r18
 73e:	f0 01       	movw	r30, r0
 740:	72 9f       	mul	r23, r18
 742:	bb 27       	eor	r27, r27
 744:	f0 0d       	add	r31, r0
 746:	b1 1d       	adc	r27, r1
 748:	63 9f       	mul	r22, r19
 74a:	aa 27       	eor	r26, r26
 74c:	f0 0d       	add	r31, r0
 74e:	b1 1d       	adc	r27, r1
 750:	aa 1f       	adc	r26, r26
 752:	64 9f       	mul	r22, r20
 754:	66 27       	eor	r22, r22
 756:	b0 0d       	add	r27, r0
 758:	a1 1d       	adc	r26, r1
 75a:	66 1f       	adc	r22, r22
 75c:	82 9f       	mul	r24, r18
 75e:	22 27       	eor	r18, r18
 760:	b0 0d       	add	r27, r0
 762:	a1 1d       	adc	r26, r1
 764:	62 1f       	adc	r22, r18
 766:	73 9f       	mul	r23, r19
 768:	b0 0d       	add	r27, r0
 76a:	a1 1d       	adc	r26, r1
 76c:	62 1f       	adc	r22, r18
 76e:	83 9f       	mul	r24, r19
 770:	a0 0d       	add	r26, r0
 772:	61 1d       	adc	r22, r1
 774:	22 1f       	adc	r18, r18
 776:	74 9f       	mul	r23, r20
 778:	33 27       	eor	r19, r19
 77a:	a0 0d       	add	r26, r0
 77c:	61 1d       	adc	r22, r1
 77e:	23 1f       	adc	r18, r19
 780:	84 9f       	mul	r24, r20
 782:	60 0d       	add	r22, r0
 784:	21 1d       	adc	r18, r1
 786:	82 2f       	mov	r24, r18
 788:	76 2f       	mov	r23, r22
 78a:	6a 2f       	mov	r22, r26
 78c:	11 24       	eor	r1, r1
 78e:	9f 57       	subi	r25, 0x7F	; 127
 790:	50 40       	sbci	r21, 0x00	; 0
 792:	8a f0       	brmi	.+34     	; 0x7b6 <__mulsf3_pse+0x84>
 794:	e1 f0       	breq	.+56     	; 0x7ce <__mulsf3_pse+0x9c>
 796:	88 23       	and	r24, r24
 798:	4a f0       	brmi	.+18     	; 0x7ac <__mulsf3_pse+0x7a>
 79a:	ee 0f       	add	r30, r30
 79c:	ff 1f       	adc	r31, r31
 79e:	bb 1f       	adc	r27, r27
 7a0:	66 1f       	adc	r22, r22
 7a2:	77 1f       	adc	r23, r23
 7a4:	88 1f       	adc	r24, r24
 7a6:	91 50       	subi	r25, 0x01	; 1
 7a8:	50 40       	sbci	r21, 0x00	; 0
 7aa:	a9 f7       	brne	.-22     	; 0x796 <__mulsf3_pse+0x64>
 7ac:	9e 3f       	cpi	r25, 0xFE	; 254
 7ae:	51 05       	cpc	r21, r1
 7b0:	70 f0       	brcs	.+28     	; 0x7ce <__mulsf3_pse+0x9c>
 7b2:	60 cf       	rjmp	.-320    	; 0x674 <__fp_inf>
 7b4:	aa cf       	rjmp	.-172    	; 0x70a <__fp_szero>
 7b6:	5f 3f       	cpi	r21, 0xFF	; 255
 7b8:	ec f3       	brlt	.-6      	; 0x7b4 <__mulsf3_pse+0x82>
 7ba:	98 3e       	cpi	r25, 0xE8	; 232
 7bc:	dc f3       	brlt	.-10     	; 0x7b4 <__mulsf3_pse+0x82>
 7be:	86 95       	lsr	r24
 7c0:	77 95       	ror	r23
 7c2:	67 95       	ror	r22
 7c4:	b7 95       	ror	r27
 7c6:	f7 95       	ror	r31
 7c8:	e7 95       	ror	r30
 7ca:	9f 5f       	subi	r25, 0xFF	; 255
 7cc:	c1 f7       	brne	.-16     	; 0x7be <__mulsf3_pse+0x8c>
 7ce:	fe 2b       	or	r31, r30
 7d0:	88 0f       	add	r24, r24
 7d2:	91 1d       	adc	r25, r1
 7d4:	96 95       	lsr	r25
 7d6:	87 95       	ror	r24
 7d8:	97 f9       	bld	r25, 7
 7da:	08 95       	ret

000007dc <itoa>:
 7dc:	fb 01       	movw	r30, r22
 7de:	9f 01       	movw	r18, r30
 7e0:	e8 94       	clt
 7e2:	42 30       	cpi	r20, 0x02	; 2
 7e4:	c4 f0       	brlt	.+48     	; 0x816 <itoa+0x3a>
 7e6:	45 32       	cpi	r20, 0x25	; 37
 7e8:	b4 f4       	brge	.+44     	; 0x816 <itoa+0x3a>
 7ea:	4a 30       	cpi	r20, 0x0A	; 10
 7ec:	29 f4       	brne	.+10     	; 0x7f8 <itoa+0x1c>
 7ee:	97 fb       	bst	r25, 7
 7f0:	1e f4       	brtc	.+6      	; 0x7f8 <itoa+0x1c>
 7f2:	90 95       	com	r25
 7f4:	81 95       	neg	r24
 7f6:	9f 4f       	sbci	r25, 0xFF	; 255
 7f8:	64 2f       	mov	r22, r20
 7fa:	77 27       	eor	r23, r23
 7fc:	0e 94 1f 04 	call	0x83e	; 0x83e <__udivmodhi4>
 800:	80 5d       	subi	r24, 0xD0	; 208
 802:	8a 33       	cpi	r24, 0x3A	; 58
 804:	0c f0       	brlt	.+2      	; 0x808 <itoa+0x2c>
 806:	89 5d       	subi	r24, 0xD9	; 217
 808:	81 93       	st	Z+, r24
 80a:	cb 01       	movw	r24, r22
 80c:	00 97       	sbiw	r24, 0x00	; 0
 80e:	a1 f7       	brne	.-24     	; 0x7f8 <itoa+0x1c>
 810:	16 f4       	brtc	.+4      	; 0x816 <itoa+0x3a>
 812:	5d e2       	ldi	r21, 0x2D	; 45
 814:	51 93       	st	Z+, r21
 816:	10 82       	st	Z, r1
 818:	c9 01       	movw	r24, r18
 81a:	0c 94 0f 04 	jmp	0x81e	; 0x81e <strrev>

0000081e <strrev>:
 81e:	dc 01       	movw	r26, r24
 820:	fc 01       	movw	r30, r24
 822:	67 2f       	mov	r22, r23
 824:	71 91       	ld	r23, Z+
 826:	77 23       	and	r23, r23
 828:	e1 f7       	brne	.-8      	; 0x822 <strrev+0x4>
 82a:	32 97       	sbiw	r30, 0x02	; 2
 82c:	04 c0       	rjmp	.+8      	; 0x836 <strrev+0x18>
 82e:	7c 91       	ld	r23, X
 830:	6d 93       	st	X+, r22
 832:	70 83       	st	Z, r23
 834:	62 91       	ld	r22, -Z
 836:	ae 17       	cp	r26, r30
 838:	bf 07       	cpc	r27, r31
 83a:	c8 f3       	brcs	.-14     	; 0x82e <strrev+0x10>
 83c:	08 95       	ret

0000083e <__udivmodhi4>:
 83e:	aa 1b       	sub	r26, r26
 840:	bb 1b       	sub	r27, r27
 842:	51 e1       	ldi	r21, 0x11	; 17
 844:	07 c0       	rjmp	.+14     	; 0x854 <__udivmodhi4_ep>

00000846 <__udivmodhi4_loop>:
 846:	aa 1f       	adc	r26, r26
 848:	bb 1f       	adc	r27, r27
 84a:	a6 17       	cp	r26, r22
 84c:	b7 07       	cpc	r27, r23
 84e:	10 f0       	brcs	.+4      	; 0x854 <__udivmodhi4_ep>
 850:	a6 1b       	sub	r26, r22
 852:	b7 0b       	sbc	r27, r23

00000854 <__udivmodhi4_ep>:
 854:	88 1f       	adc	r24, r24
 856:	99 1f       	adc	r25, r25
 858:	5a 95       	dec	r21
 85a:	a9 f7       	brne	.-22     	; 0x846 <__udivmodhi4_loop>
 85c:	80 95       	com	r24
 85e:	90 95       	com	r25
 860:	bc 01       	movw	r22, r24
 862:	cd 01       	movw	r24, r26
 864:	08 95       	ret

00000866 <_exit>:
 866:	f8 94       	cli

00000868 <__stop_program>:
 868:	ff cf       	rjmp	.-2      	; 0x868 <__stop_program>
