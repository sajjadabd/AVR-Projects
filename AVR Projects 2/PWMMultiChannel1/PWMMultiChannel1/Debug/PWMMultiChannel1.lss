
PWMMultiChannel1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000097  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000008ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000038  00000000  00000000  000008cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001f8  00000000  00000000  00000903  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000015f  00000000  00000000  00000afb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000274  00000000  00000000  00000c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000124  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000086  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  000010ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000010f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initPWM>:
#include <util/delay.h>

void initPWM()
{
	
	TCCR0 |= 1 << WGM00 | 1 << WGM01 | 1 << CS00 | 1 << COM01;
  6c:	83 b7       	in	r24, 0x33	; 51
  6e:	89 66       	ori	r24, 0x69	; 105
  70:	83 bf       	out	0x33, r24	; 51
	
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);  
  72:	82 ea       	ldi	r24, 0xA2	; 162
  74:	8f bd       	out	0x2f, r24	; 47
	
    TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS12); 
  76:	8d e1       	ldi	r24, 0x1D	; 29
  78:	8e bd       	out	0x2e, r24	; 46
	
	//ICR1 = (F_CPU[MHz] * periode[us] / prescaler) - 1 
    ICR1   = 10;           // periode cca 0.5s / 8 MHz
  7a:	8a e0       	ldi	r24, 0x0A	; 10
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	97 bd       	out	0x27, r25	; 39
  80:	86 bd       	out	0x26, r24	; 38
	
	DDRB |= 1 << PINB3;
  82:	bb 9a       	sbi	0x17, 3	; 23
	
	DDRD |= 1 << PIND4;
  84:	8c 9a       	sbi	0x11, 4	; 17
	DDRD |= 1 << PIND5;
  86:	8d 9a       	sbi	0x11, 5	; 17
	

}
  88:	08 95       	ret

0000008a <setPWMOutput>:

void setPWMOutput(int duty)
{
	OCR0  = duty;
  8a:	8c bf       	out	0x3c, r24	; 60
	OCR1A = duty;          // duty cycle = 20 percent
  8c:	28 2f       	mov	r18, r24
  8e:	39 2f       	mov	r19, r25
  90:	3b bd       	out	0x2b, r19	; 43
  92:	2a bd       	out	0x2a, r18	; 42
    OCR1B = duty;    
  94:	39 bd       	out	0x29, r19	; 41
  96:	28 bd       	out	0x28, r18	; 40
}
  98:	08 95       	ret

0000009a <main>:

int main(void)
{
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
	initPWM();
  a6:	0e 94 36 00 	call	0x6c	; 0x6c <initPWM>
	
    while(1)
    {
        //TODO:: Please write your application code 
		for(int i=0;i<255;i++)
  aa:	c0 e0       	ldi	r28, 0x00	; 0
  ac:	d0 e0       	ldi	r29, 0x00	; 0
  ae:	0f ef       	ldi	r16, 0xFF	; 255
  b0:	10 e0       	ldi	r17, 0x00	; 0
  b2:	ee 24       	eor	r14, r14
  b4:	ff 24       	eor	r15, r15
  b6:	0a c0       	rjmp	.+20     	; 0xcc <main+0x32>
		{
			setPWMOutput(i);
  b8:	ce 01       	movw	r24, r28
  ba:	0e 94 45 00 	call	0x8a	; 0x8a <setPWMOutput>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	89 ef       	ldi	r24, 0xF9	; 249
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x28>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x2e>
  c8:	00 00       	nop
	initPWM();
	
    while(1)
    {
        //TODO:: Please write your application code 
		for(int i=0;i<255;i++)
  ca:	21 96       	adiw	r28, 0x01	; 1
  cc:	cf 3f       	cpi	r28, 0xFF	; 255
  ce:	d1 05       	cpc	r29, r1
  d0:	9c f3       	brlt	.-26     	; 0xb8 <main+0x1e>
  d2:	e8 01       	movw	r28, r16
			_delay_ms(1);
		}			 
		
		for(int i=255;i>0;i--)
		{
			setPWMOutput(i);
  d4:	ce 01       	movw	r24, r28
  d6:	0e 94 45 00 	call	0x8a	; 0x8a <setPWMOutput>
  da:	89 ef       	ldi	r24, 0xF9	; 249
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x44>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x4a>
  e4:	00 00       	nop
		{
			setPWMOutput(i);
			_delay_ms(1);
		}			 
		
		for(int i=255;i>0;i--)
  e6:	21 97       	sbiw	r28, 0x01	; 1
  e8:	a9 f7       	brne	.-22     	; 0xd4 <main+0x3a>
	initPWM();
	
    while(1)
    {
        //TODO:: Please write your application code 
		for(int i=0;i<255;i++)
  ea:	e7 01       	movw	r28, r14
  ec:	ef cf       	rjmp	.-34     	; 0xcc <main+0x32>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
