
DotMatrix_Snake_Chamran.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000068c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000068c  00000720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800074  00800074  00000734  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000734  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000e97  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000133  00000000  00000000  00000eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000006d7  00000000  00000000  00000fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000228  00000000  00000000  000016c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000006a4  00000000  00000000  000018e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c0  00000000  00000000  00001f90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001d7  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000027e  00000000  00000000  00002227  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  000024a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000030  00000000  00000000  000024dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 38       	cpi	r26, 0x88	; 136
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 86 02 	call	0x50c	; 0x50c <main>
  8a:	0c 94 44 03 	jmp	0x688	; 0x688 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <putPixel>:
	offPixel(5,6);
}

void putPixel(uint16_t x,uint16_t y)
{
	PORTB &= ~(1 << x);
  92:	48 b3       	in	r20, 0x18	; 24
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	f9 01       	movw	r30, r18
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <putPixel+0xe>
  9c:	ee 0f       	add	r30, r30
  9e:	ff 1f       	adc	r31, r31
  a0:	8a 95       	dec	r24
  a2:	e2 f7       	brpl	.-8      	; 0x9c <putPixel+0xa>
  a4:	cf 01       	movw	r24, r30
  a6:	80 95       	com	r24
  a8:	48 23       	and	r20, r24
  aa:	48 bb       	out	0x18, r20	; 24
	PORTC |= 1 << y;
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <putPixel+0x22>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <putPixel+0x1e>
  b8:	28 2b       	or	r18, r24
  ba:	25 bb       	out	0x15, r18	; 21
}
  bc:	08 95       	ret

000000be <offPixel>:

void offPixel(uint16_t x,uint16_t y)
{
	PORTB |= (1 << x);
  be:	48 b3       	in	r20, 0x18	; 24
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	f9 01       	movw	r30, r18
  c6:	02 c0       	rjmp	.+4      	; 0xcc <offPixel+0xe>
  c8:	ee 0f       	add	r30, r30
  ca:	ff 1f       	adc	r31, r31
  cc:	8a 95       	dec	r24
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <offPixel+0xa>
  d0:	cf 01       	movw	r24, r30
  d2:	84 2b       	or	r24, r20
  d4:	88 bb       	out	0x18, r24	; 24
	PORTC &= ~(1 << y);
  d6:	85 b3       	in	r24, 0x15	; 21
  d8:	02 c0       	rjmp	.+4      	; 0xde <offPixel+0x20>
  da:	22 0f       	add	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <offPixel+0x1c>
  e2:	20 95       	com	r18
  e4:	28 23       	and	r18, r24
  e6:	25 bb       	out	0x15, r18	; 21
}
  e8:	08 95       	ret

000000ea <__vector_8>:

uint16_t x[3] = { 2 , 2 , 2 };
uint16_t y[3] = { 2 , 3 ,  4 };

ISR (TIMER1_OVF_vect)    // Timer1 ISR
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	af 92       	push	r10
  f6:	bf 92       	push	r11
  f8:	cf 92       	push	r12
  fa:	df 92       	push	r13
  fc:	ef 92       	push	r14
  fe:	ff 92       	push	r15
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	4f 93       	push	r20
 10a:	5f 93       	push	r21
 10c:	6f 93       	push	r22
 10e:	7f 93       	push	r23
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	af 93       	push	r26
 116:	bf 93       	push	r27
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
typedef struct Node;

uint16_t x[3] = { 2 , 2 , 2 };
uint16_t y[3] = { 2 , 3 ,  4 };

ISR (TIMER1_OVF_vect)    // Timer1 ISR
 120:	c8 e6       	ldi	r28, 0x68	; 104
 122:	d0 e0       	ldi	r29, 0x00	; 0
 124:	0f 2e       	mov	r0, r31
 126:	fe e6       	ldi	r31, 0x6E	; 110
 128:	ef 2e       	mov	r14, r31
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	ff 2e       	mov	r15, r31
 12e:	f0 2d       	mov	r31, r0
 130:	0f 2e       	mov	r0, r31
 132:	f6 e0       	ldi	r31, 0x06	; 6
 134:	af 2e       	mov	r10, r31
 136:	bb 24       	eor	r11, r11
 138:	f0 2d       	mov	r31, r0
 13a:	ac 0e       	add	r10, r28
 13c:	bd 1e       	adc	r11, r29
 13e:	67 01       	movw	r12, r14
 140:	8e 01       	movw	r16, r28
{
	//PORTD ^= (1 << LED);	
	//offPixel(i,j);
	for(uint16_t k = 0; k < 3; k ++ )
	{
		offPixel(x[k],y[k]);
 142:	f6 01       	movw	r30, r12
 144:	61 91       	ld	r22, Z+
 146:	71 91       	ld	r23, Z+
 148:	6f 01       	movw	r12, r30
 14a:	f8 01       	movw	r30, r16
 14c:	81 91       	ld	r24, Z+
 14e:	91 91       	ld	r25, Z+
 150:	8f 01       	movw	r16, r30
 152:	0e 94 5f 00 	call	0xbe	; 0xbe <offPixel>

ISR (TIMER1_OVF_vect)    // Timer1 ISR
{
	//PORTD ^= (1 << LED);	
	//offPixel(i,j);
	for(uint16_t k = 0; k < 3; k ++ )
 156:	0a 15       	cp	r16, r10
 158:	1b 05       	cpc	r17, r11
 15a:	99 f7       	brne	.-26     	; 0x142 <__vector_8+0x58>
	{
		offPixel(x[k],y[k]);
	}
	
	if( goUp == 1)//left
 15c:	80 91 7c 00 	lds	r24, 0x007C
 160:	90 91 7d 00 	lds	r25, 0x007D
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	91 05       	cpc	r25, r1
 168:	61 f4       	brne	.+24     	; 0x182 <__vector_8+0x98>
	{
		if( i < 7 )
 16a:	80 91 62 00 	lds	r24, 0x0062
 16e:	90 91 63 00 	lds	r25, 0x0063
 172:	87 30       	cpi	r24, 0x07	; 7
 174:	91 05       	cpc	r25, r1
 176:	28 f4       	brcc	.+10     	; 0x182 <__vector_8+0x98>
			i++;
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	90 93 63 00 	sts	0x0063, r25
 17e:	80 93 62 00 	sts	0x0062, r24
	}
	if( goDown == 1 )//right
 182:	80 91 7e 00 	lds	r24, 0x007E
 186:	90 91 7f 00 	lds	r25, 0x007F
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	91 05       	cpc	r25, r1
 18e:	59 f4       	brne	.+22     	; 0x1a6 <__vector_8+0xbc>
	{
		if( i > 0 )
 190:	80 91 62 00 	lds	r24, 0x0062
 194:	90 91 63 00 	lds	r25, 0x0063
 198:	00 97       	sbiw	r24, 0x00	; 0
 19a:	29 f0       	breq	.+10     	; 0x1a6 <__vector_8+0xbc>
			i--;
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	90 93 63 00 	sts	0x0063, r25
 1a2:	80 93 62 00 	sts	0x0062, r24
	}
	if(goRight == 1)//up
 1a6:	80 91 82 00 	lds	r24, 0x0082
 1aa:	90 91 83 00 	lds	r25, 0x0083
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	91 05       	cpc	r25, r1
 1b2:	61 f4       	brne	.+24     	; 0x1cc <__vector_8+0xe2>
	{
		if( j < 7 )
 1b4:	80 91 64 00 	lds	r24, 0x0064
 1b8:	90 91 65 00 	lds	r25, 0x0065
 1bc:	87 30       	cpi	r24, 0x07	; 7
 1be:	91 05       	cpc	r25, r1
 1c0:	28 f4       	brcc	.+10     	; 0x1cc <__vector_8+0xe2>
			j++;
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	90 93 65 00 	sts	0x0065, r25
 1c8:	80 93 64 00 	sts	0x0064, r24
	}
	if(goLeft == 1)//down
 1cc:	80 91 80 00 	lds	r24, 0x0080
 1d0:	90 91 81 00 	lds	r25, 0x0081
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	91 05       	cpc	r25, r1
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_8+0x106>
	{
		if( j > 0 )
 1da:	80 91 64 00 	lds	r24, 0x0064
 1de:	90 91 65 00 	lds	r25, 0x0065
 1e2:	00 97       	sbiw	r24, 0x00	; 0
 1e4:	29 f0       	breq	.+10     	; 0x1f0 <__vector_8+0x106>
			j--;
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	90 93 65 00 	sts	0x0065, r25
 1ec:	80 93 64 00 	sts	0x0064, r24
	}
	
	x[1] = x[2];
 1f0:	80 91 6c 00 	lds	r24, 0x006C
 1f4:	90 91 6d 00 	lds	r25, 0x006D
 1f8:	90 93 6b 00 	sts	0x006B, r25
 1fc:	80 93 6a 00 	sts	0x006A, r24
	y[1] = y[2];
 200:	80 91 72 00 	lds	r24, 0x0072
 204:	90 91 73 00 	lds	r25, 0x0073
 208:	90 93 71 00 	sts	0x0071, r25
 20c:	80 93 70 00 	sts	0x0070, r24
	
	x[2] = x[3];
 210:	80 91 6e 00 	lds	r24, 0x006E
 214:	90 91 6f 00 	lds	r25, 0x006F
 218:	90 93 6d 00 	sts	0x006D, r25
 21c:	80 93 6c 00 	sts	0x006C, r24
	y[2] = y[3];
 220:	80 91 74 00 	lds	r24, 0x0074
 224:	90 91 75 00 	lds	r25, 0x0075
 228:	90 93 73 00 	sts	0x0073, r25
 22c:	80 93 72 00 	sts	0x0072, r24
	
	x[3] = i;
 230:	80 91 62 00 	lds	r24, 0x0062
 234:	90 91 63 00 	lds	r25, 0x0063
 238:	90 93 6f 00 	sts	0x006F, r25
 23c:	80 93 6e 00 	sts	0x006E, r24
	y[3] = j;
 240:	80 91 64 00 	lds	r24, 0x0064
 244:	90 91 65 00 	lds	r25, 0x0065
 248:	90 93 75 00 	sts	0x0075, r25
 24c:	80 93 74 00 	sts	0x0074, r24
	
	
	for(uint16_t k = 0; k < 3; k ++ )
	{
		putPixel(x[k],y[k]);
 250:	f7 01       	movw	r30, r14
 252:	61 91       	ld	r22, Z+
 254:	71 91       	ld	r23, Z+
 256:	7f 01       	movw	r14, r30
 258:	89 91       	ld	r24, Y+
 25a:	99 91       	ld	r25, Y+
 25c:	0e 94 49 00 	call	0x92	; 0x92 <putPixel>
	
	x[3] = i;
	y[3] = j;
	
	
	for(uint16_t k = 0; k < 3; k ++ )
 260:	ca 15       	cp	r28, r10
 262:	db 05       	cpc	r29, r11
 264:	a9 f7       	brne	.-22     	; 0x250 <__vector_8+0x166>
	{
		putPixel(x[k],y[k]);
	}
	//putPixel(i,j);
	
	TCNT1 = TIME_1;   // for 1 sec at 16 MHz
 266:	80 91 66 00 	lds	r24, 0x0066
 26a:	90 91 67 00 	lds	r25, 0x0067
 26e:	9d bd       	out	0x2d, r25	; 45
 270:	8c bd       	out	0x2c, r24	; 44
	//TCNT1 = 31987;
}
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	bf 91       	pop	r27
 27c:	af 91       	pop	r26
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	7f 91       	pop	r23
 284:	6f 91       	pop	r22
 286:	5f 91       	pop	r21
 288:	4f 91       	pop	r20
 28a:	3f 91       	pop	r19
 28c:	2f 91       	pop	r18
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	ff 90       	pop	r15
 294:	ef 90       	pop	r14
 296:	df 90       	pop	r13
 298:	cf 90       	pop	r12
 29a:	bf 90       	pop	r11
 29c:	af 90       	pop	r10
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <adc_init>:

// initialize adc
void adc_init()
{
    // AREF = AVcc
    ADMUX = (1<<REFS0);
 2a8:	80 e4       	ldi	r24, 0x40	; 64
 2aa:	87 b9       	out	0x07, r24	; 7
 
    // ADC Enable and prescaler of 128
    // 16000000/128 = 125000
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 2ac:	87 e8       	ldi	r24, 0x87	; 135
 2ae:	86 b9       	out	0x06, r24	; 6
}
 2b0:	08 95       	ret

000002b2 <adc_read>:
    // select the corresponding channel 0~7
    // ANDing with '7' will always keep the value
    // of 'ch' between 0 and 7
	
    ch &= 0b00000111;  // AND operation with 7
    ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
 2b2:	97 b1       	in	r25, 0x07	; 7
{
    // select the corresponding channel 0~7
    // ANDing with '7' will always keep the value
    // of 'ch' between 0 and 7
	
    ch &= 0b00000111;  // AND operation with 7
 2b4:	87 70       	andi	r24, 0x07	; 7
    ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
 2b6:	98 7f       	andi	r25, 0xF8	; 248
 2b8:	98 2b       	or	r25, r24
 2ba:	97 b9       	out	0x07, r25	; 7
 
    // start single conversion
    // write '1' to ADSC
    ADCSRA |= (1<<ADSC);
 2bc:	36 9a       	sbi	0x06, 6	; 6
 
    // wait for conversion to complete
    // ADSC becomes '0' again
    // till then, run loop continuously
    while(ADCSRA & (1<<ADSC));
 2be:	36 99       	sbic	0x06, 6	; 6
 2c0:	fe cf       	rjmp	.-4      	; 0x2be <adc_read+0xc>
 
    return (ADC);
 2c2:	24 b1       	in	r18, 0x04	; 4
 2c4:	35 b1       	in	r19, 0x05	; 5
}
 2c6:	82 2f       	mov	r24, r18
 2c8:	93 2f       	mov	r25, r19
 2ca:	08 95       	ret

000002cc <init>:

void init()
{
	DDRB |= 1 << PINB0;
 2cc:	b8 9a       	sbi	0x17, 0	; 23
	DDRB |= 1 << PINB1;
 2ce:	b9 9a       	sbi	0x17, 1	; 23
	DDRB |= 1 << PINB2;
 2d0:	ba 9a       	sbi	0x17, 2	; 23
	DDRB |= 1 << PINB3;
 2d2:	bb 9a       	sbi	0x17, 3	; 23
	DDRB |= 1 << PINB4;
 2d4:	bc 9a       	sbi	0x17, 4	; 23
	DDRB |= 1 << PINB5;
 2d6:	bd 9a       	sbi	0x17, 5	; 23
	DDRB |= 1 << PINB6;
 2d8:	be 9a       	sbi	0x17, 6	; 23
	DDRB |= 1 << PINB7;
 2da:	bf 9a       	sbi	0x17, 7	; 23
	
	DDRC |= 1 << PINC0;
 2dc:	a0 9a       	sbi	0x14, 0	; 20
	DDRC |= 1 << PINC1;
 2de:	a1 9a       	sbi	0x14, 1	; 20
	DDRC |= 1 << PINC2;
 2e0:	a2 9a       	sbi	0x14, 2	; 20
	DDRC |= 1 << PINC3;
 2e2:	a3 9a       	sbi	0x14, 3	; 20
	DDRC |= 1 << PINC4;
 2e4:	a4 9a       	sbi	0x14, 4	; 20
	DDRC |= 1 << PINC5;
 2e6:	a5 9a       	sbi	0x14, 5	; 20
	DDRC |= 1 << PINC6;
 2e8:	a6 9a       	sbi	0x14, 6	; 20
	DDRC |= 1 << PINC7;
 2ea:	a7 9a       	sbi	0x14, 7	; 20
	
	PORTB |= 1 << 0;
 2ec:	c0 9a       	sbi	0x18, 0	; 24
	PORTB |= 1 << 1;
 2ee:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |= 1 << 2;
 2f0:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |= 1 << 3;
 2f2:	c3 9a       	sbi	0x18, 3	; 24
	PORTB |= 1 << 4;
 2f4:	c4 9a       	sbi	0x18, 4	; 24
	PORTB |= 1 << 5;
 2f6:	c5 9a       	sbi	0x18, 5	; 24
	PORTB |= 1 << 6;
 2f8:	c6 9a       	sbi	0x18, 6	; 24
	PORTB |= 1 << 7;
 2fa:	c7 9a       	sbi	0x18, 7	; 24
}
 2fc:	08 95       	ret

000002fe <firstGame>:

//PORTB Columns
//PORTC Rows

void firstGame()
{
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
	for(uint16_t i=0;i<size;i++)
 302:	80 91 60 00 	lds	r24, 0x0060
 306:	90 91 61 00 	lds	r25, 0x0061
 30a:	00 97       	sbiw	r24, 0x00	; 0
 30c:	09 f4       	brne	.+2      	; 0x310 <firstGame+0x12>
 30e:	49 c0       	rjmp	.+146    	; 0x3a2 <firstGame+0xa4>
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	70 e0       	ldi	r23, 0x00	; 0
	{
		PORTC |= 1 << i;
 314:	41 e0       	ldi	r20, 0x01	; 1
 316:	50 e0       	ldi	r21, 0x00	; 0
		for(uint16_t j=0;j<size;j++)
 318:	e0 e0       	ldi	r30, 0x00	; 0
 31a:	f0 e0       	ldi	r31, 0x00	; 0

void firstGame()
{
	for(uint16_t i=0;i<size;i++)
	{
		PORTC |= 1 << i;
 31c:	25 b3       	in	r18, 0x15	; 21
 31e:	ca 01       	movw	r24, r20
 320:	06 2e       	mov	r0, r22
 322:	02 c0       	rjmp	.+4      	; 0x328 <firstGame+0x2a>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	0a 94       	dec	r0
 32a:	e2 f7       	brpl	.-8      	; 0x324 <firstGame+0x26>
 32c:	b8 2f       	mov	r27, r24
 32e:	82 2b       	or	r24, r18
 330:	85 bb       	out	0x15, r24	; 21
		for(uint16_t j=0;j<size;j++)
 332:	80 91 60 00 	lds	r24, 0x0060
 336:	90 91 61 00 	lds	r25, 0x0061
 33a:	00 97       	sbiw	r24, 0x00	; 0
 33c:	f1 f0       	breq	.+60     	; 0x37a <firstGame+0x7c>
 33e:	cf 01       	movw	r24, r30
		{
				
			PORTB &= ~(1 << j);
 340:	a8 b3       	in	r26, 0x18	; 24
 342:	9a 01       	movw	r18, r20
 344:	08 2e       	mov	r0, r24
 346:	02 c0       	rjmp	.+4      	; 0x34c <firstGame+0x4e>
 348:	22 0f       	add	r18, r18
 34a:	33 1f       	adc	r19, r19
 34c:	0a 94       	dec	r0
 34e:	e2 f7       	brpl	.-8      	; 0x348 <firstGame+0x4a>
 350:	32 2f       	mov	r19, r18
 352:	30 95       	com	r19
 354:	3a 23       	and	r19, r26
 356:	38 bb       	out	0x18, r19	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 358:	c7 ea       	ldi	r28, 0xA7	; 167
 35a:	d1 e6       	ldi	r29, 0x61	; 97
 35c:	21 97       	sbiw	r28, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <firstGame+0x5e>
 360:	00 c0       	rjmp	.+0      	; 0x362 <firstGame+0x64>
 362:	00 00       	nop
			_delay_ms(100);
			PORTB |= (1 << j);
 364:	38 b3       	in	r19, 0x18	; 24
 366:	23 2b       	or	r18, r19
 368:	28 bb       	out	0x18, r18	; 24
void firstGame()
{
	for(uint16_t i=0;i<size;i++)
	{
		PORTC |= 1 << i;
		for(uint16_t j=0;j<size;j++)
 36a:	01 96       	adiw	r24, 0x01	; 1
 36c:	20 91 60 00 	lds	r18, 0x0060
 370:	30 91 61 00 	lds	r19, 0x0061
 374:	82 17       	cp	r24, r18
 376:	93 07       	cpc	r25, r19
 378:	18 f3       	brcs	.-58     	; 0x340 <firstGame+0x42>
				
			PORTB &= ~(1 << j);
			_delay_ms(100);
			PORTB |= (1 << j);
		}
		PORTC &= ~(1 << i);
 37a:	95 b3       	in	r25, 0x15	; 21
 37c:	b0 95       	com	r27
 37e:	b9 23       	and	r27, r25
 380:	b5 bb       	out	0x15, r27	; 21
 382:	87 ea       	ldi	r24, 0xA7	; 167
 384:	91 e6       	ldi	r25, 0x61	; 97
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <firstGame+0x88>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <firstGame+0x8e>
 38c:	00 00       	nop
//PORTB Columns
//PORTC Rows

void firstGame()
{
	for(uint16_t i=0;i<size;i++)
 38e:	6f 5f       	subi	r22, 0xFF	; 255
 390:	7f 4f       	sbci	r23, 0xFF	; 255
 392:	80 91 60 00 	lds	r24, 0x0060
 396:	90 91 61 00 	lds	r25, 0x0061
 39a:	68 17       	cp	r22, r24
 39c:	79 07       	cpc	r23, r25
 39e:	08 f4       	brcc	.+2      	; 0x3a2 <firstGame+0xa4>
 3a0:	bd cf       	rjmp	.-134    	; 0x31c <firstGame+0x1e>
			PORTB |= (1 << j);
		}
		PORTC &= ~(1 << i);
		_delay_ms(100);
	}
}
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	08 95       	ret

000003a8 <secondGame>:

void secondGame()
{
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
	for(uint16_t i=0;i<size;i++)
 3ac:	80 91 60 00 	lds	r24, 0x0060
 3b0:	90 91 61 00 	lds	r25, 0x0061
 3b4:	00 97       	sbiw	r24, 0x00	; 0
 3b6:	09 f4       	brne	.+2      	; 0x3ba <secondGame+0x12>
 3b8:	49 c0       	rjmp	.+146    	; 0x44c <secondGame+0xa4>
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	70 e0       	ldi	r23, 0x00	; 0
	{
		
		PORTB &= ~(1 << i);
 3be:	41 e0       	ldi	r20, 0x01	; 1
 3c0:	50 e0       	ldi	r21, 0x00	; 0
		for(uint16_t j=0;j<size;j++)
 3c2:	e0 e0       	ldi	r30, 0x00	; 0
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
void secondGame()
{
	for(uint16_t i=0;i<size;i++)
	{
		
		PORTB &= ~(1 << i);
 3c6:	28 b3       	in	r18, 0x18	; 24
 3c8:	ca 01       	movw	r24, r20
 3ca:	06 2e       	mov	r0, r22
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <secondGame+0x2a>
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	0a 94       	dec	r0
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <secondGame+0x26>
 3d6:	b8 2f       	mov	r27, r24
 3d8:	80 95       	com	r24
 3da:	82 23       	and	r24, r18
 3dc:	88 bb       	out	0x18, r24	; 24
		for(uint16_t j=0;j<size;j++)
 3de:	80 91 60 00 	lds	r24, 0x0060
 3e2:	90 91 61 00 	lds	r25, 0x0061
 3e6:	00 97       	sbiw	r24, 0x00	; 0
 3e8:	f1 f0       	breq	.+60     	; 0x426 <secondGame+0x7e>
 3ea:	cf 01       	movw	r24, r30
		{
			PORTC |= 1 << j;
 3ec:	a5 b3       	in	r26, 0x15	; 21
 3ee:	9a 01       	movw	r18, r20
 3f0:	08 2e       	mov	r0, r24
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <secondGame+0x50>
 3f4:	22 0f       	add	r18, r18
 3f6:	33 1f       	adc	r19, r19
 3f8:	0a 94       	dec	r0
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <secondGame+0x4c>
 3fc:	32 2f       	mov	r19, r18
 3fe:	3a 2b       	or	r19, r26
 400:	35 bb       	out	0x15, r19	; 21
 402:	c7 ea       	ldi	r28, 0xA7	; 167
 404:	d1 e6       	ldi	r29, 0x61	; 97
 406:	21 97       	sbiw	r28, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <secondGame+0x5e>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <secondGame+0x64>
 40c:	00 00       	nop
			_delay_ms(100);
			PORTC &= ~(1 << j);
 40e:	35 b3       	in	r19, 0x15	; 21
 410:	20 95       	com	r18
 412:	23 23       	and	r18, r19
 414:	25 bb       	out	0x15, r18	; 21
{
	for(uint16_t i=0;i<size;i++)
	{
		
		PORTB &= ~(1 << i);
		for(uint16_t j=0;j<size;j++)
 416:	01 96       	adiw	r24, 0x01	; 1
 418:	20 91 60 00 	lds	r18, 0x0060
 41c:	30 91 61 00 	lds	r19, 0x0061
 420:	82 17       	cp	r24, r18
 422:	93 07       	cpc	r25, r19
 424:	18 f3       	brcs	.-58     	; 0x3ec <secondGame+0x44>
			PORTC |= 1 << j;
			_delay_ms(100);
			PORTC &= ~(1 << j);
		}
		
		PORTB |= (1 << i);
 426:	88 b3       	in	r24, 0x18	; 24
 428:	b8 2b       	or	r27, r24
 42a:	b8 bb       	out	0x18, r27	; 24
 42c:	87 ea       	ldi	r24, 0xA7	; 167
 42e:	91 e6       	ldi	r25, 0x61	; 97
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <secondGame+0x88>
 434:	00 c0       	rjmp	.+0      	; 0x436 <secondGame+0x8e>
 436:	00 00       	nop
	}
}

void secondGame()
{
	for(uint16_t i=0;i<size;i++)
 438:	6f 5f       	subi	r22, 0xFF	; 255
 43a:	7f 4f       	sbci	r23, 0xFF	; 255
 43c:	80 91 60 00 	lds	r24, 0x0060
 440:	90 91 61 00 	lds	r25, 0x0061
 444:	68 17       	cp	r22, r24
 446:	79 07       	cpc	r23, r25
 448:	08 f4       	brcc	.+2      	; 0x44c <secondGame+0xa4>
 44a:	bd cf       	rjmp	.-134    	; 0x3c6 <secondGame+0x1e>
		}
		
		PORTB |= (1 << i);
		_delay_ms(100);
	}
}
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	08 95       	ret

00000452 <thirdGame>:

void thirdGame()
{
 452:	0f 93       	push	r16
 454:	1f 93       	push	r17
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
	putPixel(1,2);
 45a:	09 e4       	ldi	r16, 0x49	; 73
 45c:	10 e0       	ldi	r17, 0x00	; 0
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	62 e0       	ldi	r22, 0x02	; 2
 464:	70 e0       	ldi	r23, 0x00	; 0
 466:	f8 01       	movw	r30, r16
 468:	09 95       	icall
 46a:	8f e3       	ldi	r24, 0x3F	; 63
 46c:	9d e0       	ldi	r25, 0x0D	; 13
 46e:	a3 e0       	ldi	r26, 0x03	; 3
 470:	81 50       	subi	r24, 0x01	; 1
 472:	90 40       	sbci	r25, 0x00	; 0
 474:	a0 40       	sbci	r26, 0x00	; 0
 476:	e1 f7       	brne	.-8      	; 0x470 <__stack+0x11>
 478:	00 c0       	rjmp	.+0      	; 0x47a <__stack+0x1b>
 47a:	00 00       	nop
	_delay_ms(1000);
	offPixel(1,2);
 47c:	cf e5       	ldi	r28, 0x5F	; 95
 47e:	d0 e0       	ldi	r29, 0x00	; 0
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	62 e0       	ldi	r22, 0x02	; 2
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	fe 01       	movw	r30, r28
 48a:	09 95       	icall
		
		
	putPixel(3,4);
 48c:	83 e0       	ldi	r24, 0x03	; 3
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	64 e0       	ldi	r22, 0x04	; 4
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	f8 01       	movw	r30, r16
 496:	09 95       	icall
 498:	8f e3       	ldi	r24, 0x3F	; 63
 49a:	9d e0       	ldi	r25, 0x0D	; 13
 49c:	a3 e0       	ldi	r26, 0x03	; 3
 49e:	81 50       	subi	r24, 0x01	; 1
 4a0:	90 40       	sbci	r25, 0x00	; 0
 4a2:	a0 40       	sbci	r26, 0x00	; 0
 4a4:	e1 f7       	brne	.-8      	; 0x49e <__stack+0x3f>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <__stack+0x49>
 4a8:	00 00       	nop
	_delay_ms(1000);
	offPixel(3,4);
 4aa:	83 e0       	ldi	r24, 0x03	; 3
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	64 e0       	ldi	r22, 0x04	; 4
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	fe 01       	movw	r30, r28
 4b4:	09 95       	icall
		
	putPixel(5,6);
 4b6:	85 e0       	ldi	r24, 0x05	; 5
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	66 e0       	ldi	r22, 0x06	; 6
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	f8 01       	movw	r30, r16
 4c0:	09 95       	icall
 4c2:	8f e3       	ldi	r24, 0x3F	; 63
 4c4:	9d e0       	ldi	r25, 0x0D	; 13
 4c6:	a3 e0       	ldi	r26, 0x03	; 3
 4c8:	81 50       	subi	r24, 0x01	; 1
 4ca:	90 40       	sbci	r25, 0x00	; 0
 4cc:	a0 40       	sbci	r26, 0x00	; 0
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <__stack+0x69>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <__stack+0x73>
 4d2:	00 00       	nop
	_delay_ms(1000);
	offPixel(5,6);
 4d4:	85 e0       	ldi	r24, 0x05	; 5
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	66 e0       	ldi	r22, 0x06	; 6
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	fe 01       	movw	r30, r28
 4de:	09 95       	icall
}
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	1f 91       	pop	r17
 4e6:	0f 91       	pop	r16
 4e8:	08 95       	ret

000004ea <makeAllFalse>:



void makeAllFalse()
{
	goUp = goDown = goLeft = goRight = 0;
 4ea:	10 92 83 00 	sts	0x0083, r1
 4ee:	10 92 82 00 	sts	0x0082, r1
 4f2:	10 92 81 00 	sts	0x0081, r1
 4f6:	10 92 80 00 	sts	0x0080, r1
 4fa:	10 92 7f 00 	sts	0x007F, r1
 4fe:	10 92 7e 00 	sts	0x007E, r1
 502:	10 92 7d 00 	sts	0x007D, r1
 506:	10 92 7c 00 	sts	0x007C, r1
}
 50a:	08 95       	ret

0000050c <main>:

int main(void)
{
 50c:	0f 93       	push	r16
 50e:	1f 93       	push	r17
 510:	cf 93       	push	r28
 512:	df 93       	push	r29
	//disable JTAG
	MCUCSR = (1 << JTD);
 514:	80 e8       	ldi	r24, 0x80	; 128
 516:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1 << JTD);
 518:	84 bf       	out	0x34, r24	; 52
	
	goRight = 1;
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	90 93 83 00 	sts	0x0083, r25
 522:	80 93 82 00 	sts	0x0082, r24
	
	init();
 526:	0e 94 66 01 	call	0x2cc	; 0x2cc <init>
	adc_init();
 52a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <adc_init>
	// Set timer1_counter to the correct value for our interrupt interval
    //timer1_counter = 64911;   // preload timer 65536-16MHz/256/100Hz
    //timer1_counter = 64286;   // preload timer 65536-16MHz/256/50Hz
    //timer1_counter = 34286;   // preload timer 65536-16MHz/256/2Hz
	//TCNT1 = 63974;   // for 1 sec at 16 MHz	
	TCNT1 = TIME_1;
 52e:	80 91 66 00 	lds	r24, 0x0066
 532:	90 91 67 00 	lds	r25, 0x0067
 536:	9d bd       	out	0x2d, r25	; 45
 538:	8c bd       	out	0x2c, r24	; 44

	TCCR1A = 0x00;
 53a:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<CS10) | (1<<CS12);;  // Timer mode with 1024 prescler
 53c:	85 e0       	ldi	r24, 0x05	; 5
 53e:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
 540:	84 e0       	ldi	r24, 0x04	; 4
 542:	89 bf       	out	0x39, r24	; 57
	sei();        // Enable global interrupts by setting global interrupt enable bit in SREG
 544:	78 94       	sei
	//PORTC |= 1 << PINC7;
	//PORTB &= ~(1 << PINB0);
	
	uint16_t adc_result0, adc_result1;
	
	putPixel(i,j);
 546:	60 91 64 00 	lds	r22, 0x0064
 54a:	70 91 65 00 	lds	r23, 0x0065
 54e:	80 91 62 00 	lds	r24, 0x0062
 552:	90 91 63 00 	lds	r25, 0x0063
 556:	0e 94 49 00 	call	0x92	; 0x92 <putPixel>
		//----------------------------
		
		if(up > checkingPoint)
		{
			makeAllFalse();
			goUp = 1;
 55a:	01 e0       	ldi	r16, 0x01	; 1
 55c:	10 e0       	ldi	r17, 0x00	; 0
	
    while(1)
    {
		
        //TODO:: Please write your application code 
		adc_result0 = adc_read(0);
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	0e 94 59 01 	call	0x2b2	; 0x2b2 <adc_read>
 564:	ec 01       	movw	r28, r24
        adc_result1 = adc_read(1);
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	0e 94 59 01 	call	0x2b2	; 0x2b2 <adc_read>

		
		if(adc_result0 > 800)
 56c:	23 e0       	ldi	r18, 0x03	; 3
 56e:	c1 32       	cpi	r28, 0x21	; 33
 570:	d2 07       	cpc	r29, r18
 572:	58 f0       	brcs	.+22     	; 0x58a <main+0x7e>
		{
			down++;
 574:	20 91 76 00 	lds	r18, 0x0076
 578:	30 91 77 00 	lds	r19, 0x0077
 57c:	2f 5f       	subi	r18, 0xFF	; 255
 57e:	3f 4f       	sbci	r19, 0xFF	; 255
 580:	30 93 77 00 	sts	0x0077, r19
 584:	20 93 76 00 	sts	0x0076, r18
 588:	16 c0       	rjmp	.+44     	; 0x5b6 <main+0xaa>
		}
		else if(adc_result0 < 200)
 58a:	c8 3c       	cpi	r28, 0xC8	; 200
 58c:	d1 05       	cpc	r29, r1
 58e:	58 f4       	brcc	.+22     	; 0x5a6 <main+0x9a>
		{
			up++;
 590:	20 91 74 00 	lds	r18, 0x0074
 594:	30 91 75 00 	lds	r19, 0x0075
 598:	2f 5f       	subi	r18, 0xFF	; 255
 59a:	3f 4f       	sbci	r19, 0xFF	; 255
 59c:	30 93 75 00 	sts	0x0075, r19
 5a0:	20 93 74 00 	sts	0x0074, r18
 5a4:	08 c0       	rjmp	.+16     	; 0x5b6 <main+0xaa>
		}
		else
		{
			up = down = 0;
 5a6:	10 92 77 00 	sts	0x0077, r1
 5aa:	10 92 76 00 	sts	0x0076, r1
 5ae:	10 92 75 00 	sts	0x0075, r1
 5b2:	10 92 74 00 	sts	0x0074, r1
		}
		
		
		if(adc_result1 > 800)
 5b6:	23 e0       	ldi	r18, 0x03	; 3
 5b8:	81 32       	cpi	r24, 0x21	; 33
 5ba:	92 07       	cpc	r25, r18
 5bc:	50 f0       	brcs	.+20     	; 0x5d2 <main+0xc6>
		{
			right++;
 5be:	80 91 7a 00 	lds	r24, 0x007A
 5c2:	90 91 7b 00 	lds	r25, 0x007B
 5c6:	01 96       	adiw	r24, 0x01	; 1
 5c8:	90 93 7b 00 	sts	0x007B, r25
 5cc:	80 93 7a 00 	sts	0x007A, r24
 5d0:	15 c0       	rjmp	.+42     	; 0x5fc <main+0xf0>
		}
		else if(adc_result1 < 200)
 5d2:	88 3c       	cpi	r24, 0xC8	; 200
 5d4:	91 05       	cpc	r25, r1
 5d6:	50 f4       	brcc	.+20     	; 0x5ec <main+0xe0>
		{
			left++;
 5d8:	80 91 78 00 	lds	r24, 0x0078
 5dc:	90 91 79 00 	lds	r25, 0x0079
 5e0:	01 96       	adiw	r24, 0x01	; 1
 5e2:	90 93 79 00 	sts	0x0079, r25
 5e6:	80 93 78 00 	sts	0x0078, r24
 5ea:	08 c0       	rjmp	.+16     	; 0x5fc <main+0xf0>
		}
		else
		{
			right = left = 0;
 5ec:	10 92 79 00 	sts	0x0079, r1
 5f0:	10 92 78 00 	sts	0x0078, r1
 5f4:	10 92 7b 00 	sts	0x007B, r1
 5f8:	10 92 7a 00 	sts	0x007A, r1
		}
		
		//----------------------------
		
		if(up > checkingPoint)
 5fc:	80 91 74 00 	lds	r24, 0x0074
 600:	90 91 75 00 	lds	r25, 0x0075
 604:	8b 30       	cpi	r24, 0x0B	; 11
 606:	91 05       	cpc	r25, r1
 608:	50 f0       	brcs	.+20     	; 0x61e <main+0x112>
		{
			makeAllFalse();
 60a:	0e 94 75 02 	call	0x4ea	; 0x4ea <makeAllFalse>
			goUp = 1;
 60e:	10 93 7d 00 	sts	0x007D, r17
 612:	00 93 7c 00 	sts	0x007C, r16
				
			up = 0;
 616:	10 92 75 00 	sts	0x0075, r1
 61a:	10 92 74 00 	sts	0x0074, r1
		}
		
		if(down > checkingPoint)
 61e:	80 91 76 00 	lds	r24, 0x0076
 622:	90 91 77 00 	lds	r25, 0x0077
 626:	8b 30       	cpi	r24, 0x0B	; 11
 628:	91 05       	cpc	r25, r1
 62a:	50 f0       	brcs	.+20     	; 0x640 <main+0x134>
		{
			makeAllFalse();
 62c:	0e 94 75 02 	call	0x4ea	; 0x4ea <makeAllFalse>
			goDown = 1;
 630:	10 93 7f 00 	sts	0x007F, r17
 634:	00 93 7e 00 	sts	0x007E, r16
			
			down = 0;
 638:	10 92 77 00 	sts	0x0077, r1
 63c:	10 92 76 00 	sts	0x0076, r1
		}
		
		if(right > checkingPoint)
 640:	80 91 7a 00 	lds	r24, 0x007A
 644:	90 91 7b 00 	lds	r25, 0x007B
 648:	8b 30       	cpi	r24, 0x0B	; 11
 64a:	91 05       	cpc	r25, r1
 64c:	50 f0       	brcs	.+20     	; 0x662 <main+0x156>
		{
			makeAllFalse();
 64e:	0e 94 75 02 	call	0x4ea	; 0x4ea <makeAllFalse>
			goRight = 1;
 652:	10 93 83 00 	sts	0x0083, r17
 656:	00 93 82 00 	sts	0x0082, r16
			
			right = 0;
 65a:	10 92 7b 00 	sts	0x007B, r1
 65e:	10 92 7a 00 	sts	0x007A, r1
		}
		
		if(left > checkingPoint)
 662:	80 91 78 00 	lds	r24, 0x0078
 666:	90 91 79 00 	lds	r25, 0x0079
 66a:	8b 30       	cpi	r24, 0x0B	; 11
 66c:	91 05       	cpc	r25, r1
 66e:	08 f4       	brcc	.+2      	; 0x672 <main+0x166>
 670:	76 cf       	rjmp	.-276    	; 0x55e <main+0x52>
		{
			makeAllFalse();
 672:	0e 94 75 02 	call	0x4ea	; 0x4ea <makeAllFalse>
			goLeft = 1;
 676:	10 93 81 00 	sts	0x0081, r17
 67a:	00 93 80 00 	sts	0x0080, r16
			
			left = 0;
 67e:	10 92 79 00 	sts	0x0079, r1
 682:	10 92 78 00 	sts	0x0078, r1
 686:	6b cf       	rjmp	.-298    	; 0x55e <main+0x52>

00000688 <_exit>:
 688:	f8 94       	cli

0000068a <__stop_program>:
 68a:	ff cf       	rjmp	.-2      	; 0x68a <__stop_program>
