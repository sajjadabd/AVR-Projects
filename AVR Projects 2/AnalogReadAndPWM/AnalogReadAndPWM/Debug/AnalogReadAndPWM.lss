
AnalogReadAndPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000097  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000957  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000005a  00000000  00000000  00000977  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002ee  00000000  00000000  000009d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001b0  00000000  00000000  00000cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b6  00000000  00000000  00000e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001128  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ad  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000169  00000000  00000000  00001345  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  000014ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <map>:
#define LTHRES 500
#define RTHRES 500

//map(val, 0, 1023, 0, 255);
int map(int input,int input_start,int input_end,int output_start,int output_end)
{
  6c:	0f 93       	push	r16
  6e:	1f 93       	push	r17
	int output ;
	int input_range = input_end - input_start;
	int output_range = output_end - output_start;
  70:	02 1b       	sub	r16, r18
  72:	13 0b       	sbc	r17, r19

	output = (input - input_start)*output_range / input_range + output_start;
  74:	fc 01       	movw	r30, r24
  76:	e6 1b       	sub	r30, r22
  78:	f7 0b       	sbc	r31, r23
  7a:	0e 9f       	mul	r16, r30
  7c:	c0 01       	movw	r24, r0
  7e:	0f 9f       	mul	r16, r31
  80:	90 0d       	add	r25, r0
  82:	1e 9f       	mul	r17, r30
  84:	90 0d       	add	r25, r0
  86:	11 24       	eor	r1, r1

//map(val, 0, 1023, 0, 255);
int map(int input,int input_start,int input_end,int output_start,int output_end)
{
	int output ;
	int input_range = input_end - input_start;
  88:	fa 01       	movw	r30, r20
  8a:	e6 1b       	sub	r30, r22
  8c:	f7 0b       	sbc	r31, r23
  8e:	bf 01       	movw	r22, r30
	int output_range = output_end - output_start;

	output = (input - input_start)*output_range / input_range + output_start;
  90:	0e 94 a7 00 	call	0x14e	; 0x14e <__divmodhi4>
  94:	26 0f       	add	r18, r22
  96:	37 1f       	adc	r19, r23
	
	return output;
}
  98:	82 2f       	mov	r24, r18
  9a:	93 2f       	mov	r25, r19
  9c:	1f 91       	pop	r17
  9e:	0f 91       	pop	r16
  a0:	08 95       	ret

000000a2 <initPWM>:

void initPWM()
{
	TCCR0 |= 1 << WGM00 | 1 << WGM01 | 1 << CS00 | 1 << COM01;
  a2:	83 b7       	in	r24, 0x33	; 51
  a4:	89 66       	ori	r24, 0x69	; 105
  a6:	83 bf       	out	0x33, r24	; 51
	
	DDRB |= 1 << PINB3;
  a8:	bb 9a       	sbi	0x17, 3	; 23
	//DDRC |= (1 << PC5) | (1 << PC4);
	
	//DDRD |= 1 << PIND4;
	
	//DDRD |= 1 << PINB3;
}
  aa:	08 95       	ret

000000ac <setPWMOutput>:

void setPWMOutput(int duty)
{
	// D3   D5    D6   B3
	OCR0 = duty;
  ac:	8c bf       	out	0x3c, r24	; 60
	//INT1 = duty;
	//D3
	//OCR1B = duty;
	//OCR1A = duty;
	//ICP1 = duty;
}
  ae:	08 95       	ret

000000b0 <adc_init>:

// initialize adc
void adc_init()
{
    // AREF = AVcc
    ADMUX = (1<<REFS0);
  b0:	80 e4       	ldi	r24, 0x40	; 64
  b2:	87 b9       	out	0x07, r24	; 7
 
    // ADC Enable and prescaler of 128
    // 16000000/128 = 125000
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  b4:	87 e8       	ldi	r24, 0x87	; 135
  b6:	86 b9       	out	0x06, r24	; 6
}
  b8:	08 95       	ret

000000ba <adc_read>:
{
    // select the corresponding channel 0~7
    // ANDing with '7' will always keep the value
    // of 'ch' between 0 and 7
    ch &= 0b00000111;  // AND operation with 7
    ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
  ba:	97 b1       	in	r25, 0x07	; 7
uint16_t adc_read(uint8_t ch)
{
    // select the corresponding channel 0~7
    // ANDing with '7' will always keep the value
    // of 'ch' between 0 and 7
    ch &= 0b00000111;  // AND operation with 7
  bc:	87 70       	andi	r24, 0x07	; 7
    ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
  be:	98 7f       	andi	r25, 0xF8	; 248
  c0:	98 2b       	or	r25, r24
  c2:	97 b9       	out	0x07, r25	; 7
 
    // start single conversion
    // write '1' to ADSC
    ADCSRA |= (1<<ADSC);
  c4:	36 9a       	sbi	0x06, 6	; 6
 
    // wait for conversion to complete
    // ADSC becomes '0' again
    // till then, run loop continuously
    while(ADCSRA & (1<<ADSC));
  c6:	36 99       	sbic	0x06, 6	; 6
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <adc_read+0xc>
 
    return (ADC);
  ca:	24 b1       	in	r18, 0x04	; 4
  cc:	35 b1       	in	r19, 0x05	; 5
}
  ce:	82 2f       	mov	r24, r18
  d0:	93 2f       	mov	r25, r19
  d2:	08 95       	ret

000000d4 <main>:
 
int main()
{
  d4:	ef 92       	push	r14
  d6:	ff 92       	push	r15
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
    uint16_t adc_result0, adc_result1;
    char int_buffer[10];
    //DDRC = 0x01;           // to connect led to PC0
	//DDRB |= 1 << PINB3;
	initPWM();
  e0:	0e 94 51 00 	call	0xa2	; 0xa2 <initPWM>
    // initialize adc and lcd
    adc_init();
  e4:	0e 94 58 00 	call	0xb0	; 0xb0 <adc_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	83 ed       	ldi	r24, 0xD3	; 211
  ea:	90 e3       	ldi	r25, 0x30	; 48
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x18>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x1e>
  f2:	00 00       	nop
 
    _delay_ms(50);
 
    while(1)
    {
        adc_result0 = adc_read(0);      // read adc value at PA0
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 5d 00 	call	0xba	; 0xba <adc_read>
  fa:	ec 01       	movw	r28, r24
        adc_result1 = adc_read(1);      // read adc value at PA1
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 5d 00 	call	0xba	; 0xba <adc_read>
 102:	7c 01       	movw	r14, r24
		//map(val, 0, 1023, 0, 255);
		
		if(map(adc_result0,0,1023,0,255) > 10)
 104:	ce 01       	movw	r24, r28
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	4f ef       	ldi	r20, 0xFF	; 255
 10c:	53 e0       	ldi	r21, 0x03	; 3
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	0f ef       	ldi	r16, 0xFF	; 255
 114:	10 e0       	ldi	r17, 0x00	; 0
 116:	0e 94 36 00 	call	0x6c	; 0x6c <map>
 11a:	8b 30       	cpi	r24, 0x0B	; 11
 11c:	91 05       	cpc	r25, r1
 11e:	1c f0       	brlt	.+6      	; 0x126 <main+0x52>
		{
			setPWMOutput(map(adc_result0,0,1023,0,255));
 120:	0e 94 56 00 	call	0xac	; 0xac <setPWMOutput>
 124:	0d c0       	rjmp	.+26     	; 0x140 <main+0x6c>
		}
		else
		{
			setPWMOutput(map(adc_result1,0,1023,0,255));
 126:	c7 01       	movw	r24, r14
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	4f ef       	ldi	r20, 0xFF	; 255
 12e:	53 e0       	ldi	r21, 0x03	; 3
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	0f ef       	ldi	r16, 0xFF	; 255
 136:	10 e0       	ldi	r17, 0x00	; 0
 138:	0e 94 36 00 	call	0x6c	; 0x6c <map>
 13c:	0e 94 56 00 	call	0xac	; 0xac <setPWMOutput>
 140:	83 ed       	ldi	r24, 0xD3	; 211
 142:	90 e3       	ldi	r25, 0x30	; 48
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <main+0x70>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x76>
 14a:	00 00       	nop
 14c:	d3 cf       	rjmp	.-90     	; 0xf4 <main+0x20>

0000014e <__divmodhi4>:
 14e:	97 fb       	bst	r25, 7
 150:	09 2e       	mov	r0, r25
 152:	07 26       	eor	r0, r23
 154:	0a d0       	rcall	.+20     	; 0x16a <__divmodhi4_neg1>
 156:	77 fd       	sbrc	r23, 7
 158:	04 d0       	rcall	.+8      	; 0x162 <__divmodhi4_neg2>
 15a:	0c d0       	rcall	.+24     	; 0x174 <__udivmodhi4>
 15c:	06 d0       	rcall	.+12     	; 0x16a <__divmodhi4_neg1>
 15e:	00 20       	and	r0, r0
 160:	1a f4       	brpl	.+6      	; 0x168 <__divmodhi4_exit>

00000162 <__divmodhi4_neg2>:
 162:	70 95       	com	r23
 164:	61 95       	neg	r22
 166:	7f 4f       	sbci	r23, 0xFF	; 255

00000168 <__divmodhi4_exit>:
 168:	08 95       	ret

0000016a <__divmodhi4_neg1>:
 16a:	f6 f7       	brtc	.-4      	; 0x168 <__divmodhi4_exit>
 16c:	90 95       	com	r25
 16e:	81 95       	neg	r24
 170:	9f 4f       	sbci	r25, 0xFF	; 255
 172:	08 95       	ret

00000174 <__udivmodhi4>:
 174:	aa 1b       	sub	r26, r26
 176:	bb 1b       	sub	r27, r27
 178:	51 e1       	ldi	r21, 0x11	; 17
 17a:	07 c0       	rjmp	.+14     	; 0x18a <__udivmodhi4_ep>

0000017c <__udivmodhi4_loop>:
 17c:	aa 1f       	adc	r26, r26
 17e:	bb 1f       	adc	r27, r27
 180:	a6 17       	cp	r26, r22
 182:	b7 07       	cpc	r27, r23
 184:	10 f0       	brcs	.+4      	; 0x18a <__udivmodhi4_ep>
 186:	a6 1b       	sub	r26, r22
 188:	b7 0b       	sbc	r27, r23

0000018a <__udivmodhi4_ep>:
 18a:	88 1f       	adc	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	5a 95       	dec	r21
 190:	a9 f7       	brne	.-22     	; 0x17c <__udivmodhi4_loop>
 192:	80 95       	com	r24
 194:	90 95       	com	r25
 196:	bc 01       	movw	r22, r24
 198:	cd 01       	movw	r24, r26
 19a:	08 95       	ret

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
